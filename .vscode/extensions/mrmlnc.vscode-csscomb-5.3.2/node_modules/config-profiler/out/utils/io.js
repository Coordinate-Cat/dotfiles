'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const path = require("path");
const fs = require("fs");
const locatePath = require("locate-path");
const pathManager = require("../managers/path");
/**
 * Find a file by walking up parent directories.
 */
function findUp(files, startFile, endDir) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        endDir = pathManager.resolve(null, endDir);
        startFile = pathManager.resolve(null, startFile);
        const startDir = path.dirname(startFile);
        const findedFilepath = yield new Promise((resolve) => {
            (function find(dir) {
                locatePath(files, { cwd: dir }).then((file) => {
                    if (file) {
                        resolve(path.join(dir, file));
                    }
                    else if (dir === endDir) {
                        resolve(null);
                    }
                    else {
                        find(path.dirname(dir));
                    }
                });
            })(startDir);
        });
        if (!findedFilepath) {
            return null;
        }
        return pathManager.resolve(null, findedFilepath);
    });
}
exports.findUp = findUp;
function statPath(filepath) {
    return new Promise((resolve, reject) => {
        fs.stat(filepath, (err, stats) => {
            if (err) {
                return reject(err);
            }
            resolve(stats);
        });
    });
}
exports.statPath = statPath;
function existsPath(filepath) {
    return new Promise((resolve) => {
        fs.access(filepath, (err) => resolve(!err));
    });
}
exports.existsPath = existsPath;
function readFile(filepath) {
    return new Promise((resolve, reject) => {
        fs.readFile(filepath, (err, data) => {
            if (err) {
                return reject(err);
            }
            resolve(data.toString());
        });
    });
}
exports.readFile = readFile;
