'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const assert = require("assert");
const service = require("./parser");
const io = require("../utils/io");
const optionsManager = require("../managers/options");
function simpleIniParser(text) {
    const lines = text.trim().split('\n');
    const config = {};
    lines.forEach((line) => {
        const leftRight = line.split('=');
        config[leftRight[0]] = leftRight[1];
    });
    return config;
}
describe('Services â†’ Parser', () => {
    describe('.parse', () => {
        it('Should include config with JSON-syntax', () => tslib_1.__awaiter(this, void 0, void 0, function* () {
            const options = optionsManager.prepare({});
            const filepath = './fixtures/parser/.config-json';
            const expected = {
                type: 0,
                path: filepath,
                config: { ok: true }
            };
            const content = yield io.readFile(filepath);
            const actual = yield service.parse(content, filepath, 0, options);
            assert.ok(typeof actual.ctime === 'number');
            delete actual.ctime;
            assert.deepEqual(actual, expected);
        }));
        it('Should include config with JS-syntax', () => tslib_1.__awaiter(this, void 0, void 0, function* () {
            const options = optionsManager.prepare({});
            const filepath = './fixtures/parser/.config-js';
            const expected = {
                type: 0,
                path: filepath,
                config: { ok: true }
            };
            const content = yield io.readFile(filepath);
            const actual = yield service.parse(content, filepath, 0, options);
            assert.ok(typeof actual.ctime === 'number');
            delete actual.ctime;
            assert.deepEqual(actual, expected);
        }));
        it('Should include config with INI-syntax', () => tslib_1.__awaiter(this, void 0, void 0, function* () {
            const options = optionsManager.prepare({
                parsers: [
                    { pattern: /.*(ini)$/, parser: simpleIniParser }
                ]
            });
            const filepath = './fixtures/parser/.config-ini';
            const expected = {
                type: 0,
                path: filepath,
                config: { ok: 'true' }
            };
            const content = yield io.readFile(filepath);
            const actual = yield service.parse(content, filepath, 0, options);
            assert.ok(typeof actual.ctime === 'number');
            delete actual.ctime;
            assert.deepEqual(actual, expected);
        }));
        it('Should throw error if no one parser could not parser file', () => tslib_1.__awaiter(this, void 0, void 0, function* () {
            const options = optionsManager.prepare({
                useEachParser: true
            });
            const filepath = './fixtures/parser/.config';
            const content = yield io.readFile(filepath);
            try {
                yield service.parse(content, filepath, 0, options);
                throw new Error('Magic? There must be an error.');
            }
            catch (err) {
                assert.ok(err.message.startsWith('No one parser could not parse file. See log for more details:'));
            }
        }));
    });
});
