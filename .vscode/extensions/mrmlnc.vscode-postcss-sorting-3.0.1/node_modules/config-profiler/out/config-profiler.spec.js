'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const assert = require("assert");
const config_profiler_1 = require("./config-profiler");
describe('ConfigProfiler', () => {
    const cwd = process.cwd().replace(/\\/g, '/');
    it('Should return instanse of profiler', () => {
        const profiler = new config_profiler_1.default('./fixtures', {});
        assert.ok(profiler instanceof config_profiler_1.default);
    });
    it('Should set new workspace directory and options', () => tslib_1.__awaiter(this, void 0, void 0, function* () {
        const profiler = new config_profiler_1.default('', { configFiles: ['wow.json'] });
        profiler.setWorkspace('./fixtures/scanner');
        profiler.setOptions({ configFiles: ['config.json'] });
        const expected = {
            from: `${cwd}/fixtures/scanner/nested/config.json`,
            config: { from: 'nested/config.json' }
        };
        const actual = yield profiler.getConfig('./fixtures/scanner/nested/index.txt');
        assert.deepEqual(actual, expected);
    }));
    it('should set new options from getConfig method', () => tslib_1.__awaiter(this, void 0, void 0, function* () {
        const profiler = new config_profiler_1.default('', { configFiles: ['config.json'] });
        const expected = {
            from: 'tests',
            config: { from: 'nested/config.json' }
        };
        const actual = yield profiler.getConfig('./fixtures/scanner/nested/index.txt', {
            transform: (result) => ({
                from: 'tests',
                config: result.config
            })
        });
        assert.deepEqual(actual, expected);
    }));
});
