'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const manager = require("./config");
const types_1 = require("../types");
describe('Managers â†’ Config', () => {
    const options = {
        transform: (value) => value,
        extendBuildedConfig: null
    };
    describe('.prepare', () => {
        it('Should return prepared config', () => {
            const expected = {
                type: types_1.ConfigType.File,
                path: 'path',
                ctime: 0,
                config: { ok: true }
            };
            const actual = manager.prepare(types_1.ConfigType.File, 'path', 0, { ok: true });
            assert.deepEqual(actual, expected);
        });
    });
    describe('.build', () => {
        it('Should return builded config from settings', () => {
            const expected = {
                from: 'settings',
                config: { ok: true }
            };
            const actual = manager.build(types_1.ConfigType.Settings, null, { ok: true }, options);
            assert.deepEqual(actual, expected);
        });
        it('Should return builded config from predefined configs', () => {
            const expected = {
                from: 'predefined',
                config: { ok: true }
            };
            const actual = manager.build(types_1.ConfigType.Predefined, null, { ok: true }, options);
            assert.deepEqual(actual, expected);
        });
        it('Should return builded config from file', () => {
            const expected = {
                from: 'path',
                config: { ok: true }
            };
            const actual = manager.build(types_1.ConfigType.File, 'path', { ok: true }, options);
            assert.deepEqual(actual, expected);
        });
        it('Should merge builded config with provided object', () => {
            const expected = {
                from: 'path',
                config: {
                    ok: true,
                    nested: { ok: true }
                }
            };
            options.extendBuildedConfig = {
                nested: { ok: true }
            };
            const actual = manager.build(types_1.ConfigType.File, 'path', { ok: true }, options);
            assert.deepEqual(actual, expected);
        });
    });
});
