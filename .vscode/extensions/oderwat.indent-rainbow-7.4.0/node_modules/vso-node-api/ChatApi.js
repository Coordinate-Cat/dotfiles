/*
 * ---------------------------------------------------------
 * Copyright(C) Microsoft Corporation. All rights reserved.
 * ---------------------------------------------------------
 *
 * ---------------------------------------------------------
 * Generated file, DO NOT EDIT
 * ---------------------------------------------------------
 */
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const basem = require("./ClientApiBases");
const ChatInterfaces = require("./interfaces/ChatInterfaces");
class ChatApi extends basem.ClientApiBase {
    constructor(baseUrl, handlers) {
        super(baseUrl, handlers, 'node-Chat-api');
    }
    /**
     * Delete a given chat message
     *
     * @param {number} roomId - Id of the room
     * @param {number} messageId - Id of the message to delete
     */
    deleteMessage(roomId, messageId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    roomId: roomId,
                    messageId: messageId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "chat", "7d11c820-4bdc-4bca-8957-9d74e32cdd20", routeValues);
                    let url = verData.requestUrl;
                    let options = this.createRequestOptions('application/json', verData.apiVersion);
                    let res;
                    res = yield this.rest.del(url, options);
                    let ret = this.formatResponse(res.result, null, false);
                    resolve(ret);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
     * Retrieve a listing of all chat messages in a given room
     *
     * @param {number} roomId - Id of the room
     */
    getAllChatRoomMessages(roomId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    roomId: roomId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "chat", "7d11c820-4bdc-4bca-8957-9d74e32cdd20", routeValues);
                    let url = verData.requestUrl;
                    let options = this.createRequestOptions('application/json', verData.apiVersion);
                    let res;
                    res = yield this.rest.get(url, options);
                    let ret = this.formatResponse(res.result, ChatInterfaces.TypeInfo.Message, true);
                    resolve(ret);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
     * Retrieve information on a single chat message
     *
     * @param {number} roomId - Id of the room
     * @param {number} messageId - Id of the message to retrieve
     */
    getChatRoomMessageById(roomId, messageId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    roomId: roomId,
                    messageId: messageId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "chat", "7d11c820-4bdc-4bca-8957-9d74e32cdd20", routeValues);
                    let url = verData.requestUrl;
                    let options = this.createRequestOptions('application/json', verData.apiVersion);
                    let res;
                    res = yield this.rest.get(url, options);
                    let ret = this.formatResponse(res.result, ChatInterfaces.TypeInfo.Message, false);
                    resolve(ret);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
     * Post message to a room
     *
     * @param {ChatInterfaces.MessageData} messageUpdate - Content of the message to post
     * @param {number} roomId - Id of the room
     */
    sendMessageToRoom(messageUpdate, roomId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    roomId: roomId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "chat", "7d11c820-4bdc-4bca-8957-9d74e32cdd20", routeValues);
                    let url = verData.requestUrl;
                    let options = this.createRequestOptions('application/json', verData.apiVersion);
                    let res;
                    res = yield this.rest.create(url, messageUpdate, options);
                    let ret = this.formatResponse(res.result, ChatInterfaces.TypeInfo.Message, false);
                    resolve(ret);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
     * Update a given chat message
     *
     * @param {ChatInterfaces.MessageData} messageUpdate - New message content
     * @param {number} roomId - Id of the room
     * @param {number} messageId - Id of the message
     */
    updateChatMessage(messageUpdate, roomId, messageId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    roomId: roomId,
                    messageId: messageId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "chat", "7d11c820-4bdc-4bca-8957-9d74e32cdd20", routeValues);
                    let url = verData.requestUrl;
                    let options = this.createRequestOptions('application/json', verData.apiVersion);
                    let res;
                    res = yield this.rest.update(url, messageUpdate, options);
                    let ret = this.formatResponse(res.result, ChatInterfaces.TypeInfo.Message, false);
                    resolve(ret);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
     * Create a single chat room
     *
     * @param {ChatInterfaces.RoomData} roomUpdate - Information to create the room
     */
    createChatRoom(roomUpdate) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {};
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "chat", "3d0e7ee0-a6c9-497e-9a2c-23b687e860e2", routeValues);
                    let url = verData.requestUrl;
                    let options = this.createRequestOptions('application/json', verData.apiVersion);
                    let res;
                    res = yield this.rest.create(url, roomUpdate, options);
                    let ret = this.formatResponse(res.result, ChatInterfaces.TypeInfo.Room, false);
                    resolve(ret);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
     * Delete a given chat room
     *
     * @param {number} roomId - Id of the room
     */
    deleteChatRoom(roomId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    roomId: roomId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "chat", "3d0e7ee0-a6c9-497e-9a2c-23b687e860e2", routeValues);
                    let url = verData.requestUrl;
                    let options = this.createRequestOptions('application/json', verData.apiVersion);
                    let res;
                    res = yield this.rest.del(url, options);
                    let ret = this.formatResponse(res.result, null, false);
                    resolve(ret);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
     */
    getAllRooms() {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {};
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "chat", "3d0e7ee0-a6c9-497e-9a2c-23b687e860e2", routeValues);
                    let url = verData.requestUrl;
                    let options = this.createRequestOptions('application/json', verData.apiVersion);
                    let res;
                    res = yield this.rest.get(url, options);
                    let ret = this.formatResponse(res.result, ChatInterfaces.TypeInfo.Room, true);
                    resolve(ret);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
     * Retrieve information on a single chat room
     *
     * @param {number} roomId - Id of the room to retrieve
     */
    getChatRoomById(roomId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    roomId: roomId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "chat", "3d0e7ee0-a6c9-497e-9a2c-23b687e860e2", routeValues);
                    let url = verData.requestUrl;
                    let options = this.createRequestOptions('application/json', verData.apiVersion);
                    let res;
                    res = yield this.rest.get(url, options);
                    let ret = this.formatResponse(res.result, ChatInterfaces.TypeInfo.Room, false);
                    resolve(ret);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
     * Update information on a single chat room
     *
     * @param {ChatInterfaces.RoomData} roomUpdate - Room information
     * @param {number} roomId - Id of the room to update
     */
    updateChatRoom(roomUpdate, roomId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    roomId: roomId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "chat", "3d0e7ee0-a6c9-497e-9a2c-23b687e860e2", routeValues);
                    let url = verData.requestUrl;
                    let options = this.createRequestOptions('application/json', verData.apiVersion);
                    let res;
                    res = yield this.rest.update(url, roomUpdate, options);
                    let ret = this.formatResponse(res.result, ChatInterfaces.TypeInfo.Room, false);
                    resolve(ret);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
     * Retrieve a listing of all chat users
     *
     * @param {number} roomId - Id of the room
     */
    getAllChatRoomUsers(roomId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    roomId: roomId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "chat", "01408881-1a9a-4cc9-981d-9333e354e9d9", routeValues);
                    let url = verData.requestUrl;
                    let options = this.createRequestOptions('application/json', verData.apiVersion);
                    let res;
                    res = yield this.rest.get(url, options);
                    let ret = this.formatResponse(res.result, ChatInterfaces.TypeInfo.User, true);
                    resolve(ret);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
     * Retrieve information on a single chat user
     *
     * @param {number} roomId - Id of the room
     * @param {string} userId - TfId of the user
     */
    getChatRoomUserById(roomId, userId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    roomId: roomId,
                    userId: userId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "chat", "01408881-1a9a-4cc9-981d-9333e354e9d9", routeValues);
                    let url = verData.requestUrl;
                    let options = this.createRequestOptions('application/json', verData.apiVersion);
                    let res;
                    res = yield this.rest.get(url, options);
                    let ret = this.formatResponse(res.result, ChatInterfaces.TypeInfo.User, false);
                    resolve(ret);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
     * Joins a user to a given room
     *
     * @param {ChatInterfaces.UserData} userUpdate - user model information
     * @param {number} roomId - Id of the room
     * @param {string} userId - TfId of the user
     */
    joinRoom(userUpdate, roomId, userId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    roomId: roomId,
                    userId: userId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "chat", "01408881-1a9a-4cc9-981d-9333e354e9d9", routeValues);
                    let url = verData.requestUrl;
                    let options = this.createRequestOptions('application/json', verData.apiVersion);
                    let res;
                    res = yield this.rest.replace(url, userUpdate, options);
                    let ret = this.formatResponse(res.result, null, false);
                    resolve(ret);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
     * Leaves a user from a given room
     *
     * @param {number} roomId - Id of the room
     * @param {string} userId - TfId of the user
     */
    leaveRoom(roomId, userId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    roomId: roomId,
                    userId: userId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "chat", "01408881-1a9a-4cc9-981d-9333e354e9d9", routeValues);
                    let url = verData.requestUrl;
                    let options = this.createRequestOptions('application/json', verData.apiVersion);
                    let res;
                    res = yield this.rest.del(url, options);
                    let ret = this.formatResponse(res.result, null, false);
                    resolve(ret);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
}
exports.ChatApi = ChatApi;
