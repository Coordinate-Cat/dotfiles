/*
 * ---------------------------------------------------------
 * Copyright(C) Microsoft Corporation. All rights reserved.
 * ---------------------------------------------------------
 *
 * ---------------------------------------------------------
 * Generated file, DO NOT EDIT
 * ---------------------------------------------------------
 */
"use strict";
const FormInputInterfaces = require("../interfaces/common/FormInputInterfaces");
var AuthenticationType;
(function (AuthenticationType) {
    /**
     * No authentication is required.
     */
    AuthenticationType[AuthenticationType["None"] = 0] = "None";
    /**
     * OAuth authentication.
     */
    AuthenticationType[AuthenticationType["OAuth"] = 10] = "OAuth";
    /**
     * Externally-configured authentication.
     */
    AuthenticationType[AuthenticationType["External"] = 30] = "External";
})(AuthenticationType = exports.AuthenticationType || (exports.AuthenticationType = {}));
var EventScope;
(function (EventScope) {
    /**
     * No input scope specified.
     */
    EventScope[EventScope["All"] = 0] = "All";
    /**
     * Team Project scope.
     */
    EventScope[EventScope["Project"] = 1] = "Project";
    /**
     * Team scope.
     */
    EventScope[EventScope["Team"] = 2] = "Team";
    /**
     * Collection scope.
     */
    EventScope[EventScope["Collection"] = 3] = "Collection";
    /**
     * Account scope.
     */
    EventScope[EventScope["Account"] = 4] = "Account";
    /**
     * Deployment scope.
     */
    EventScope[EventScope["Deployment"] = 5] = "Deployment";
})(EventScope = exports.EventScope || (exports.EventScope = {}));
var NotificationResult;
(function (NotificationResult) {
    /**
     * The notification has not yet completed
     */
    NotificationResult[NotificationResult["Pending"] = 0] = "Pending";
    /**
     * The notification was sent successfully
     */
    NotificationResult[NotificationResult["Succeeded"] = 10] = "Succeeded";
    /**
     * The notification failed to be sent successfully to the consumer
     */
    NotificationResult[NotificationResult["Failed"] = 20] = "Failed";
})(NotificationResult = exports.NotificationResult || (exports.NotificationResult = {}));
var NotificationStatus;
(function (NotificationStatus) {
    /**
     * The notification has been queued
     */
    NotificationStatus[NotificationStatus["Queued"] = 10] = "Queued";
    /**
     * The notification has been dequeued and has begun processing.
     */
    NotificationStatus[NotificationStatus["Processing"] = 20] = "Processing";
    /**
     * The consumer action has processed the notification. The request is in progress.
     */
    NotificationStatus[NotificationStatus["RequestInProgress"] = 30] = "RequestInProgress";
    /**
     * The request completed
     */
    NotificationStatus[NotificationStatus["Completed"] = 100] = "Completed";
})(NotificationStatus = exports.NotificationStatus || (exports.NotificationStatus = {}));
var SubscriptionInputScope;
(function (SubscriptionInputScope) {
    /**
     * An input defined and consumed by a Publisher or Publisher Event Type
     */
    SubscriptionInputScope[SubscriptionInputScope["Publisher"] = 10] = "Publisher";
    /**
     * An input defined and consumed by a Consumer or Consumer Action
     */
    SubscriptionInputScope[SubscriptionInputScope["Consumer"] = 20] = "Consumer";
})(SubscriptionInputScope = exports.SubscriptionInputScope || (exports.SubscriptionInputScope = {}));
var SubscriptionStatus;
(function (SubscriptionStatus) {
    /**
     * The subscription is enabled.
     */
    SubscriptionStatus[SubscriptionStatus["Enabled"] = 0] = "Enabled";
    /**
     * The subscription is temporarily on probation by the system.
     */
    SubscriptionStatus[SubscriptionStatus["OnProbation"] = 10] = "OnProbation";
    /**
     * The subscription is disabled by a user.
     */
    SubscriptionStatus[SubscriptionStatus["DisabledByUser"] = 20] = "DisabledByUser";
    /**
     * The subscription is disabled by the system.
     */
    SubscriptionStatus[SubscriptionStatus["DisabledBySystem"] = 30] = "DisabledBySystem";
})(SubscriptionStatus = exports.SubscriptionStatus || (exports.SubscriptionStatus = {}));
exports.TypeInfo = {
    AuthenticationType: {
        enumValues: {
            "none": 0,
            "oAuth": 10,
            "external": 30
        }
    },
    Consumer: {},
    ConsumerAction: {},
    Event: {},
    EventScope: {
        enumValues: {
            "all": 0,
            "project": 1,
            "team": 2,
            "collection": 3,
            "account": 4,
            "deployment": 5
        }
    },
    Notification: {},
    NotificationDetails: {},
    NotificationResult: {
        enumValues: {
            "pending": 0,
            "succeeded": 10,
            "failed": 20
        }
    },
    NotificationResultsSummaryDetail: {},
    NotificationsQuery: {},
    NotificationStatus: {
        enumValues: {
            "queued": 10,
            "processing": 20,
            "requestInProgress": 30,
            "completed": 100
        }
    },
    NotificationSummary: {},
    PublisherEvent: {},
    PublishEventsRequestData: {},
    SessionToken: {},
    Subscription: {},
    SubscriptionInputScope: {
        enumValues: {
            "publisher": 10,
            "consumer": 20
        }
    },
    SubscriptionInputValuesQuery: {},
    SubscriptionsQuery: {},
    SubscriptionStatus: {
        enumValues: {
            "enabled": 0,
            "onProbation": 10,
            "disabledByUser": 20,
            "disabledBySystem": 30
        }
    },
};
exports.TypeInfo.Consumer.fields = {
    actions: {
        isArray: true,
        typeInfo: exports.TypeInfo.ConsumerAction
    },
    authenticationType: {
        enumType: exports.TypeInfo.AuthenticationType
    },
    inputDescriptors: {
        isArray: true,
        typeInfo: FormInputInterfaces.TypeInfo.InputDescriptor
    },
};
exports.TypeInfo.ConsumerAction.fields = {
    inputDescriptors: {
        isArray: true,
        typeInfo: FormInputInterfaces.TypeInfo.InputDescriptor
    },
};
exports.TypeInfo.Event.fields = {
    createdDate: {
        isDate: true,
    },
    scope: {
        enumType: exports.TypeInfo.EventScope
    },
    sessionToken: {
        typeInfo: exports.TypeInfo.SessionToken
    },
};
exports.TypeInfo.Notification.fields = {
    createdDate: {
        isDate: true,
    },
    details: {
        typeInfo: exports.TypeInfo.NotificationDetails
    },
    modifiedDate: {
        isDate: true,
    },
    result: {
        enumType: exports.TypeInfo.NotificationResult
    },
    status: {
        enumType: exports.TypeInfo.NotificationStatus
    },
};
exports.TypeInfo.NotificationDetails.fields = {
    completedDate: {
        isDate: true,
    },
    dequeuedDate: {
        isDate: true,
    },
    event: {
        typeInfo: exports.TypeInfo.Event
    },
    processedDate: {
        isDate: true,
    },
    queuedDate: {
        isDate: true,
    },
};
exports.TypeInfo.NotificationResultsSummaryDetail.fields = {
    result: {
        enumType: exports.TypeInfo.NotificationResult
    },
};
exports.TypeInfo.NotificationsQuery.fields = {
    associatedSubscriptions: {
        isArray: true,
        typeInfo: exports.TypeInfo.Subscription
    },
    maxCreatedDate: {
        isDate: true,
    },
    minCreatedDate: {
        isDate: true,
    },
    results: {
        isArray: true,
        typeInfo: exports.TypeInfo.Notification
    },
    resultType: {
        enumType: exports.TypeInfo.NotificationResult
    },
    status: {
        enumType: exports.TypeInfo.NotificationStatus
    },
    summary: {
        isArray: true,
        typeInfo: exports.TypeInfo.NotificationSummary
    },
};
exports.TypeInfo.NotificationSummary.fields = {
    results: {
        isArray: true,
        typeInfo: exports.TypeInfo.NotificationResultsSummaryDetail
    },
};
exports.TypeInfo.PublisherEvent.fields = {
    event: {
        typeInfo: exports.TypeInfo.Event
    },
    publisherInputFilters: {
        isArray: true,
        typeInfo: FormInputInterfaces.TypeInfo.InputFilter
    },
};
exports.TypeInfo.PublishEventsRequestData.fields = {
    events: {
        isArray: true,
        typeInfo: exports.TypeInfo.PublisherEvent
    },
};
exports.TypeInfo.SessionToken.fields = {
    validTo: {
        isDate: true,
    },
};
exports.TypeInfo.Subscription.fields = {
    createdDate: {
        isDate: true,
    },
    modifiedDate: {
        isDate: true,
    },
    scope: {
        enumType: exports.TypeInfo.EventScope
    },
    status: {
        enumType: exports.TypeInfo.SubscriptionStatus
    },
};
exports.TypeInfo.SubscriptionInputValuesQuery.fields = {
    scope: {
        enumType: exports.TypeInfo.SubscriptionInputScope
    },
    subscription: {
        typeInfo: exports.TypeInfo.Subscription
    },
};
exports.TypeInfo.SubscriptionsQuery.fields = {
    consumerInputFilters: {
        isArray: true,
        typeInfo: FormInputInterfaces.TypeInfo.InputFilter
    },
    publisherInputFilters: {
        isArray: true,
        typeInfo: FormInputInterfaces.TypeInfo.InputFilter
    },
    results: {
        isArray: true,
        typeInfo: exports.TypeInfo.Subscription
    },
    scope: {
        enumType: exports.TypeInfo.EventScope
    },
};
