/*
 * ---------------------------------------------------------
 * Copyright(C) Microsoft Corporation. All rights reserved.
 * ---------------------------------------------------------
 *
 * ---------------------------------------------------------
 * Generated file, DO NOT EDIT
 * ---------------------------------------------------------
 */
"use strict";
var AuthorizationError;
(function (AuthorizationError) {
    AuthorizationError[AuthorizationError["None"] = 0] = "None";
    AuthorizationError[AuthorizationError["ClientIdRequired"] = 1] = "ClientIdRequired";
    AuthorizationError[AuthorizationError["InvalidClientId"] = 2] = "InvalidClientId";
    AuthorizationError[AuthorizationError["ResponseTypeRequired"] = 3] = "ResponseTypeRequired";
    AuthorizationError[AuthorizationError["ResponseTypeNotSupported"] = 4] = "ResponseTypeNotSupported";
    AuthorizationError[AuthorizationError["ScopeRequired"] = 5] = "ScopeRequired";
    AuthorizationError[AuthorizationError["InvalidScope"] = 6] = "InvalidScope";
    AuthorizationError[AuthorizationError["RedirectUriRequired"] = 7] = "RedirectUriRequired";
    AuthorizationError[AuthorizationError["InsecureRedirectUri"] = 8] = "InsecureRedirectUri";
    AuthorizationError[AuthorizationError["InvalidRedirectUri"] = 9] = "InvalidRedirectUri";
    AuthorizationError[AuthorizationError["InvalidUserId"] = 10] = "InvalidUserId";
    AuthorizationError[AuthorizationError["InvalidUserType"] = 11] = "InvalidUserType";
    AuthorizationError[AuthorizationError["AccessDenied"] = 12] = "AccessDenied";
})(AuthorizationError = exports.AuthorizationError || (exports.AuthorizationError = {}));
var ClientType;
(function (ClientType) {
    ClientType[ClientType["Confidential"] = 0] = "Confidential";
    ClientType[ClientType["Public"] = 1] = "Public";
    ClientType[ClientType["MediumTrust"] = 2] = "MediumTrust";
    ClientType[ClientType["HighTrust"] = 3] = "HighTrust";
    ClientType[ClientType["FullTrust"] = 4] = "FullTrust";
})(ClientType = exports.ClientType || (exports.ClientType = {}));
var GrantType;
(function (GrantType) {
    GrantType[GrantType["None"] = 0] = "None";
    GrantType[GrantType["JwtBearer"] = 1] = "JwtBearer";
    GrantType[GrantType["RefreshToken"] = 2] = "RefreshToken";
    GrantType[GrantType["Implicit"] = 3] = "Implicit";
    GrantType[GrantType["ClientCredentials"] = 4] = "ClientCredentials";
})(GrantType = exports.GrantType || (exports.GrantType = {}));
var InitiationError;
(function (InitiationError) {
    InitiationError[InitiationError["None"] = 0] = "None";
    InitiationError[InitiationError["ClientIdRequired"] = 1] = "ClientIdRequired";
    InitiationError[InitiationError["InvalidClientId"] = 2] = "InvalidClientId";
    InitiationError[InitiationError["ResponseTypeRequired"] = 3] = "ResponseTypeRequired";
    InitiationError[InitiationError["ResponseTypeNotSupported"] = 4] = "ResponseTypeNotSupported";
    InitiationError[InitiationError["ScopeRequired"] = 5] = "ScopeRequired";
    InitiationError[InitiationError["InvalidScope"] = 6] = "InvalidScope";
    InitiationError[InitiationError["RedirectUriRequired"] = 7] = "RedirectUriRequired";
    InitiationError[InitiationError["InsecureRedirectUri"] = 8] = "InsecureRedirectUri";
    InitiationError[InitiationError["InvalidRedirectUri"] = 9] = "InvalidRedirectUri";
})(InitiationError = exports.InitiationError || (exports.InitiationError = {}));
var ResponseType;
(function (ResponseType) {
    ResponseType[ResponseType["None"] = 0] = "None";
    ResponseType[ResponseType["Assertion"] = 1] = "Assertion";
    ResponseType[ResponseType["IdToken"] = 2] = "IdToken";
    ResponseType[ResponseType["TenantPicker"] = 3] = "TenantPicker";
    ResponseType[ResponseType["SignoutToken"] = 4] = "SignoutToken";
    ResponseType[ResponseType["AppToken"] = 5] = "AppToken";
    ResponseType[ResponseType["Code"] = 6] = "Code";
})(ResponseType = exports.ResponseType || (exports.ResponseType = {}));
var TokenError;
(function (TokenError) {
    TokenError[TokenError["None"] = 0] = "None";
    TokenError[TokenError["GrantTypeRequired"] = 1] = "GrantTypeRequired";
    TokenError[TokenError["AuthorizationGrantRequired"] = 2] = "AuthorizationGrantRequired";
    TokenError[TokenError["ClientSecretRequired"] = 3] = "ClientSecretRequired";
    TokenError[TokenError["RedirectUriRequired"] = 4] = "RedirectUriRequired";
    TokenError[TokenError["InvalidAuthorizationGrant"] = 5] = "InvalidAuthorizationGrant";
    TokenError[TokenError["InvalidAuthorizationScopes"] = 6] = "InvalidAuthorizationScopes";
    TokenError[TokenError["InvalidRefreshToken"] = 7] = "InvalidRefreshToken";
    TokenError[TokenError["AuthorizationNotFound"] = 8] = "AuthorizationNotFound";
    TokenError[TokenError["AuthorizationGrantExpired"] = 9] = "AuthorizationGrantExpired";
    TokenError[TokenError["AccessAlreadyIssued"] = 10] = "AccessAlreadyIssued";
    TokenError[TokenError["InvalidRedirectUri"] = 11] = "InvalidRedirectUri";
    TokenError[TokenError["AccessTokenNotFound"] = 12] = "AccessTokenNotFound";
    TokenError[TokenError["InvalidAccessToken"] = 13] = "InvalidAccessToken";
    TokenError[TokenError["AccessTokenAlreadyRefreshed"] = 14] = "AccessTokenAlreadyRefreshed";
    TokenError[TokenError["InvalidClientSecret"] = 15] = "InvalidClientSecret";
    TokenError[TokenError["ClientSecretExpired"] = 16] = "ClientSecretExpired";
    TokenError[TokenError["ServerError"] = 17] = "ServerError";
    TokenError[TokenError["AccessDenied"] = 18] = "AccessDenied";
    TokenError[TokenError["AccessTokenKeyRequired"] = 19] = "AccessTokenKeyRequired";
    TokenError[TokenError["InvalidAccessTokenKey"] = 20] = "InvalidAccessTokenKey";
    TokenError[TokenError["FailedToGetAccessToken"] = 21] = "FailedToGetAccessToken";
    TokenError[TokenError["InvalidClientId"] = 22] = "InvalidClientId";
    TokenError[TokenError["InvalidClient"] = 23] = "InvalidClient";
    TokenError[TokenError["InvalidValidTo"] = 24] = "InvalidValidTo";
    TokenError[TokenError["InvalidUserId"] = 25] = "InvalidUserId";
    TokenError[TokenError["FailedToIssueAccessToken"] = 26] = "FailedToIssueAccessToken";
    TokenError[TokenError["AuthorizationGrantScopeMissing"] = 27] = "AuthorizationGrantScopeMissing";
    TokenError[TokenError["InvalidPublicAccessTokenKey"] = 28] = "InvalidPublicAccessTokenKey";
    TokenError[TokenError["InvalidPublicAccessToken"] = 29] = "InvalidPublicAccessToken";
})(TokenError = exports.TokenError || (exports.TokenError = {}));
exports.TypeInfo = {
    AccessTokenResult: {},
    Authorization: {},
    AuthorizationDecision: {},
    AuthorizationDescription: {},
    AuthorizationDetails: {},
    AuthorizationError: {
        enumValues: {
            "none": 0,
            "clientIdRequired": 1,
            "invalidClientId": 2,
            "responseTypeRequired": 3,
            "responseTypeNotSupported": 4,
            "scopeRequired": 5,
            "invalidScope": 6,
            "redirectUriRequired": 7,
            "insecureRedirectUri": 8,
            "invalidRedirectUri": 9,
            "invalidUserId": 10,
            "invalidUserType": 11,
            "accessDenied": 12
        }
    },
    AuthorizationGrant: {},
    ClientType: {
        enumValues: {
            "confidential": 0,
            "public": 1,
            "mediumTrust": 2,
            "highTrust": 3,
            "fullTrust": 4
        }
    },
    GrantType: {
        enumValues: {
            "none": 0,
            "jwtBearer": 1,
            "refreshToken": 2,
            "implicit": 3,
            "clientCredentials": 4
        }
    },
    InitiationError: {
        enumValues: {
            "none": 0,
            "clientIdRequired": 1,
            "invalidClientId": 2,
            "responseTypeRequired": 3,
            "responseTypeNotSupported": 4,
            "scopeRequired": 5,
            "invalidScope": 6,
            "redirectUriRequired": 7,
            "insecureRedirectUri": 8,
            "invalidRedirectUri": 9
        }
    },
    RefreshTokenGrant: {},
    Registration: {},
    ResponseType: {
        enumValues: {
            "none": 0,
            "assertion": 1,
            "idToken": 2,
            "tenantPicker": 3,
            "signoutToken": 4,
            "appToken": 5,
            "code": 6
        }
    },
    TokenError: {
        enumValues: {
            "none": 0,
            "grantTypeRequired": 1,
            "authorizationGrantRequired": 2,
            "clientSecretRequired": 3,
            "redirectUriRequired": 4,
            "invalidAuthorizationGrant": 5,
            "invalidAuthorizationScopes": 6,
            "invalidRefreshToken": 7,
            "authorizationNotFound": 8,
            "authorizationGrantExpired": 9,
            "accessAlreadyIssued": 10,
            "invalidRedirectUri": 11,
            "accessTokenNotFound": 12,
            "invalidAccessToken": 13,
            "accessTokenAlreadyRefreshed": 14,
            "invalidClientSecret": 15,
            "clientSecretExpired": 16,
            "serverError": 17,
            "accessDenied": 18,
            "accessTokenKeyRequired": 19,
            "invalidAccessTokenKey": 20,
            "failedToGetAccessToken": 21,
            "invalidClientId": 22,
            "invalidClient": 23,
            "invalidValidTo": 24,
            "invalidUserId": 25,
            "failedToIssueAccessToken": 26,
            "authorizationGrantScopeMissing": 27,
            "invalidPublicAccessTokenKey": 28,
            "invalidPublicAccessToken": 29
        }
    },
};
exports.TypeInfo.AccessTokenResult.fields = {
    accessTokenError: {
        enumType: exports.TypeInfo.TokenError
    },
    refreshToken: {
        typeInfo: exports.TypeInfo.RefreshTokenGrant
    },
    validTo: {
        isDate: true,
    },
};
exports.TypeInfo.Authorization.fields = {
    accessIssued: {
        isDate: true,
    },
    validFrom: {
        isDate: true,
    },
    validTo: {
        isDate: true,
    },
};
exports.TypeInfo.AuthorizationDecision.fields = {
    authorization: {
        typeInfo: exports.TypeInfo.Authorization
    },
    authorizationError: {
        enumType: exports.TypeInfo.AuthorizationError
    },
    authorizationGrant: {
        typeInfo: exports.TypeInfo.AuthorizationGrant
    },
};
exports.TypeInfo.AuthorizationDescription.fields = {
    clientRegistration: {
        typeInfo: exports.TypeInfo.Registration
    },
    initiationError: {
        enumType: exports.TypeInfo.InitiationError
    },
};
exports.TypeInfo.AuthorizationDetails.fields = {
    authorization: {
        typeInfo: exports.TypeInfo.Authorization
    },
    clientRegistration: {
        typeInfo: exports.TypeInfo.Registration
    },
};
exports.TypeInfo.AuthorizationGrant.fields = {
    grantType: {
        enumType: exports.TypeInfo.GrantType
    },
};
exports.TypeInfo.RefreshTokenGrant.fields = {
    grantType: {
        enumType: exports.TypeInfo.GrantType
    },
};
exports.TypeInfo.Registration.fields = {
    clientType: {
        enumType: exports.TypeInfo.ClientType
    },
};
