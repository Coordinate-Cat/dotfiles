// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.
"use strict";
const buildm = require("./BuildApi");
const chatm = require("./ChatApi");
const contributionsm = require("./ContributionsApi");
const corem = require("./CoreApi");
const dashboardm = require("./DashboardApi");
const delegatedauthorizationm = require("./DelegatedAuthorizationApi");
const extmgmtm = require("./ExtensionManagementApi");
const featuremgmtm = require("./FeatureManagementApi");
const filecontainerm = require("./FileContainerApi");
const gallerym = require("./GalleryApi");
const gitm = require("./GitApi");
const identitiesm = require("./IdentitiesApi");
const locationsm = require("./LocationsApi");
const notificationm = require("./NotificationApi");
const organizationm = require("./OrganizationApi");
const policym = require("./PolicyApi");
const profilem = require("./ProfileApi");
const releasem = require("./ReleaseApi");
const securityrolesm = require("./SecurityRolesApi");
const servicehooksm = require("./ServiceHooksApi");
const taskagentm = require("./TaskAgentApi");
const taskm = require("./TaskApi");
const testm = require("./TestApi");
const tfvcm = require("./TfvcApi");
const workm = require("./WorkApi");
const workitemtrackingm = require("./WorkItemTrackingApi");
const basicm = require("./handlers/basiccreds");
const bearm = require("./handlers/bearertoken");
const ntlmm = require("./handlers/ntlm");
const patm = require("./handlers/personalaccesstoken");
/**
 * Methods to return handler objects (see handlers folder)
 */
function getBasicHandler(username, password) {
    return new basicm.BasicCredentialHandler(username, password);
}
exports.getBasicHandler = getBasicHandler;
function getNtlmHandler(username, password, workstation, domain) {
    return new ntlmm.NtlmCredentialHandler(username, password, workstation, domain);
}
exports.getNtlmHandler = getNtlmHandler;
function getBearerHandler(token) {
    return new bearm.BearerCredentialHandler(token);
}
exports.getBearerHandler = getBearerHandler;
function getPersonalAccessTokenHandler(token) {
    return new patm.PersonalAccessTokenCredentialHandler(token);
}
exports.getPersonalAccessTokenHandler = getPersonalAccessTokenHandler;
// ---------------------------------------------------------------------------
// Factory to return client apis
// When new APIs are added, two methods must be added here to instantiate the
// API and its corresponding Q Promise-wrapped API
//----------------------------------------------------------------------------
class WebApi {
    /*
     * Factory to return client apis and handlers
     * @param defaultUrl default server url to use when creating new apis from factory methods
     * @param authHandler default authentication credentials to use when creating new apis from factory methods
     */
    constructor(defaultUrl, authHandler) {
        this.serverUrl = defaultUrl;
        this.authHandler = authHandler;
    }
    /**
     *  Convenience factory to create with a bearer token.
     * @param defaultServerUrl default server url to use when creating new apis from factory methods
     * @param defaultAuthHandler default authentication credentials to use when creating new apis from factory methods
     */
    static createWithBearerToken(defaultUrl, token) {
        let bearerHandler = getBearerHandler(token);
        return new this(defaultUrl, bearerHandler);
    }
    /**
     * Each factory method can take a serverUrl and a list of handlers
     * if these aren't provided, the default url and auth handler given to the constructor for this class will be used
     */
    getBuildApi(serverUrl, handlers) {
        serverUrl = serverUrl || this.serverUrl;
        handlers = handlers || [this.authHandler];
        return new buildm.BuildApi(serverUrl, handlers);
    }
    /**
     * Each API has a method here to create the client.
     */
    getChatApi(serverUrl, handlers) {
        serverUrl = serverUrl || this.serverUrl;
        handlers = handlers || [this.authHandler];
        return new chatm.ChatApi(serverUrl, handlers);
    }
    getCoreApi(serverUrl, handlers) {
        serverUrl = serverUrl || this.serverUrl;
        handlers = handlers || [this.authHandler];
        return new corem.CoreApi(serverUrl, handlers);
    }
    getContributionsApi(serverUrl, handlers) {
        serverUrl = serverUrl || this.serverUrl;
        handlers = handlers || [this.authHandler];
        return new contributionsm.ContributionsApi(serverUrl, handlers);
    }
    getDashboardApi(serverUrl, handlers) {
        serverUrl = serverUrl || this.serverUrl;
        handlers = handlers || [this.authHandler];
        return new dashboardm.DashboardApi(serverUrl, handlers);
    }
    getDelegatedAuthorizationApi(serverUrl, handlers) {
        serverUrl = serverUrl || this.serverUrl;
        handlers = handlers || [this.authHandler];
        return new delegatedauthorizationm.DelegatedAuthorizationApi(serverUrl, handlers);
    }
    getExtensionManagementApi(serverUrl, handlers) {
        serverUrl = serverUrl || this.serverUrl;
        handlers = handlers || [this.authHandler];
        return new extmgmtm.ExtensionManagementApi(serverUrl, handlers);
    }
    getFeatureManagementApi(serverUrl, handlers) {
        serverUrl = serverUrl || this.serverUrl;
        handlers = handlers || [this.authHandler];
        return new featuremgmtm.FeatureManagementApi(serverUrl, handlers);
    }
    getFileContainerApi(serverUrl, handlers) {
        serverUrl = serverUrl || this.serverUrl;
        handlers = handlers || [this.authHandler];
        return new filecontainerm.FileContainerApi(serverUrl, handlers);
    }
    getGalleryApi(serverUrl, handlers) {
        serverUrl = serverUrl || this.serverUrl;
        handlers = handlers || [this.authHandler];
        return new gallerym.GalleryApi(serverUrl, handlers);
    }
    getGitApi(serverUrl, handlers) {
        serverUrl = serverUrl || this.serverUrl;
        handlers = handlers || [this.authHandler];
        return new gitm.GitApi(serverUrl, handlers);
    }
    getIdentitiesApi(serverUrl, handlers) {
        serverUrl = serverUrl || this.serverUrl;
        handlers = handlers || [this.authHandler];
        return new identitiesm.IdentitiesApi(serverUrl, handlers);
    }
    getLocationsApi(serverUrl, handlers) {
        serverUrl = serverUrl || this.serverUrl;
        handlers = handlers || [this.authHandler];
        return new locationsm.LocationsApi(serverUrl, handlers);
    }
    getNotificationApi(serverUrl, handlers) {
        serverUrl = serverUrl || this.serverUrl;
        handlers = handlers || [this.authHandler];
        return new notificationm.NotificationApi(serverUrl, handlers);
    }
    getOrganizationApi(serverUrl, handlers) {
        serverUrl = serverUrl || this.serverUrl;
        handlers = handlers || [this.authHandler];
        return new organizationm.OrganizationApi(serverUrl, handlers);
    }
    getPolicyApi(serverUrl, handlers) {
        serverUrl = serverUrl || this.serverUrl;
        handlers = handlers || [this.authHandler];
        return new policym.PolicyApi(serverUrl, handlers);
    }
    getProfileApi(serverUrl, handlers) {
        serverUrl = serverUrl || this.serverUrl;
        handlers = handlers || [this.authHandler];
        return new profilem.ProfileApi(serverUrl, handlers);
    }
    getSecurityRolesApi(serverUrl, handlers) {
        serverUrl = serverUrl || this.serverUrl;
        handlers = handlers || [this.authHandler];
        return new securityrolesm.SecurityRolesApi(serverUrl, handlers);
    }
    getServiceHooksApi(serverUrl, handlers) {
        serverUrl = serverUrl || this.serverUrl;
        handlers = handlers || [this.authHandler];
        return new servicehooksm.ServiceHooksApi(serverUrl, handlers);
    }
    getReleaseApi(serverUrl, handlers) {
        serverUrl = serverUrl || this.serverUrl;
        handlers = handlers || [this.authHandler];
        return new releasem.ReleaseApi(serverUrl, handlers);
    }
    getTaskApi(serverUrl, handlers) {
        serverUrl = serverUrl || this.serverUrl;
        handlers = handlers || [this.authHandler];
        return new taskm.TaskApi(serverUrl, handlers);
    }
    getTaskAgentApi(serverUrl, handlers) {
        serverUrl = serverUrl || this.serverUrl;
        handlers = handlers || [this.authHandler];
        return new taskagentm.TaskAgentApi(serverUrl, handlers);
    }
    getTestApi(serverUrl, handlers) {
        serverUrl = serverUrl || this.serverUrl;
        handlers = handlers || [this.authHandler];
        return new testm.TestApi(serverUrl, handlers);
    }
    getTfvcApi(serverUrl, handlers) {
        serverUrl = serverUrl || this.serverUrl;
        handlers = handlers || [this.authHandler];
        return new tfvcm.TfvcApi(serverUrl, handlers);
    }
    getWorkApi(serverUrl, handlers) {
        serverUrl = serverUrl || this.serverUrl;
        handlers = handlers || [this.authHandler];
        return new workm.WorkApi(serverUrl, handlers);
    }
    getWorkItemTrackingApi(serverUrl, handlers) {
        serverUrl = serverUrl || this.serverUrl;
        handlers = handlers || [this.authHandler];
        return new workitemtrackingm.WorkItemTrackingApi(serverUrl, handlers);
    }
}
exports.WebApi = WebApi;
