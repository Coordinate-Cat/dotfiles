/*
* ---------------------------------------------------------
* Copyright(C) Microsoft Corporation. All rights reserved.
* ---------------------------------------------------------
*
* ---------------------------------------------------------
* Generated file, DO NOT EDIT
* ---------------------------------------------------------
*/
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const basem = require("./ClientApiBases");
const TokenInterfaces = require("./interfaces/TokenInterfaces");
class TokenApi extends basem.ClientApiBase {
    constructor(baseUrl, handlers) {
        super(baseUrl, handlers, 'node-Token-api');
    }
    /**
    * @param {string} redirectUri
    * @param {TokenInterfaces.ResponseType} responseType
    * @param {string} clientId
    * @param {string} scopes
    * @param {string} userId
    */
    authorize(redirectUri, responseType, clientId, scopes, userId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    userId: userId
                };
                let queryValues = {
                    responseType: responseType,
                    clientId: clientId,
                    scopes: scopes,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "DelegatedAuth", "efbf6e0c-1150-43fd-b869-7e2b04fc0d09", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let options = this.createRequestOptions('application/json', verData.apiVersion);
                    let res;
                    res = yield this.rest.create(url, redirectUri, options);
                    let ret = this.formatResponse(res.result, TokenInterfaces.TypeInfo.AuthorizationDecision, false);
                    resolve(ret);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} userId
    */
    getAuthorizations(userId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    userId: userId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "DelegatedAuth", "efbf6e0c-1150-43fd-b869-7e2b04fc0d09", routeValues);
                    let url = verData.requestUrl;
                    let options = this.createRequestOptions('application/json', verData.apiVersion);
                    let res;
                    res = yield this.rest.get(url, options);
                    let ret = this.formatResponse(res.result, TokenInterfaces.TypeInfo.AuthorizationDetails, true);
                    resolve(ret);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} redirectUri
    * @param {TokenInterfaces.ResponseType} responseType
    * @param {string} clientId
    * @param {string} scopes
    * @param {string} userId
    */
    initiateAuthorization(redirectUri, responseType, clientId, scopes, userId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    userId: userId
                };
                let queryValues = {
                    responseType: responseType,
                    clientId: clientId,
                    scopes: scopes,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "DelegatedAuth", "efbf6e0c-1150-43fd-b869-7e2b04fc0d09", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let options = this.createRequestOptions('application/json', verData.apiVersion);
                    let res;
                    res = yield this.rest.get(url, options);
                    let ret = this.formatResponse(res.result, TokenInterfaces.TypeInfo.AuthorizationDescription, false);
                    resolve(ret);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} authorizationId
    * @param {string} userId
    */
    revokeAuthorization(authorizationId, userId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    userId: userId
                };
                let queryValues = {
                    authorizationId: authorizationId,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "DelegatedAuth", "efbf6e0c-1150-43fd-b869-7e2b04fc0d09", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let options = this.createRequestOptions('application/json', verData.apiVersion);
                    let res;
                    res = yield this.rest.create(url, options);
                    let ret = this.formatResponse(res.result, null, false);
                    resolve(ret);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} clientId
    */
    host(clientId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {};
                let queryValues = {
                    clientId: clientId,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "DelegatedAuth", "7372fdd9-238c-467c-b0f2-995f4bfe0d94", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let options = this.createRequestOptions('application/json', verData.apiVersion);
                    let res;
                    res = yield this.rest.create(url, options);
                    let ret = this.formatResponse(res.result, null, false);
                    resolve(ret);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} clientId
    * @param {string} hostId
    */
    revoke(clientId, hostId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {};
                let queryValues = {
                    clientId: clientId,
                    hostId: hostId,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "DelegatedAuth", "7372fdd9-238c-467c-b0f2-995f4bfe0d94", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let options = this.createRequestOptions('application/json', verData.apiVersion);
                    let res;
                    res = yield this.rest.del(url, options);
                    let ret = this.formatResponse(res.result, null, false);
                    resolve(ret);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {TokenInterfaces.Registration} registration
    * @param {boolean} includeSecret
    */
    create(registration, includeSecret) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {};
                let queryValues = {
                    includeSecret: includeSecret,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.2-preview.2", "DelegatedAuth", "909cd090-3005-480d-a1b4-220b76cb0afe", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let options = this.createRequestOptions('application/json', verData.apiVersion);
                    let res;
                    res = yield this.rest.replace(url, registration, options);
                    let ret = this.formatResponse(res.result, TokenInterfaces.TypeInfo.Registration, false);
                    resolve(ret);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} registrationId
    */
    delete(registrationId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    registrationId: registrationId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.2-preview.2", "DelegatedAuth", "909cd090-3005-480d-a1b4-220b76cb0afe", routeValues);
                    let url = verData.requestUrl;
                    let options = this.createRequestOptions('application/json', verData.apiVersion);
                    let res;
                    res = yield this.rest.del(url, options);
                    let ret = this.formatResponse(res.result, null, false);
                    resolve(ret);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} registrationId
    * @param {boolean} includeSecret
    */
    get(registrationId, includeSecret) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    registrationId: registrationId
                };
                let queryValues = {
                    includeSecret: includeSecret,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.2-preview.2", "DelegatedAuth", "909cd090-3005-480d-a1b4-220b76cb0afe", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let options = this.createRequestOptions('application/json', verData.apiVersion);
                    let res;
                    res = yield this.rest.get(url, options);
                    let ret = this.formatResponse(res.result, TokenInterfaces.TypeInfo.Registration, false);
                    resolve(ret);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    */
    list() {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {};
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.2-preview.2", "DelegatedAuth", "909cd090-3005-480d-a1b4-220b76cb0afe", routeValues);
                    let url = verData.requestUrl;
                    let options = this.createRequestOptions('application/json', verData.apiVersion);
                    let res;
                    res = yield this.rest.get(url, options);
                    let ret = this.formatResponse(res.result, TokenInterfaces.TypeInfo.Registration, true);
                    resolve(ret);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {TokenInterfaces.Registration} registration
    * @param {boolean} includeSecret
    */
    update(registration, includeSecret) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {};
                let queryValues = {
                    includeSecret: includeSecret,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.2-preview.2", "DelegatedAuth", "909cd090-3005-480d-a1b4-220b76cb0afe", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let options = this.createRequestOptions('application/json', verData.apiVersion);
                    let res;
                    res = yield this.rest.create(url, registration, options);
                    let ret = this.formatResponse(res.result, TokenInterfaces.TypeInfo.Registration, false);
                    resolve(ret);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} registrationId
    */
    getSecret(registrationId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    registrationId: registrationId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "DelegatedAuth", "f37e5023-dfbe-490e-9e40-7b7fb6b67887", routeValues);
                    let url = verData.requestUrl;
                    let options = this.createRequestOptions('application/json', verData.apiVersion);
                    let res;
                    res = yield this.rest.get(url, options);
                    let ret = this.formatResponse(res.result, null, false);
                    resolve(ret);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
}
exports.TokenApi = TokenApi;
