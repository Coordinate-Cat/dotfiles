/*
* ---------------------------------------------------------
* Copyright(C) Microsoft Corporation. All rights reserved.
* ---------------------------------------------------------
*
* ---------------------------------------------------------
* Generated file, DO NOT EDIT
* ---------------------------------------------------------
*/
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const basem = require("./ClientApiBases");
const DelegatedAuthorizationInterfaces = require("./interfaces/DelegatedAuthorizationInterfaces");
const IdentitiesInterfaces = require("./interfaces/IdentitiesInterfaces");
class IdentitiesApi extends basem.ClientApiBase {
    constructor(baseUrl, handlers) {
        super(baseUrl, handlers, 'node-Identities-api');
    }
    /**
    * @param {IdentitiesInterfaces.Identity} sourceIdentity
    */
    createOrBindWithClaims(sourceIdentity) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {};
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "IMS", "90ddfe71-171c-446c-bf3b-b597cd562afd", routeValues);
                    let url = verData.requestUrl;
                    let options = this.createRequestOptions('application/json', verData.apiVersion);
                    let res;
                    res = yield this.rest.replace(url, sourceIdentity, options);
                    let ret = this.formatResponse(res.result, null, false);
                    resolve(ret);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {any} container
    */
    createGroups(container) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {};
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "IMS", "5966283b-4196-4d57-9211-1b68f41ec1c2", routeValues);
                    let url = verData.requestUrl;
                    let options = this.createRequestOptions('application/json', verData.apiVersion);
                    let res;
                    res = yield this.rest.create(url, container, options);
                    let ret = this.formatResponse(res.result, null, true);
                    resolve(ret);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} groupId
    */
    deleteGroup(groupId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    groupId: groupId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "IMS", "5966283b-4196-4d57-9211-1b68f41ec1c2", routeValues);
                    let url = verData.requestUrl;
                    let options = this.createRequestOptions('application/json', verData.apiVersion);
                    let res;
                    res = yield this.rest.del(url, options);
                    let ret = this.formatResponse(res.result, null, false);
                    resolve(ret);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} scopeIds
    * @param {boolean} recurse
    * @param {boolean} deleted
    * @param {string} properties
    */
    listGroups(scopeIds, recurse, deleted, properties) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {};
                let queryValues = {
                    scopeIds: scopeIds,
                    recurse: recurse,
                    deleted: deleted,
                    properties: properties,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "IMS", "5966283b-4196-4d57-9211-1b68f41ec1c2", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let options = this.createRequestOptions('application/json', verData.apiVersion);
                    let res;
                    res = yield this.rest.get(url, options);
                    let ret = this.formatResponse(res.result, null, true);
                    resolve(ret);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {number} identitySequenceId
    * @param {number} groupSequenceId
    * @param {string} scopeId
    */
    getIdentityChanges(identitySequenceId, groupSequenceId, scopeId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {};
                let queryValues = {
                    identitySequenceId: identitySequenceId,
                    groupSequenceId: groupSequenceId,
                    scopeId: scopeId,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "IMS", "28010c54-d0c0-4c89-a5b0-1c9e188b9fb7", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let options = this.createRequestOptions('application/json', verData.apiVersion);
                    let res;
                    res = yield this.rest.get(url, options);
                    let ret = this.formatResponse(res.result, null, false);
                    resolve(ret);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} domainId
    */
    getUserIdentityIdsByDomainId(domainId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {};
                let queryValues = {
                    domainId: domainId,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "IMS", "28010c54-d0c0-4c89-a5b0-1c9e188b9fb7", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let options = this.createRequestOptions('application/json', verData.apiVersion);
                    let res;
                    res = yield this.rest.get(url, options);
                    let ret = this.formatResponse(res.result, null, true);
                    resolve(ret);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} descriptors
    * @param {string} identityIds
    * @param {string} searchFilter
    * @param {string} filterValue
    * @param {IdentitiesInterfaces.QueryMembership} queryMembership
    * @param {string} properties
    * @param {boolean} includeRestrictedVisibility
    * @param {IdentitiesInterfaces.ReadIdentitiesOptions} options
    */
    readIdentities(descriptors, identityIds, searchFilter, filterValue, queryMembership, properties, includeRestrictedVisibility, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {};
                let queryValues = {
                    descriptors: descriptors,
                    identityIds: identityIds,
                    searchFilter: searchFilter,
                    filterValue: filterValue,
                    queryMembership: queryMembership,
                    properties: properties,
                    includeRestrictedVisibility: includeRestrictedVisibility,
                    options: options,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "IMS", "28010c54-d0c0-4c89-a5b0-1c9e188b9fb7", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let options = this.createRequestOptions('application/json', verData.apiVersion);
                    let res;
                    res = yield this.rest.get(url, options);
                    let ret = this.formatResponse(res.result, null, true);
                    resolve(ret);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} scopeId
    * @param {IdentitiesInterfaces.QueryMembership} queryMembership
    * @param {string} properties
    */
    readIdentitiesByScope(scopeId, queryMembership, properties) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {};
                let queryValues = {
                    scopeId: scopeId,
                    queryMembership: queryMembership,
                    properties: properties,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "IMS", "28010c54-d0c0-4c89-a5b0-1c9e188b9fb7", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let options = this.createRequestOptions('application/json', verData.apiVersion);
                    let res;
                    res = yield this.rest.get(url, options);
                    let ret = this.formatResponse(res.result, null, true);
                    resolve(ret);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} identityId
    * @param {IdentitiesInterfaces.QueryMembership} queryMembership
    * @param {string} properties
    */
    readIdentity(identityId, queryMembership, properties) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    identityId: identityId
                };
                let queryValues = {
                    queryMembership: queryMembership,
                    properties: properties,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "IMS", "28010c54-d0c0-4c89-a5b0-1c9e188b9fb7", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let options = this.createRequestOptions('application/json', verData.apiVersion);
                    let res;
                    res = yield this.rest.get(url, options);
                    let ret = this.formatResponse(res.result, null, false);
                    resolve(ret);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {VSSInterfaces.VssJsonCollectionWrapperV<IdentitiesInterfaces.Identity[]>} identities
    */
    updateIdentities(identities) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {};
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "IMS", "28010c54-d0c0-4c89-a5b0-1c9e188b9fb7", routeValues);
                    let url = verData.requestUrl;
                    let options = this.createRequestOptions('application/json', verData.apiVersion);
                    let res;
                    res = yield this.rest.replace(url, identities, options);
                    let ret = this.formatResponse(res.result, null, true);
                    resolve(ret);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {IdentitiesInterfaces.Identity} identity
    * @param {string} identityId
    */
    updateIdentity(identity, identityId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    identityId: identityId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "IMS", "28010c54-d0c0-4c89-a5b0-1c9e188b9fb7", routeValues);
                    let url = verData.requestUrl;
                    let options = this.createRequestOptions('application/json', verData.apiVersion);
                    let res;
                    res = yield this.rest.replace(url, identity, options);
                    let ret = this.formatResponse(res.result, null, false);
                    resolve(ret);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {IdentitiesInterfaces.FrameworkIdentityInfo} frameworkIdentityInfo
    */
    createIdentity(frameworkIdentityInfo) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {};
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "IMS", "dd55f0eb-6ea2-4fe4-9ebe-919e7dd1dfb4", routeValues);
                    let url = verData.requestUrl;
                    let options = this.createRequestOptions('application/json', verData.apiVersion);
                    let res;
                    res = yield this.rest.replace(url, frameworkIdentityInfo, options);
                    let ret = this.formatResponse(res.result, null, false);
                    resolve(ret);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {IdentitiesInterfaces.IdentityBatchInfo} batchInfo
    */
    readIdentityBatch(batchInfo) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {};
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "IMS", "299e50df-fe45-4d3a-8b5b-a5836fac74dc", routeValues);
                    let url = verData.requestUrl;
                    let options = this.createRequestOptions('application/json', verData.apiVersion);
                    let res;
                    res = yield this.rest.create(url, batchInfo, options);
                    let ret = this.formatResponse(res.result, null, true);
                    resolve(ret);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} scopeId
    */
    getIdentitySnapshot(scopeId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    scopeId: scopeId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "IMS", "d56223df-8ccd-45c9-89b4-eddf692400d7", routeValues);
                    let url = verData.requestUrl;
                    let options = this.createRequestOptions('application/json', verData.apiVersion);
                    let res;
                    res = yield this.rest.get(url, options);
                    let ret = this.formatResponse(res.result, IdentitiesInterfaces.TypeInfo.IdentitySnapshot, false);
                    resolve(ret);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    */
    getMaxSequenceId() {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {};
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "IMS", "e4a70778-cb2c-4e85-b7cc-3f3c7ae2d408", routeValues);
                    let url = verData.requestUrl;
                    let options = this.createRequestOptions('application/json', verData.apiVersion);
                    let res;
                    res = yield this.rest.get(url, options);
                    let ret = this.formatResponse(res.result, null, false);
                    resolve(ret);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    */
    getSelf() {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {};
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "IMS", "4bb02b5b-c120-4be2-b68e-21f7c50a4b82", routeValues);
                    let url = verData.requestUrl;
                    let options = this.createRequestOptions('application/json', verData.apiVersion);
                    let res;
                    res = yield this.rest.get(url, options);
                    let ret = this.formatResponse(res.result, null, false);
                    resolve(ret);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} containerId
    * @param {string} memberId
    */
    addMember(containerId, memberId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    containerId: containerId,
                    memberId: memberId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "IMS", "8ba35978-138e-41f8-8963-7b1ea2c5f775", routeValues);
                    let url = verData.requestUrl;
                    let options = this.createRequestOptions('application/json', verData.apiVersion);
                    let res;
                    res = yield this.rest.replace(url, options);
                    let ret = this.formatResponse(res.result, null, false);
                    resolve(ret);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} containerId
    * @param {string} memberId
    * @param {IdentitiesInterfaces.QueryMembership} queryMembership
    */
    readMember(containerId, memberId, queryMembership) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    containerId: containerId,
                    memberId: memberId
                };
                let queryValues = {
                    queryMembership: queryMembership,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "IMS", "8ba35978-138e-41f8-8963-7b1ea2c5f775", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let options = this.createRequestOptions('application/json', verData.apiVersion);
                    let res;
                    res = yield this.rest.get(url, options);
                    let ret = this.formatResponse(res.result, null, false);
                    resolve(ret);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} containerId
    * @param {IdentitiesInterfaces.QueryMembership} queryMembership
    */
    readMembers(containerId, queryMembership) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    containerId: containerId
                };
                let queryValues = {
                    queryMembership: queryMembership,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "IMS", "8ba35978-138e-41f8-8963-7b1ea2c5f775", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let options = this.createRequestOptions('application/json', verData.apiVersion);
                    let res;
                    res = yield this.rest.get(url, options);
                    let ret = this.formatResponse(res.result, null, true);
                    resolve(ret);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} containerId
    * @param {string} memberId
    */
    removeMember(containerId, memberId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    containerId: containerId,
                    memberId: memberId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "IMS", "8ba35978-138e-41f8-8963-7b1ea2c5f775", routeValues);
                    let url = verData.requestUrl;
                    let options = this.createRequestOptions('application/json', verData.apiVersion);
                    let res;
                    res = yield this.rest.del(url, options);
                    let ret = this.formatResponse(res.result, null, false);
                    resolve(ret);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} memberId
    * @param {string} containerId
    * @param {IdentitiesInterfaces.QueryMembership} queryMembership
    */
    readMemberOf(memberId, containerId, queryMembership) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    memberId: memberId,
                    containerId: containerId
                };
                let queryValues = {
                    queryMembership: queryMembership,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "IMS", "22865b02-9e4a-479e-9e18-e35b8803b8a0", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let options = this.createRequestOptions('application/json', verData.apiVersion);
                    let res;
                    res = yield this.rest.get(url, options);
                    let ret = this.formatResponse(res.result, null, false);
                    resolve(ret);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} memberId
    * @param {IdentitiesInterfaces.QueryMembership} queryMembership
    */
    readMembersOf(memberId, queryMembership) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    memberId: memberId
                };
                let queryValues = {
                    queryMembership: queryMembership,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "IMS", "22865b02-9e4a-479e-9e18-e35b8803b8a0", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let options = this.createRequestOptions('application/json', verData.apiVersion);
                    let res;
                    res = yield this.rest.get(url, options);
                    let ret = this.formatResponse(res.result, null, true);
                    resolve(ret);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {IdentitiesInterfaces.CreateScopeInfo} info
    * @param {string} scopeId
    */
    createScope(info, scopeId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    scopeId: scopeId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "IMS", "4e11e2bf-1e79-4eb5-8f34-a6337bd0de38", routeValues);
                    let url = verData.requestUrl;
                    let options = this.createRequestOptions('application/json', verData.apiVersion);
                    let res;
                    res = yield this.rest.replace(url, info, options);
                    let ret = this.formatResponse(res.result, IdentitiesInterfaces.TypeInfo.IdentityScope, false);
                    resolve(ret);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} scopeId
    */
    deleteScope(scopeId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    scopeId: scopeId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "IMS", "4e11e2bf-1e79-4eb5-8f34-a6337bd0de38", routeValues);
                    let url = verData.requestUrl;
                    let options = this.createRequestOptions('application/json', verData.apiVersion);
                    let res;
                    res = yield this.rest.del(url, options);
                    let ret = this.formatResponse(res.result, null, false);
                    resolve(ret);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} scopeId
    */
    getScopeById(scopeId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    scopeId: scopeId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "IMS", "4e11e2bf-1e79-4eb5-8f34-a6337bd0de38", routeValues);
                    let url = verData.requestUrl;
                    let options = this.createRequestOptions('application/json', verData.apiVersion);
                    let res;
                    res = yield this.rest.get(url, options);
                    let ret = this.formatResponse(res.result, IdentitiesInterfaces.TypeInfo.IdentityScope, false);
                    resolve(ret);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} scopeName
    */
    getScopeByName(scopeName) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {};
                let queryValues = {
                    scopeName: scopeName,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "IMS", "4e11e2bf-1e79-4eb5-8f34-a6337bd0de38", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let options = this.createRequestOptions('application/json', verData.apiVersion);
                    let res;
                    res = yield this.rest.get(url, options);
                    let ret = this.formatResponse(res.result, IdentitiesInterfaces.TypeInfo.IdentityScope, false);
                    resolve(ret);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {IdentitiesInterfaces.IdentityScope} renameScope
    * @param {string} scopeId
    */
    renameScope(renameScope, scopeId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    scopeId: scopeId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "IMS", "4e11e2bf-1e79-4eb5-8f34-a6337bd0de38", routeValues);
                    let url = verData.requestUrl;
                    let options = this.createRequestOptions('application/json', verData.apiVersion);
                    let res;
                    res = yield this.rest.update(url, renameScope, options);
                    let ret = this.formatResponse(res.result, null, false);
                    resolve(ret);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    */
    getSignoutToken() {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {};
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "IMS", "be39e83c-7529-45e9-9c67-0410885880da", routeValues);
                    let url = verData.requestUrl;
                    let options = this.createRequestOptions('application/json', verData.apiVersion);
                    let res;
                    res = yield this.rest.get(url, options);
                    let ret = this.formatResponse(res.result, DelegatedAuthorizationInterfaces.TypeInfo.AccessTokenResult, false);
                    resolve(ret);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} tenantId
    */
    getTenant(tenantId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    tenantId: tenantId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "IMS", "5f0a1723-2e2c-4c31-8cae-002d01bdd592", routeValues);
                    let url = verData.requestUrl;
                    let options = this.createRequestOptions('application/json', verData.apiVersion);
                    let res;
                    res = yield this.rest.get(url, options);
                    let ret = this.formatResponse(res.result, null, false);
                    resolve(ret);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
}
exports.IdentitiesApi = IdentitiesApi;
