/*
 * ---------------------------------------------------------
 * Copyright(C) Microsoft Corporation. All rights reserved.
 * ---------------------------------------------------------
 *
 * ---------------------------------------------------------
 * Generated file, DO NOT EDIT
 * ---------------------------------------------------------
 */
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const basem = require("./ClientApiBases");
const ServiceHooksInterfaces = require("./interfaces/ServiceHooksInterfaces");
class ServiceHooksApi extends basem.ClientApiBase {
    constructor(baseUrl, handlers) {
        super(baseUrl, handlers, 'node-ServiceHooks-api');
    }
    /**
     * @param {string} consumerId
     * @param {string} consumerActionId
     */
    getConsumerAction(consumerId, consumerActionId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    consumerId: consumerId,
                    consumerActionId: consumerActionId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "hookssvc", "6a1f0102-a266-4ca8-bfe9-f126df266a37", routeValues);
                    let url = verData.requestUrl;
                    let options = this.createRequestOptions('application/json', verData.apiVersion);
                    let res;
                    res = yield this.rest.get(url, options);
                    let ret = this.formatResponse(res.result, ServiceHooksInterfaces.TypeInfo.ConsumerAction, false);
                    resolve(ret);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
     * @param {string} consumerId
     */
    getConsumerActions(consumerId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    consumerId: consumerId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "hookssvc", "6a1f0102-a266-4ca8-bfe9-f126df266a37", routeValues);
                    let url = verData.requestUrl;
                    let options = this.createRequestOptions('application/json', verData.apiVersion);
                    let res;
                    res = yield this.rest.get(url, options);
                    let ret = this.formatResponse(res.result, ServiceHooksInterfaces.TypeInfo.ConsumerAction, true);
                    resolve(ret);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
     * @param {string} consumerId
     */
    getConsumer(consumerId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    consumerId: consumerId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "hookssvc", "5f431332-1a18-43d9-ba45-109ec52c71c7", routeValues);
                    let url = verData.requestUrl;
                    let options = this.createRequestOptions('application/json', verData.apiVersion);
                    let res;
                    res = yield this.rest.get(url, options);
                    let ret = this.formatResponse(res.result, ServiceHooksInterfaces.TypeInfo.Consumer, false);
                    resolve(ret);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
     */
    getConsumers() {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {};
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "hookssvc", "5f431332-1a18-43d9-ba45-109ec52c71c7", routeValues);
                    let url = verData.requestUrl;
                    let options = this.createRequestOptions('application/json', verData.apiVersion);
                    let res;
                    res = yield this.rest.get(url, options);
                    let ret = this.formatResponse(res.result, ServiceHooksInterfaces.TypeInfo.Consumer, true);
                    resolve(ret);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
     * @param {ServiceHooksInterfaces.PublishEventsRequestData} eventsRequestData
     */
    createEvents(eventsRequestData) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {};
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "hookssvc", "46f7c4d2-97a1-48e6-85f3-5083742752fd", routeValues);
                    let url = verData.requestUrl;
                    let options = this.createRequestOptions('application/json', verData.apiVersion);
                    let res;
                    res = yield this.rest.create(url, eventsRequestData, options);
                    let ret = this.formatResponse(res.result, null, false);
                    resolve(ret);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
     * @param {ServiceHooksInterfaces.SubscriptionInputValuesQuery} inputValuesQuery
     */
    queryInputValues(inputValuesQuery) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {};
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "hookssvc", "95784519-7b74-4625-8888-49b294fe46b3", routeValues);
                    let url = verData.requestUrl;
                    let options = this.createRequestOptions('application/json', verData.apiVersion);
                    let res;
                    res = yield this.rest.create(url, inputValuesQuery, options);
                    let ret = this.formatResponse(res.result, ServiceHooksInterfaces.TypeInfo.SubscriptionInputValuesQuery, false);
                    resolve(ret);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
     * @param {string} subscriptionId
     * @param {number} notificationId
     */
    getNotification(subscriptionId, notificationId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    subscriptionId: subscriptionId,
                    notificationId: notificationId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "hookssvc", "a8dbbb75-c3cf-4d7b-a61d-c95f5a97ca55", routeValues);
                    let url = verData.requestUrl;
                    let options = this.createRequestOptions('application/json', verData.apiVersion);
                    let res;
                    res = yield this.rest.get(url, options);
                    let ret = this.formatResponse(res.result, ServiceHooksInterfaces.TypeInfo.Notification, false);
                    resolve(ret);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
     * @param {string} subscriptionId
     * @param {number} maxResults
     * @param {ServiceHooksInterfaces.NotificationStatus} status
     * @param {ServiceHooksInterfaces.NotificationResult} result
     */
    getNotifications(subscriptionId, maxResults, status, result) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    subscriptionId: subscriptionId
                };
                let queryValues = {
                    maxResults: maxResults,
                    status: status,
                    result: result,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "hookssvc", "a8dbbb75-c3cf-4d7b-a61d-c95f5a97ca55", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let options = this.createRequestOptions('application/json', verData.apiVersion);
                    let res;
                    res = yield this.rest.get(url, options);
                    let ret = this.formatResponse(res.result, ServiceHooksInterfaces.TypeInfo.Notification, true);
                    resolve(ret);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
     * @param {ServiceHooksInterfaces.NotificationsQuery} query
     */
    queryNotifications(query) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {};
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "hookssvc", "e5e555f6-94ad-475b-ac98-7f011b48dcd5", routeValues);
                    let url = verData.requestUrl;
                    let options = this.createRequestOptions('application/json', verData.apiVersion);
                    let res;
                    res = yield this.rest.create(url, query, options);
                    let ret = this.formatResponse(res.result, ServiceHooksInterfaces.TypeInfo.NotificationsQuery, false);
                    resolve(ret);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
     * @param {ServiceHooksInterfaces.Subscription} subscription
     */
    createSubscription(subscription) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {};
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "hookssvc", "4431ee3f-13e3-4b41-b62e-47289e90d3dc", routeValues);
                    let url = verData.requestUrl;
                    let options = this.createRequestOptions('application/json', verData.apiVersion);
                    let res;
                    res = yield this.rest.create(url, subscription, options);
                    let ret = this.formatResponse(res.result, ServiceHooksInterfaces.TypeInfo.Subscription, false);
                    resolve(ret);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
     * @param {string} subscriptionId
     */
    deleteSubscription(subscriptionId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    subscriptionId: subscriptionId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "hookssvc", "4431ee3f-13e3-4b41-b62e-47289e90d3dc", routeValues);
                    let url = verData.requestUrl;
                    let options = this.createRequestOptions('application/json', verData.apiVersion);
                    let res;
                    res = yield this.rest.del(url, options);
                    let ret = this.formatResponse(res.result, null, false);
                    resolve(ret);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
     * @param {string} subscriptionId
     */
    getSubscription(subscriptionId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    subscriptionId: subscriptionId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "hookssvc", "4431ee3f-13e3-4b41-b62e-47289e90d3dc", routeValues);
                    let url = verData.requestUrl;
                    let options = this.createRequestOptions('application/json', verData.apiVersion);
                    let res;
                    res = yield this.rest.get(url, options);
                    let ret = this.formatResponse(res.result, ServiceHooksInterfaces.TypeInfo.Subscription, false);
                    resolve(ret);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
     * @param {string} publisherId
     * @param {string} eventType
     * @param {string} consumerId
     * @param {string} consumerActionId
     */
    listSubscriptions(publisherId, eventType, consumerId, consumerActionId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {};
                let queryValues = {
                    publisherId: publisherId,
                    eventType: eventType,
                    consumerId: consumerId,
                    consumerActionId: consumerActionId,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "hookssvc", "4431ee3f-13e3-4b41-b62e-47289e90d3dc", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let options = this.createRequestOptions('application/json', verData.apiVersion);
                    let res;
                    res = yield this.rest.get(url, options);
                    let ret = this.formatResponse(res.result, ServiceHooksInterfaces.TypeInfo.Subscription, true);
                    resolve(ret);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
     * @param {ServiceHooksInterfaces.Subscription} subscription
     */
    replaceSubscription(subscription) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {};
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "hookssvc", "4431ee3f-13e3-4b41-b62e-47289e90d3dc", routeValues);
                    let url = verData.requestUrl;
                    let options = this.createRequestOptions('application/json', verData.apiVersion);
                    let res;
                    res = yield this.rest.replace(url, subscription, options);
                    let ret = this.formatResponse(res.result, ServiceHooksInterfaces.TypeInfo.Subscription, false);
                    resolve(ret);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
     * @param {ServiceHooksInterfaces.SubscriptionsQuery} query
     */
    querySubscriptions(query) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {};
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "hookssvc", "d4a77d7b-9be6-4060-b53d-1211f34de619", routeValues);
                    let url = verData.requestUrl;
                    let options = this.createRequestOptions('application/json', verData.apiVersion);
                    let res;
                    res = yield this.rest.create(url, query, options);
                    let ret = this.formatResponse(res.result, ServiceHooksInterfaces.TypeInfo.SubscriptionsQuery, false);
                    resolve(ret);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
     * @param {ServiceHooksInterfaces.Notification} testNotification
     */
    createTestNotification(testNotification) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {};
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.2-preview.1", "hookssvc", "b906cedb-0a8e-4e3c-b1b1-2f3d680f035e", routeValues);
                    let url = verData.requestUrl;
                    let options = this.createRequestOptions('application/json', verData.apiVersion);
                    let res;
                    res = yield this.rest.create(url, testNotification, options);
                    let ret = this.formatResponse(res.result, ServiceHooksInterfaces.TypeInfo.Notification, false);
                    resolve(ret);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
}
exports.ServiceHooksApi = ServiceHooksApi;
