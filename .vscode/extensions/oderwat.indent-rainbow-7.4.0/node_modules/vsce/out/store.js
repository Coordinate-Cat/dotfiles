"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var path = require("path");
var osenv_1 = require("osenv");
var util_1 = require("./util");
var validation_1 = require("./validation");
var denodeify = require("denodeify");
var readFile = denodeify(fs.readFile);
var writeFile = denodeify(fs.writeFile);
var storePath = path.join(osenv_1.home(), '.vsce');
function load() {
    return readFile(storePath, 'utf8')
        .catch(function (err) { return err.code !== 'ENOENT' ? Promise.reject(err) : Promise.resolve('{}'); })
        .then(function (rawStore) {
        try {
            return Promise.resolve(JSON.parse(rawStore));
        }
        catch (e) {
            return Promise.reject("Error parsing store: " + storePath);
        }
    })
        .then(function (store) {
        store.publishers = store.publishers || [];
        return Promise.resolve(store);
    });
}
function save(store) {
    return writeFile(storePath, JSON.stringify(store))
        .then(function () { return store; });
}
function addPublisherToStore(store, publisher) {
    store.publishers = store.publishers.filter(function (p) { return p.name !== publisher.name; }).concat([publisher]);
    return save(store).then(function () { return publisher; });
}
function removePublisherFromStore(store, publisherName) {
    store.publishers = store.publishers.filter(function (p) { return p.name !== publisherName; });
    return save(store);
}
function requestPAT(store, publisherName) {
    return __awaiter(this, void 0, void 0, function () {
        var pat, api;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, util_1.read("Personal Access Token for publisher '" + publisherName + "':", { silent: true, replace: '*' })];
                case 1:
                    pat = _a.sent();
                    api = util_1.getSecurityRolesAPI(pat);
                    return [4 /*yield*/, api.getRoleAssignments('gallery.publisher', publisherName)];
                case 2:
                    _a.sent();
                    return [4 /*yield*/, addPublisherToStore(store, { name: publisherName, pat: pat })];
                case 3: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
function getPublisher(publisherName) {
    validation_1.validatePublisher(publisherName);
    return load().then(function (store) {
        var publisher = store.publishers.filter(function (p) { return p.name === publisherName; })[0];
        return publisher ? Promise.resolve(publisher) : requestPAT(store, publisherName);
    });
}
exports.getPublisher = getPublisher;
function loginPublisher(publisherName) {
    validation_1.validatePublisher(publisherName);
    return load()
        .then(function (store) {
        var publisher = store.publishers.filter(function (p) { return p.name === publisherName; })[0];
        if (publisher) {
            console.log("Publisher '" + publisherName + "' is already known");
            return util_1.read('Do you want to overwrite its PAT? [y/N] ')
                .then(function (answer) { return /^y$/i.test(answer) ? store : Promise.reject('Aborted'); });
        }
        return Promise.resolve(store);
    })
        .then(function (store) { return requestPAT(store, publisherName); });
}
exports.loginPublisher = loginPublisher;
function logoutPublisher(publisherName) {
    validation_1.validatePublisher(publisherName);
    return load().then(function (store) {
        var publisher = store.publishers.filter(function (p) { return p.name === publisherName; })[0];
        if (!publisher) {
            return Promise.reject("Unknown publisher '" + publisherName + "'");
        }
        return removePublisherFromStore(store, publisherName);
    });
}
exports.logoutPublisher = logoutPublisher;
function createPublisher(publisherName) {
    validation_1.validatePublisher(publisherName);
    return util_1.read("Publisher human-friendly name: ", { default: publisherName }).then(function (displayName) {
        return util_1.read("E-mail: ").then(function (email) {
            return util_1.read("Personal Access Token:", { silent: true, replace: '*' })
                .then(function (pat) {
                var api = util_1.getGalleryAPI(pat);
                var raw = {
                    publisherName: publisherName,
                    displayName: displayName,
                    extensions: [],
                    flags: null,
                    lastUpdated: null,
                    longDescription: '',
                    publisherId: null,
                    shortDescription: '',
                    emailAddress: [email]
                };
                return api.createPublisher(raw)
                    .then(function () { return ({ name: publisherName, pat: pat }); });
            })
                .then(function (publisher) { return load().then(function (store) { return addPublisherToStore(store, publisher); }); });
        });
    })
        .then(function () { return util_1.log.done("Created publisher '" + publisherName + "'."); });
}
exports.createPublisher = createPublisher;
function deletePublisher(publisherName) {
    return getPublisher(publisherName).then(function (_a) {
        var pat = _a.pat;
        return util_1.read("This will FOREVER delete '" + publisherName + "'! Are you sure? [y/N] ")
            .then(function (answer) { return /^y$/i.test(answer) ? null : Promise.reject('Aborted'); })
            .then(function () { return util_1.getGalleryAPI(pat); })
            .then(function (api) { return api.deletePublisher(publisherName); })
            .then(function () { return load().then(function (store) { return removePublisherFromStore(store, publisherName); }); })
            .then(function () { return util_1.log.done("Deleted publisher '" + publisherName + "'."); });
    });
}
exports.deletePublisher = deletePublisher;
function listPublishers() {
    return load()
        .then(function (store) { return store.publishers; })
        .then(function (publishers) { return publishers.forEach(function (p) { return console.log(p.name); }); });
}
exports.listPublishers = listPublishers;

//# sourceMappingURL=store.js.map
