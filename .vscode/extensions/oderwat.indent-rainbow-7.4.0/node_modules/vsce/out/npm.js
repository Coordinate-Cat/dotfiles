"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
var fs = require("fs");
var cp = require("child_process");
var parseSemver = require("parse-semver");
var _ = require("lodash");
var util_1 = require("./util");
function parseStdout(_a) {
    var stdout = _a.stdout;
    return stdout.split(/[\r\n]/).filter(function (line) { return !!line; })[0];
}
function exec(command, options, cancellationToken) {
    if (options === void 0) { options = {}; }
    return new Promise(function (c, e) {
        var disposeCancellationListener = null;
        var child = cp.exec(command, __assign({}, options, { encoding: 'utf8' }), function (err, stdout, stderr) {
            if (disposeCancellationListener) {
                disposeCancellationListener();
                disposeCancellationListener = null;
            }
            if (err) {
                return e(err);
            }
            c({ stdout: stdout, stderr: stderr });
        });
        if (cancellationToken) {
            disposeCancellationListener = cancellationToken.subscribe(function (err) {
                child.kill();
                e(err);
            });
        }
    });
}
function checkNPM(cancellationToken) {
    return exec('npm -v', {}, cancellationToken).then(function (_a) {
        var stdout = _a.stdout;
        var version = stdout.trim();
        if (/^3\.7\.[0123]$/.test(version)) {
            return Promise.reject("npm@" + version + " doesn't work with vsce. Please update npm: npm install -g npm");
        }
    });
}
function getNpmDependencies(cwd) {
    return checkNPM()
        .then(function () { return exec('npm list --production --parseable --depth=99999', { cwd: cwd, maxBuffer: 5000 * 1024 }); })
        .then(function (_a) {
        var stdout = _a.stdout;
        return stdout
            .split(/[\r\n]/)
            .filter(function (dir) { return path.isAbsolute(dir); });
    });
}
function asYarnDependency(prefix, tree, prune) {
    if (prune && /@[\^~]/.test(tree.name)) {
        return null;
    }
    var name, version;
    try {
        var parseResult = parseSemver(tree.name);
        name = parseResult.name;
        version = parseResult.version;
    }
    catch (err) {
        util_1.log.error('Failed to parse dependency:', tree.name);
        return null;
    }
    var dependencyPath = path.join(prefix, name);
    var children = [];
    for (var _i = 0, _a = (tree.children || []); _i < _a.length; _i++) {
        var child = _a[_i];
        var dep = asYarnDependency(path.join(prefix, name, 'node_modules'), child, prune);
        if (dep) {
            children.push(dep);
        }
    }
    return { name: name, version: version, path: dependencyPath, children: children };
}
function selectYarnDependencies(deps, packagedDependencies) {
    var index = new /** @class */ (function () {
        function class_1() {
            this.data = Object.create(null);
            for (var _i = 0, deps_1 = deps; _i < deps_1.length; _i++) {
                var dep = deps_1[_i];
                if (this.data[dep.name]) {
                    throw Error("Dependency seen more than once: " + dep.name);
                }
                this.data[dep.name] = dep;
            }
        }
        class_1.prototype.find = function (name) {
            var result = this.data[name];
            if (!result) {
                throw new Error("Could not find dependency: " + name);
            }
            return result;
        };
        return class_1;
    }());
    var reached = new /** @class */ (function () {
        function class_2() {
            this.values = [];
        }
        class_2.prototype.add = function (dep) {
            if (this.values.indexOf(dep) < 0) {
                this.values.push(dep);
                return true;
            }
            return false;
        };
        return class_2;
    }());
    var visit = function (name) {
        var dep = index.find(name);
        if (!reached.add(dep)) {
            // already seen -> done
            return;
        }
        for (var _i = 0, _a = dep.children; _i < _a.length; _i++) {
            var child = _a[_i];
            visit(child.name);
        }
    };
    packagedDependencies.forEach(visit);
    return reached.values;
}
function getYarnProductionDependencies(cwd, packagedDependencies) {
    return __awaiter(this, void 0, void 0, function () {
        var raw, match, usingPackagedDependencies, trees, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, new Promise(function (c, e) { return cp.exec('yarn list --prod --json', { cwd: cwd, encoding: 'utf8', env: __assign({}, process.env), maxBuffer: 5000 * 1024 }, function (err, stdout) { return err ? e(err) : c(stdout); }); })];
                case 1:
                    raw = _a.sent();
                    match = /^{"type":"tree".*$/m.exec(raw);
                    if (!match || match.length !== 1) {
                        throw new Error('Could not parse result of `yarn list --json`');
                    }
                    usingPackagedDependencies = Array.isArray(packagedDependencies);
                    trees = JSON.parse(match[0]).data.trees;
                    result = trees
                        .map(function (tree) { return asYarnDependency(path.join(cwd, 'node_modules'), tree, !usingPackagedDependencies); })
                        .filter(function (dep) { return !!dep; });
                    if (usingPackagedDependencies) {
                        result = selectYarnDependencies(result, packagedDependencies);
                    }
                    return [2 /*return*/, result];
            }
        });
    });
}
function getYarnDependencies(cwd, packagedDependencies) {
    return __awaiter(this, void 0, void 0, function () {
        var result, deps, flatten_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    result = [cwd];
                    return [4 /*yield*/, new Promise(function (c) { return fs.exists(path.join(cwd, 'yarn.lock'), c); })];
                case 1:
                    if (!_a.sent()) return [3 /*break*/, 3];
                    return [4 /*yield*/, getYarnProductionDependencies(cwd, packagedDependencies)];
                case 2:
                    deps = _a.sent();
                    flatten_1 = function (dep) { result.push(dep.path); dep.children.forEach(flatten_1); };
                    deps.forEach(flatten_1);
                    _a.label = 3;
                case 3: return [2 /*return*/, _.uniq(result)];
            }
        });
    });
}
function getDependencies(cwd, useYarn, packagedDependencies) {
    if (useYarn === void 0) { useYarn = false; }
    return useYarn ? getYarnDependencies(cwd, packagedDependencies) : getNpmDependencies(cwd);
}
exports.getDependencies = getDependencies;
function getLatestVersion(name, cancellationToken) {
    return checkNPM(cancellationToken)
        .then(function () { return exec("npm show " + name + " version", {}, cancellationToken); })
        .then(parseStdout);
}
exports.getLatestVersion = getLatestVersion;

//# sourceMappingURL=npm.js.map
