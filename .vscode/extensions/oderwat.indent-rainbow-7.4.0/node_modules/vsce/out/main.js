"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var program = require("commander");
var package_1 = require("./package");
var publish_1 = require("./publish");
var show_1 = require("./show");
var search_1 = require("./search");
var store_1 = require("./store");
var npm_1 = require("./npm");
var util_1 = require("./util");
var semver = require("semver");
var tty_1 = require("tty");
var pkg = require('../package.json');
function fatal(message) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
    if (message instanceof Error) {
        message = message.message;
        if (/^cancell?ed$/i.test(message)) {
            return;
        }
    }
    util_1.log.error.apply(util_1.log, [message].concat(args));
    if (/Unauthorized\(401\)/.test(message)) {
        util_1.log.error("Be sure to use a Personal Access Token which has access to **all accessible accounts**.\nSee https://code.visualstudio.com/api/working-with-extensions/publishing-extension#publishing-extensions for more information.");
    }
    process.exit(1);
}
function main(task) {
    var latestVersion = null;
    var token = new util_1.CancellationToken();
    if (tty_1.isatty(1)) {
        npm_1.getLatestVersion(pkg.name, token)
            .then(function (version) { return latestVersion = version; })
            .catch(function (err) { return !util_1.isCancelledError(err) && util_1.log.error(err); });
    }
    task
        .catch(fatal)
        .then(function () {
        if (latestVersion && semver.gt(latestVersion, pkg.version)) {
            util_1.log.warn("\nThe latest version of " + pkg.name + " is " + latestVersion + " and you have " + pkg.version + ".\nUpdate it now: npm install -g " + pkg.name);
        }
        else {
            token.cancel();
        }
    });
}
module.exports = function (argv) {
    program
        .version(pkg.version);
    program
        .command('ls')
        .description('Lists all the files that will be published')
        .option('--yarn', 'Use yarn instead of npm')
        .option('--packagedDependencies <path>', 'Select packages that should be published only (includes dependencies)', function (val, all) { return all ? all.concat(val) : [val]; }, undefined)
        .action(function (_a) {
        var yarn = _a.yarn, packagedDependencies = _a.packagedDependencies;
        return main(package_1.ls(undefined, yarn, packagedDependencies));
    });
    program
        .command('package')
        .description('Packages an extension')
        .option('-o, --out [path]', 'Output .vsix extension file to [path] location')
        .option('--baseContentUrl [url]', 'Prepend all relative links in README.md with this url.')
        .option('--baseImagesUrl [url]', 'Prepend all relative image links in README.md with this url.')
        .option('--yarn', 'Use yarn instead of npm')
        .action(function (_a) {
        var out = _a.out, baseContentUrl = _a.baseContentUrl, baseImagesUrl = _a.baseImagesUrl, yarn = _a.yarn;
        return main(package_1.packageCommand({ packagePath: out, baseContentUrl: baseContentUrl, baseImagesUrl: baseImagesUrl, useYarn: yarn }));
    });
    program
        .command('publish [<version>]')
        .description('Publishes an extension')
        .option('-p, --pat <token>', 'Personal Access Token')
        .option('--packagePath [path]', 'Publish the VSIX package located at the specified path.')
        .option('--baseContentUrl [url]', 'Prepend all relative links in README.md with this url.')
        .option('--baseImagesUrl [url]', 'Prepend all relative image links in README.md with this url.')
        .option('--yarn', 'Use yarn instead of npm while packing extension files')
        .action(function (version, _a) {
        var pat = _a.pat, packagePath = _a.packagePath, baseContentUrl = _a.baseContentUrl, baseImagesUrl = _a.baseImagesUrl, yarn = _a.yarn;
        return main(publish_1.publish({ pat: pat, version: version, packagePath: packagePath, baseContentUrl: baseContentUrl, baseImagesUrl: baseImagesUrl, useYarn: yarn }));
    });
    program
        .command('unpublish [<extensionid>]')
        .description('Unpublishes an extension. Example extension id: microsoft.csharp.')
        .option('-p, --pat <token>', 'Personal Access Token')
        .action(function (id, _a) {
        var pat = _a.pat;
        return main(publish_1.unpublish({ id: id, pat: pat }));
    });
    program
        .command('list <publisher>')
        .description('Lists all extensions published by the given publisher')
        .action(function (publisher) { return main(publish_1.list(publisher)); });
    program
        .command('ls-publishers')
        .description('List all known publishers')
        .action(function () { return main(store_1.listPublishers()); });
    program
        .command('create-publisher <publisher>')
        .description('Creates a new publisher')
        .action(function (publisher) { return main(store_1.createPublisher(publisher)); });
    program
        .command('delete-publisher <publisher>')
        .description('Deletes a publisher')
        .action(function (publisher) { return main(store_1.deletePublisher(publisher)); });
    program
        .command('login <publisher>')
        .description('Add a publisher to the known publishers list')
        .action(function (name) { return main(store_1.loginPublisher(name)); });
    program
        .command('logout <publisher>')
        .description('Remove a publisher from the known publishers list')
        .action(function (name) { return main(store_1.logoutPublisher(name)); });
    program
        .command('show <extensionid>')
        .option('--json', 'Output data in json format', false)
        .description('Show extension metadata')
        .action(function (extensionid, _a) {
        var json = _a.json;
        return main(show_1.show(extensionid, json));
    });
    program
        .command('search <text>')
        .option('--json', 'Output result in json format', false)
        .description('search extension gallery')
        .action(function (text, _a) {
        var json = _a.json;
        return main(search_1.search(text, json));
    });
    program
        .command('*')
        .action(function () { return program.help(); });
    program.parse(argv);
    if (process.argv.length <= 2) {
        program.help();
    }
};

//# sourceMappingURL=main.js.map
