"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var publish_1 = require("./publish");
var package_1 = require("./package");
/**
 * The supported list of package managers.
 */
var PackageManager;
(function (PackageManager) {
    PackageManager[PackageManager["Npm"] = 0] = "Npm";
    PackageManager[PackageManager["Yarn"] = 1] = "Yarn";
})(PackageManager = exports.PackageManager || (exports.PackageManager = {}));
/**
 * Creates a VSIX from the extension in the current working directory.
 */
function createVSIX(options) {
    if (options === void 0) { options = {}; }
    return package_1.packageCommand(options);
}
exports.createVSIX = createVSIX;
/**
 * Publishes the extension in the current working directory.
 */
function publish(options) {
    if (options === void 0) { options = {}; }
    return publish_1.publish(options);
}
exports.publish = publish;
/**
 * Lists the files included in the extension's package.
 */
function listFiles(options) {
    if (options === void 0) { options = {}; }
    return package_1.listFiles(options.cwd, options.packageManager === PackageManager.Yarn, options.packagedDependencies);
}
exports.listFiles = listFiles;
/**
 * Publishes a pre-build VSIX.
 */
function publishVSIX(packagePath, options) {
    if (options === void 0) { options = {}; }
    return publish_1.publish(__assign({ packagePath: packagePath }, options));
}
exports.publishVSIX = publishVSIX;

//# sourceMappingURL=api.js.map
