"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var os = require('os');
var fixedLocale = 'en-us';
var format = {
    date: { month: 'long', day: 'numeric', year: 'numeric' },
    time: { hour: 'numeric', minute: 'numeric', second: 'numeric' },
};
var columns = process.stdout.columns ? process.stdout.columns : 80;
// xxx: Windows cmd + powershell standard fonts currently don't support the full
// unicode charset. For now we use fallback icons when on windows.
var useFallbackIcons = os.platform() === 'win32';
exports.icons = useFallbackIcons ?
    {
        download: "\u2193",
        star: "\u2665",
        emptyStar: "\u2022",
    } : {
    download: "\u2913",
    star: "\u2605",
    emptyStar: "\u2606",
};
function formatDate(date) { return date.toLocaleString(fixedLocale, format.date); }
exports.formatDate = formatDate;
function formatTime(date) { return date.toLocaleString(fixedLocale, format.time); }
exports.formatTime = formatTime;
function formatDateTime(date) { return date.toLocaleString(fixedLocale, __assign({}, format.date, format.time)); }
exports.formatDateTime = formatDateTime;
function repeatString(text, count) {
    var result = '';
    for (var i = 0; i < count; i++) {
        result += text;
    }
    return result;
}
exports.repeatString = repeatString;
function ratingStars(rating, total) {
    if (total === void 0) { total = 5; }
    var c = Math.min(Math.round(rating), total);
    return "" + repeatString(exports.icons.star + ' ', c) + repeatString(exports.icons.emptyStar + ' ', total - c);
}
exports.ratingStars = ratingStars;
function tableView(table, spacing) {
    if (spacing === void 0) { spacing = 2; }
    var maxLen = {};
    table.forEach(function (row) { return row.forEach(function (cell, i) { return maxLen[i] = Math.max(maxLen[i] || 0, cell.length); }); });
    return table.map(function (row) { return row.map(function (cell, i) { return "" + cell + repeatString(' ', maxLen[i] - cell.length + spacing); }).join(''); });
}
exports.tableView = tableView;
function wordWrap(text, width) {
    if (width === void 0) { width = columns; }
    var _a = (text.match(/^\s+/) || [])[0], indent = _a === void 0 ? '' : _a;
    var maxWidth = width - indent.length;
    return text
        .replace(/^\s+/, '')
        .split('')
        .reduce(function (_a, ch, i) {
        var out = _a[0], buffer = _a[1], pos = _a[2];
        var nl = pos === maxWidth ? "\n" + indent : '';
        var newPos = nl ? 0 : +pos + 1;
        return / |-|,|\./.test(ch) ?
            ["" + out + buffer + ch + nl, '', newPos] : ["" + out + nl, buffer + ch, newPos];
    }, [indent, '', 0])
        .slice(0, 2)
        .join('');
}
exports.wordWrap = wordWrap;
;
function indentRow(row) { return "  " + row; }
exports.indentRow = indentRow;
;
function wordTrim(text, width, indicator) {
    if (width === void 0) { width = columns; }
    if (indicator === void 0) { indicator = '...'; }
    if (text.length > width) {
        return text.substr(0, width - indicator.length) + indicator;
    }
    return text;
}
exports.wordTrim = wordTrim;

//# sourceMappingURL=viewutils.js.map
