"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var HttpClient_1 = require("vso-node-api/HttpClient");
var GalleryInterfaces_1 = require("vso-node-api/interfaces/GalleryInterfaces");
var Serialization_1 = require("vso-node-api/Serialization");
var PublicGalleryAPI = /** @class */ (function () {
    function PublicGalleryAPI(baseUrl, apiVersion) {
        if (apiVersion === void 0) { apiVersion = '3.0-preview.1'; }
        this.baseUrl = baseUrl;
        this.apiVersion = apiVersion;
        this.client = new HttpClient_1.HttpClient('vsce');
    }
    PublicGalleryAPI.prototype.post = function (url, data, additionalHeaders) {
        return this.client.post(this.baseUrl + "/_apis/public" + url, data, additionalHeaders);
    };
    PublicGalleryAPI.prototype.extensionQuery = function (_a) {
        var _b = _a.pageNumber, pageNumber = _b === void 0 ? 1 : _b, _c = _a.pageSize, pageSize = _c === void 0 ? 1 : _c, _d = _a.sortBy, sortBy = _d === void 0 ? GalleryInterfaces_1.SortByType.Relevance : _d, _e = _a.sortOrder, sortOrder = _e === void 0 ? GalleryInterfaces_1.SortOrderType.Default : _e, _f = _a.flags, flags = _f === void 0 ? [] : _f, _g = _a.criteria, criteria = _g === void 0 ? [] : _g, _h = _a.assetTypes, assetTypes = _h === void 0 ? [] : _h;
        return this.post('/gallery/extensionquery', JSON.stringify({
            filters: [{ pageNumber: pageNumber, pageSize: pageSize, criteria: criteria }],
            assetTypes: assetTypes,
            flags: flags.reduce(function (memo, flag) { return memo | flag; }, 0)
        }), {
            Accept: "application/json;api-version=" + this.apiVersion,
            'Content-Type': 'application/json',
        })
            .then(function (res) { return res.readBody(); })
            .then(function (data) { return JSON.parse(data); })
            .then(function (_a) {
            var _b = _a.results, _c = (_b === void 0 ? [] : _b)[0], result = _c === void 0 ? {} : _c;
            return result;
        })
            .then(function (_a) {
            var _b = _a.extensions, extensions = _b === void 0 ? [] : _b;
            return Serialization_1.ContractSerializer.deserialize(extensions, GalleryInterfaces_1.TypeInfo.PublishedExtension, false, false);
        });
    };
    PublicGalleryAPI.prototype.getExtension = function (extensionId, flags) {
        if (flags === void 0) { flags = []; }
        return this.extensionQuery({
            criteria: [{ filterType: GalleryInterfaces_1.ExtensionQueryFilterType.Name, value: extensionId }],
            flags: flags,
        })
            .then(function (result) { return result.filter(function (_a) {
            var publisherName = _a.publisher.publisherName, extensionName = _a.extensionName;
            return extensionId.toLowerCase() === (publisherName + "." + extensionName).toLowerCase();
        }); })
            .then(function (_a) {
            var extension = _a[0];
            return extension;
        });
    };
    return PublicGalleryAPI;
}());
exports.PublicGalleryAPI = PublicGalleryAPI;

//# sourceMappingURL=publicgalleryapi.js.map
