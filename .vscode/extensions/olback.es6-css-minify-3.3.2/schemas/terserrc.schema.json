{
    "$schema": "http://json-schema.org/draft-07/schema",
    "description": "Terser/Uglify-es options schema for es6-css-minify",
    "type": "object",
    "properties": {
        "parse": {
            "description": "Parse options.",
            "type": "object",
            "default": {},
            "properties": {
                "bare_returns": {
                    "description": "Support top level return statements.",
                    "type": "boolean",
                    "default": false
                },
                "ecma": {
                    "description": "Specify one of 5, 6, 7 or 8. Note: this setting is not presently enforced except for ES8 optional trailing commas in function parameter lists and calls with ecma 8.",
                    "type": "number",
                    "default": 8,
                    "enum": [
                        5,
                        6,
                        7,
                        8
                    ]
                },
                "html5_comments": {
                    "description": "HTML5 comments.",
                    "type": "boolean",
                    "default": true
                },
                "shebang": {
                    "description": "Support #!command as the first line.",
                    "type": "boolean",
                    "default": true
                }
            }
        },
        "compress": {
            "description": "Compress options.",
            "type": "object",
            "default": {},
            "properties": {
                "arrows": {
                    "description": "Converts ()=>{return x} to ()=>x. Class and object literal methods will also be converted to arrow expressions if the resultant code is shorter: m(){return x} becomes m:()=>x.",
                    "type": "boolean",
                    "default": true
                },
                "arguments": {
                    "description": "Replace arguments[index] with function parameter name whenever possible.",
                    "type": "boolean",
                    "default": false
                },
                "booleans": {
                    "description": "Various optimizations for boolean context, for example !!a ? b : c → a ? b : c.",
                    "type": "boolean",
                    "default": true
                },
                "booleans_as_integers": {
                    "description": "Turn booleans into 0 and 1, also makes comparisons with booleans use == and != instead of === and !==.",
                    "type": "boolean",
                    "default": false
                },
                "collapse_vars": {
                    "description": "Collapse single-use non-constant variables, side effects permitting.",
                    "type": "boolean",
                    "default": true
                },
                "comparisons": {
                    "description": "Apply certain optimizations to binary nodes, e.g. !(a <= b) → a > b (only when unsafe_comps), attempts to negate binary nodes, e.g. a = !b && !c && !d && !e → a=!(b||c||d||e) etc.",
                    "type": "boolean",
                    "default": true
                },
                "computed_props": {
                    "description": "Transforms constant computed properties into regular ones: {[\"computed\"]: 1} is converted to {computed: 1}.",
                    "type": "boolean",
                    "default": true
                },
                "conditionals": {
                    "description": "Apply optimizations for if-s and conditional expressions.",
                    "type": "boolean",
                    "default": true
                },
                "dead_code": {
                    "description": "Remove unreachable code.",
                    "type": "boolean",
                    "default": true
                },
                "defaults": {
                    "description": "Pass false to disable most default enabled compress transforms. Useful when you only want to enable a few compress options while disabling the rest.",
                    "type": "boolean",
                    "default": true
                },
                "directives": {
                    "description": "Remove redundant or non-standard directives.",
                    "type": "boolean",
                    "default": true
                },
                "drop_console": {
                    "description": "Pass true to discard calls to console.* functions. If you wish to drop a specific function call such as console.info and/or retain side effects from function arguments after dropping the function call then use pure_funcs instead.",
                    "type": "boolean",
                    "default": false
                },
                "drop_debugger": {
                    "description": "Remove debugger; statements.",
                    "type": "boolean",
                    "default": true
                },
                "evaluate": {
                    "description": "Attempt to evaluate constant expressions.",
                    "type": "boolean",
                    "default": true
                },
                "expression": {
                    "description": "Pass true to preserve completion values from terminal statements without return, e.g. in bookmarklets.",
                    "type": "boolean",
                    "default": false
                },
                "hoist_funs": {
                    "description": "Hoist function declarations.",
                    "type": "boolean",
                    "default": false
                },
                "hoist_props": {
                    "description": "Hoist properties from constant object and array literals into regular variables subject to a set of constraints. For example: var o={p:1, q:2}; f(o.p, o.q); is converted to f(1, 2);. Note: hoist_props works best with mangle enabled, the compress option passes set to 2 or higher, and the compress option toplevel enabled.",
                    "type": "boolean",
                    "default": true
                },
                "hoist_vars": {
                    "description": "Hoist var declarations (this is false by default because it seems to increase the size of the output in general).",
                    "type": "boolean",
                    "default": false
                },
                "if_return": {
                    "description": "Optimizations for if/return and if/continue.",
                    "type": "boolean",
                    "default": true
                },
                "join_vars": {
                    "description": "Join consecutive var statements.",
                    "type": "boolean",
                    "default": true
                },
                "keep_fargs": {
                    "description": "Prevents the compressor from discarding unused function arguments. You need this for code which relies on Function.length.",
                    "type": "boolean",
                    "default": true
                },
                "keep_infinity": {
                    "description": "Pass true to prevent Infinity from being compressed into 1/0, which may cause performance issues on Chrome.",
                    "type": "boolean",
                    "default": false
                },
                "loops": {
                    "description": "Optimizations for do, while and for loops when we can statically determine the condition.",
                    "type": "boolean",
                    "default": true
                },
                "module": {
                    "description": "Pass true when compressing an ES6 module. Strict mode is implied and the toplevel option as well.",
                    "type": "boolean",
                    "default": false
                },
                "negate_iife": {
                    "description": "Negate \"Immediately-Called Function Expressions\" where the return value is discarded, to avoid the parens that the code generator would insert.",
                    "type": "boolean",
                    "default": true
                },
                "properties": {
                    "description": "Rewrite property access using the dot notation, for example foo[\"bar\"] → foo.bar.",
                    "type": "boolean",
                    "default": true
                },
                "reduce_vars": {
                    "description": "Improve optimization on variables assigned with and used as constant values.",
                    "type": "boolean",
                    "default": true
                },
                "sequences": {
                    "description": "Join consecutive simple statements using the comma operator. May be set to a positive integer to specify the maximum number of consecutive comma sequences that will be generated. If this option is set to true then the default sequences limit is 200. Set option to false or 0 to disable. The smallest sequences length is 2. A sequences value of 1 is grandfathered to be equivalent to true and as such means 200. On rare occasions the default sequences limit leads to very slow compress times in which case a value of 20 or less is recommended.",
                    "type": "boolean",
                    "default": true
                },
                "side_effects": {
                    "description": "Pass false to disable potentially dropping function calls marked as \"pure\". A function call is marked as \"pure\" if a comment annotation /*@__PURE__*/ or /*#__PURE__*/ immediately precedes the call. For example: /*@__PURE__*/foo();.",
                    "type": "boolean",
                    "default": true
                },
                "switches": {
                    "description": "De-duplicate and remove unreachable switch branches.",
                    "type": "boolean",
                    "default": true
                },
                "typeofs": {
                    "description": "Transforms typeof foo == \"undefined\" into foo === void 0. Note: recommend to set this value to false for IE10 and earlier versions due to known issues.",
                    "type": "boolean",
                    "default": true
                },
                "unsafe": {
                    "description": "Apply \"unsafe\" transformations (https://www.npmjs.com/package/terser#the-unsafe-compress-option).",
                    "type": "boolean",
                    "default": false
                },
                "unsafe_arrows": {
                    "description": "Convert ES5 style anonymous function expressions to arrow functions if the function body does not reference this. Note: it is not always safe to perform this conversion if code relies on the the function having a prototype, which arrow functions lack. This transform requires that the ecma compress option is set to 6 or greater.",
                    "type": "boolean",
                    "default": false
                },
                "unsafe_comps": {
                    "description": "Reverse < and <= to > and >= to allow improved compression. This might be unsafe when an at least one of two operands is an object with computed values due the use of methods like get, or valueOf. This could cause change in execution order after operands in the comparison are switching. Compression only works if both comparisons and unsafe_comps are both set to true.",
                    "type": "boolean",
                    "default": false
                },
                "unsafe_Function": {
                    "description": "Compress and mangle Function(args, code) when both args and code are string literals.",
                    "type": "boolean",
                    "default": false
                },
                "unsafe_math": {
                    "description": "Optimize numerical expressions like 2 * x * 3 into 6 * x, which may give imprecise floating point results.",
                    "type": "boolean",
                    "default": false
                },
                "unsafe_methods": {
                    "description": "Converts { m: function(){} } to { m(){} }. ecma must be set to 6 or greater to enable this transform. If unsafe_methods is a RegExp then key/value pairs with keys matching the RegExp will be converted to concise methods. Note: if enabled there is a risk of getting a \"<method name> is not a constructor\" TypeError should any code try to new the former function.",
                    "type": "boolean",
                    "default": false
                },
                "unsafe_proto": {
                    "description": "Optimize expressions like Array.prototype.slice.call(a) into [].slice.call(a).",
                    "type": "boolean",
                    "default": false
                },
                "unsafe_regexp": {
                    "description": "Enable substitutions of variables with RegExp values the same way as if they are constants.",
                    "type": "boolean",
                    "default": false
                },
                "unsafe_undefined": {
                    "description": "Substitute void 0 if there is a variable named undefined in scope (variable name will be mangled, typically reduced to a single character).",
                    "type": "boolean",
                    "default": false
                },
                "warnings": {
                    "description": "Display warnings when dropping unreachable code or unused declarations etc.",
                    "type": "boolean",
                    "default": false
                },
                "ecma": {
                    "description": "Pass 6 or greater to enable compress options that will transform ES5 code into smaller ES6+ equivalent forms.",
                    "type": "number",
                    "default": 5,
                    "enum": [
                        5,
                        6,
                        7,
                        8
                    ]
                },
                "global_defs": {
                    "description": "See https://www.npmjs.com/package/terser#conditional-compilation.",
                    "type": "object",
                    "default": {}
                },
                "inline": {
                    "description": "inline calls to function with simple/return statement:\n0 -- disabled inlining\n1 -- inline simple functions\n2 -- inline functions with arguments\n3 -- inline functions with arguments and variables",
                    "type": "number",
                    "enum": [
                        0,
                        1,
                        2,
                        3
                    ]
                },
                "keep_classnames": {
                    "description": "Pass true to prevent the compressor from discarding class names. Pass a regular expression to only keep class names matching that regex. See also: the keep_classnames mangle option.",
                    "default": false,
                    "oneOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "string"
                        }
                    ]
                },
                "keep_fnames": {
                    "description": "Pass true to prevent the compressor from discarding function names. Pass a regular expression to only keep function names matching that regex. Useful for code relying on Function.prototype.name. See also: the keep_fnames mangle option.",
                    "default": false,
                    "oneOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "string"
                        }
                    ]
                },
                "passes": {
                    "description": "The maximum number of times to run compress. In some cases more than one pass leads to further compressed code. Keep in mind more passes will take more time.",
                    "type": "number",
                    "default": 1
                },
                "pure_funcs": {
                    "description": "You can pass an array of names and Terser will assume that those functions do not produce side effects. DANGER: will not check if the name is redefined in scope. An example case here, for instance var q = Math.floor(a/b). If variable q is not used elsewhere, Terser will drop it, but will still keep the Math.floor(a/b), not knowing what it does. You can pass pure_funcs: [ 'Math.floor' ] to let it know that this function won't produce any side effect, in which case the whole statement would get discarded. The current implementation adds some overhead (compression will be slower).",
                    "type": "array",
                    "default": null,
                    "uniqueItems": true,
                    "contains": {
                        "type": "string",
                        "default": []
                    }
                },
                "toplevel": {
                    "description": "Drop unreferenced functions (\"funcs\") and/or variables (\"vars\") in the top level scope (false by default, true to drop both unreferenced functions and variables).",
                    "default": false,
                    "enum": [
                        true,
                        false,
                        "funcs",
                        "vars"
                    ]
                },
                "top_retain": {
                    "description": "Prevent specific toplevel functions and variables from unused removal (can be array, comma-separated, RegExp or function. Implies toplevel).",
                    "default": null,
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "array",
                            "uniqueItems": true,
                            "contains": {
                                "type": "string"
                            }
                        }
                    ]
                },
                "pure_getters": {
                    "description": "If you pass true for this, Terser will assume that object property access (e.g. foo.bar or foo[\"bar\"]) doesn't have any side effects. Specify \"strict\" to treat foo.bar as side-effect-free only when foo is certain to not throw, i.e. not null or undefined.",
                    "default": "strict",
                    "enum": [
                        true,
                        false,
                        "strict"
                    ]
                },
                "unused": {
                    "description": "Drop unreferenced functions and variables (simple direct variable assignments do not count as references unless set to \"keep_assign\").",
                    "default": true,
                    "enum": [
                        true,
                        false,
                        "keep_assign"
                    ]
                }
            }
        },
        "mangle": {
            "description": "Mangle options.",
            "default": true,
            "oneOf": [
                {
                    "type": "boolean"
                },
                {
                    "type": "object",
                    "properties": {
                        "eval": {
                            "description": "Pass true to mangle names visible in scopes where eval or with are used.",
                            "type": "boolean",
                            "default": false
                        },
                        "keep_classnames": {
                            "description": "Pass true to not mangle class names. Pass a regular expression to only keep class names matching that regex. See also: https://www.npmjs.com/package/terser#compress-options.",
                            "type": "boolean",
                            "default": false
                        },
                        "keep_fnames": {
                            "description": "Pass true to not mangle function names. Pass a regular expression to only keep class names matching that regex. Useful for code relying on Function.prototype.name. See also: https://www.npmjs.com/package/terser#compress-options.",
                            "type": "boolean",
                            "default": false
                        },
                        "module": {
                            "description": "Pass true an ES6 modules, where the toplevel scope is not the global scope. Implies toplevel.",
                            "type": "boolean",
                            "default": false
                        },
                        "reserved": {
                            "description": " Pass an array of identifiers that should be excluded from mangling. Example: [\"foo\", \"bar\"].",
                            "type": "array",
                            "default": [],
                            "uniqueItems": true,
                            "contains": {
                                "type": "string"
                            }
                        },
                        "toplevel": {
                            "description": "Pass true to mangle names declared in the top level scope.",
                            "type": "boolean",
                            "default": false
                        },
                        "safari10": {
                            "description": "Pass true to work around the Safari 10 loop iterator bug \"Cannot declare a let variable twice\". See also: https://www.npmjs.com/package/terser#output-options.",
                            "type": "boolean",
                            "default": false
                        },
                        "properties": {
                            "description": "Mangle property options.",
                            "type": "object",
                            "properties": {
                                "builtins": {
                                    "description": "Use true to allow the mangling of builtin DOM properties. Not recommended to override this setting.",
                                    "type": "boolean",
                                    "default": false
                                },
                                "debug": {
                                    "description": "Mangle names with the original name still present. Pass an empty string \"\" to enable, or a non-empty string to set the debug suffix.",
                                    "default": false,
                                    "oneOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "boolean"
                                        }
                                    ]
                                },
                                "keep_quoted": {
                                    "description": "Only mangle unquoted property names. true -- Quoted property names are automatically reserved and any unquoted property names will not be mangled. \"strict\" -- Advanced, all unquoted property names are mangled unless explicitly reserved.",
                                    "default": false,
                                    "enum": [
                                        true,
                                        false,
                                        "strict"
                                    ]
                                },
                                "regex": {
                                    "description": "Pass a RegExp literal or pattern string to only mangle property matching the regular expression. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
                                    "type": "string",
                                    "default": null
                                },
                                "reserved": {
                                    "description": "Do not mangle property names listed in the reserved array.",
                                    "type": "array",
                                    "default": [],
                                    "uniqueItems": true,
                                    "contains": {
                                        "type": "string"
                                    }
                                },
                                "undeclared": {
                                    "description": "Mangle those names when they are accessed as properties of known top level variables but their declarations are never found in input code. May be useful when only minifying parts of a project. See https://github.com/terser/terser/issues/397 for more details.",
                                    "type": "boolean",
                                    "default": false
                                }
                            }
                        }
                    }
                }
            ]
        },
        "output": {
            "description": "Output options.",
            "type": "object",
            "default": {},
            "properties": {
                "ascii_only": {
                    "description": "Escape Unicode characters in strings and regexps (affects directives with non-ascii characters becoming invalid).",
                    "type": "boolean",
                    "default": false
                },
                "beautify": {
                    "description": "Whether to actually beautify the output. Passing -b will set this to true, but you might need to pass -b even when you want to generate minified code, in order to specify additional arguments, so you can use -b beautify=false to override it.",
                    "type": "boolean",
                    "default": true
                },
                "braces": {
                    "description": "Always insert braces in if, for, do, while or with statements, even if their body is a single statement.",
                    "type": "boolean",
                    "default": false
                },
                "comments": {
                    "description": "Pass true or \"all\" to preserve all comments, \"some\" to preserve some comments, a regular expression string (e.g. /^!/) or a function.",
                    "default": false,
                    "oneOf": [
                        {
                            "enum": [
                                "some",
                                "all"
                            ]
                        },
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "string"
                        }
                    ]
                },
                "ecma": {
                    "description": "Set output printing mode. Set ecma to 6 or greater to emit shorthand object properties - i.e.: {a} instead of {a: a}. The ecma option will only change the output in direct control of the beautifier. Non-compatible features in the abstract syntax tree will still be output as is. For example: an ecma setting of 5 will not convert ES6+ code to ES5.",
                    "type": "number",
                    "default": 5,
                    "enum": [
                        5,
                        6,
                        7,
                        8
                    ]
                },
                "indent_level": {
                    "description": "The amount of spaces to every indent should be.",
                    "type": "number",
                    "default": 4
                },
                "indent_start": {
                    "description": "Prefix all lines by that many spaces.",
                    "type": "number",
                    "default": 0
                },
                "inline_script": {
                    "description": "Escape HTML comments and the slash in occurrences of </script> in strings.",
                    "type": "boolean",
                    "default": true
                },
                "keep_quoted_props": {
                    "description": "When turned on, prevents stripping quotes from property names in object literals.",
                    "type": "boolean",
                    "default": false
                },
                "max_line_len": {
                    "description": "Maximum line length (for minified code).",
                    "default": false,
                    "oneOf": [
                        {
                            "type": "boolean",
                            "enum": [false]
                        },
                        {
                            "type": "number"
                        }
                    ]
                },
                "preamble": {
                    "description": "When passed it must be a string and it will be prepended to the output literally. The source map will adjust for this text. Can be used to insert a comment containing licensing information, for example.",
                    "type": "string",
                    "default": null
                },
                "quote_keys": {
                    "description": "Pass true to quote all keys in literal objects.",
                    "type": "boolean",
                    "default": false
                },
                "quote_style": {
                    "description": "preferred quote style for strings (affects quoted property names and directives as well):\n0 -- prefers double quotes, switches to single quotes when there are more double quotes in the string itself. 0 is best for gzip size.\n1 -- always use single quotes\n2 -- always use double quotes\n3 -- always use the original quotes",
                    "type": "number",
                    "default": 0,
                    "enum": [
                        0,
                        1,
                        2,
                        3
                    ]
                },
                "safari10": {
                    "description": "Set this option to true to work around the Safari 10/11 await bug https://bugs.webkit.org/show_bug.cgi?id=176685. See also: https://www.npmjs.com/package/terser#mangle-options.",
                    "type": "boolean",
                    "default": false
                },
                "semicolons": {
                    "description": "Separate statements with semicolons. If you pass false then whenever possible we will use a newline instead of a semicolon, leading to more readable output of minified code (size before gzip could be smaller; size after gzip insignificantly larger).",
                    "type": "boolean",
                    "default": true
                },
                "shebang": {
                    "description": "Preserve shebang #! in preamble (bash scripts).",
                    "type": "boolean",
                    "default": true
                },
                "webkit": {
                    "description": "Enable workarounds for WebKit bugs. PhantomJS users should set this option to true.",
                    "type": "boolean",
                    "default": false
                },
                "wrap_iife": {
                    "description": "Pass true to wrap immediately invoked function expressions. See https://github.com/mishoo/UglifyJS2/issues/640 for more details.",
                    "type": "boolean",
                    "default": false
                },
                "wrap_func_args": {
                    "description": "pass false if you do not want to wrap function expressions that are passed as arguments, in parenthesis. See https://github.com/nolanlawson/optimize-js for more details.",
                    "type": "boolean",
                    "default": true
                }
            }
        },
        "ecma": {
            "description": "Pass 5, 6, 7 or 8 to override parse, compress and output's ecma options.",
            "type": "number",
            "enum": [
                5,
                6,
                7,
                8
            ]
        },
        "keep_classnames": {
            "description": "Pass true to prevent discarding or mangling of class names. Pass a regular expression to only keep class names matching that regex.",
            "default": false,
            "oneOf": [
                {
                    "type": "boolean"
                },
                {
                    "type": "string"
                }
            ]
        },
        "keep_fnames": {
            "description": "Pass true to prevent discarding or mangling of function names. Pass a regular expression to only keep class names matching that regex. Useful for code relying on Function.prototype.name. If the top level minify option keep_classnames is undefined it will be overridden with the value of the top level minify option keep_fnames.",
            "default": false,
            "oneOf": [
                {
                    "type": "boolean"
                },
                {
                    "type": "string"
                }
            ]
        },
        "ie8": {
            "description": "Set to true to support IE8.",
            "type": "boolean",
            "default": false
        },
        "module": {
            "description": " Use when minifying an ES6 module. \"use strict\" is implied and names can be mangled on the top scope. If compress or mangle is enabled then the toplevel option will be enabled.",
            "type": "boolean",
            "default": false
        },
        "safari10": {
            "description": "Pass true to work around Safari 10/11 bugs in loop scoping and await. See safari10 options in mangle and output for details.",
            "type": "boolean",
            "default": false
        },
        "toplevel": {
            "description": "Set to true if you wish to enable top level variable and function name mangling and to drop unused variables and functions.",
            "type": "boolean",
            "default": false
        },
        "warnings": {
            "description": "Pass true to return compressor warnings in result.warnings. Use the value \"verbose\" for more detailed warnings.",
            "default": false,
            "oneOf": [
                {
                    "type": "boolean"
                },
                {
                    "type": "string",
                    "enum": [
                        "verbose"
                    ]
                }
            ]
        },
        "sourceMap": {
            "description": "Source map options",
            "default": false,
            "oneOf": [
                {
                    "type": "object",
                    "properties": {
                        "includeSources": {
                            "description": "Inlude source in source map.",
                            "type": "boolean",
                            "default": false
                        },
                        "root": {
                            "description": "",
                            "type": "string"
                        },
                        "url": {
                            "description": "",
                            "type": "string",
                            "enum": [
                                "inline"
                            ]
                        }
                    }
                },
                {
                    "type": "boolean"
                }
            ]

        }
    }
}
