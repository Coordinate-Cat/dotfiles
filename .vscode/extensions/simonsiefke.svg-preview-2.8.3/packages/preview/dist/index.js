const $root=document.documentElement,$element=document.body;let domMatrix=new DOMMatrix;const applyTransform=()=>{$element.style.transform=`${domMatrix}`},usePan=({initialPointerOffset={x:0,y:0},onPointerOffsetChange=()=>{}}={})=>{const pointerOffset=initialPointerOffset;domMatrix.e=pointerOffset.x,domMatrix.f=pointerOffset.y,applyTransform();let isPointerDown=0;const onPointerDown=event=>{0===event.button&&(isPointerDown=1,pointerOffset.x=event.clientX,pointerOffset.y=event.clientY)},move=({x=0,y=0})=>{domMatrix.e+=x,domMatrix.f+=y,applyTransform()},onPointerMove=event=>{isPointerDown&&(move({x:event.clientX-pointerOffset.x,y:event.clientY-pointerOffset.y}),pointerOffset.x=event.clientX,pointerOffset.y=event.clientY)},onPointerUp=event=>{isPointerDown&&(isPointerDown=0,pointerOffset.x+=event.clientX-pointerOffset.x,pointerOffset.y+=event.clientY-pointerOffset.y,onPointerOffsetChange({x:domMatrix.e,y:domMatrix.f}))};let animationFrame,moving=0,arrowLeftDown=0,arrowRightDown=0,arrowUpDown=0,arrowDownDown=0;const startMoving=()=>{const speed=Math.ceil(window.innerWidth/200);let x=0,y=0;arrowLeftDown&&!arrowRightDown?x=-speed:!arrowLeftDown&&arrowRightDown&&(x=speed),arrowUpDown&&!arrowDownDown?y=-speed:!arrowUpDown&&arrowDownDown&&(y=speed),move({x,y}),animationFrame=requestAnimationFrame(startMoving)},onKeyDown=event=>{switch(event.key){case"ArrowLeft":arrowLeftDown=1,moving||(moving=1,startMoving());break;case"ArrowUp":arrowUpDown=1,moving||(moving=1,startMoving());break;case"ArrowRight":arrowRightDown=1,moving||(moving=1,startMoving());break;case"ArrowDown":arrowDownDown=1,moving||(moving=1,startMoving())}},onKeyUp=event=>{switch(event.key){case"ArrowLeft":arrowLeftDown=0;break;case"ArrowUp":arrowUpDown=0;break;case"ArrowRight":arrowRightDown=0;break;case"ArrowDown":arrowDownDown=0}[arrowLeftDown,arrowUpDown,arrowRightDown,arrowDownDown].every(keyDown=>!keyDown)&&(cancelAnimationFrame(animationFrame),moving=0)};return $root.addEventListener("pointerdown",onPointerDown),$root.addEventListener("pointerup",onPointerUp),$root.addEventListener("pointerleave",onPointerUp),$root.addEventListener("pointermove",onPointerMove),$root.addEventListener("keydown",onKeyDown),$root.addEventListener("keyup",onKeyUp),()=>{$root.removeEventListener("pointerdown",onPointerDown),$root.removeEventListener("pointerup",onPointerUp),$root.removeEventListener("pointerleave",onPointerUp),$root.removeEventListener("pointermove",onPointerMove),$root.removeEventListener("keydown",onKeyDown),$root.removeEventListener("keyup",onKeyUp)}},vscode=acquireVsCodeApi(),{port}=document.body.dataset,state=vscode.getState()||{},$image=document.querySelector("img");let moved=Boolean(state.pointerOffset||state.zoom);$image.addEventListener("load",()=>{state.error&&(state.error=void 0,invalidateState(),vscode.postMessage({command:"setError",payload:void 0}))}),$image.addEventListener("error",()=>{state.error||(state.error="invalid image",invalidateState(),vscode.postMessage({command:"setError",payload:"invalid image"}))});const $style=document.querySelector("#custom-style"),invalidateState=()=>{vscode.setState(state)},invalidateContent=()=>{console.log("invalidate content"),invalidateScaleToFit();const svgVariablesInlineStyle=[...Object.entries(state.style&&state.style.html||{}),...Object.entries(state.style&&state.style.img||{})].filter(([key])=>key.startsWith("--")).map(([key,value])=>`${key}:${value};`).join("");console.log(svgVariablesInlineStyle);let contentWithCustomStyle=state.content;contentWithCustomStyle.includes('style="')?contentWithCustomStyle=contentWithCustomStyle.replace('style="',`style="${svgVariablesInlineStyle}`):contentWithCustomStyle.includes("style='")?contentWithCustomStyle=contentWithCustomStyle.replace("style='",`style='${svgVariablesInlineStyle}`):contentWithCustomStyle.includes("<svg")&&(contentWithCustomStyle=state.content.replace("<svg",`<svg style="${svgVariablesInlineStyle}"`));const encodedImage=encodeURIComponent(contentWithCustomStyle);$image.setAttribute("src",`data:image/svg+xml,${encodedImage}`)};let cleanUpPan;const invalidatePan=()=>{cleanUpPan&&cleanUpPan(),cleanUpPan=usePan({initialPointerOffset:state.pointerOffset,onPointerOffsetChange(pointerOffset){state.pointerOffset=pointerOffset,invalidateState(),moved||(moved=1,state.fixedSize={width:parseInt(window.getComputedStyle($image).width,10),height:parseInt(window.getComputedStyle($image).height,10)},invalidateScaleToFit())}})};let cleanUpZoom;invalidatePan();const invalidateZoom=()=>{cleanUpZoom&&cleanUpZoom(),cleanUpZoom=(({initialZoom=1,onZoomChange=()=>{}}={})=>{let zoom=initialZoom;domMatrix.a=zoom,domMatrix.d=zoom,applyTransform();const handleWheel=event=>{if(0===event.deltaY)return;const direction=event.deltaY<0?"up":"down",normalizedDeltaY=1+Math.abs(event.deltaY)/200,currentZoomFactor="up"===direction?normalizedDeltaY:1/normalizedDeltaY,previousZoom=zoom;zoom*=currentZoomFactor,zoom>32768&&(zoom=previousZoom),zoom<.1&&(zoom=previousZoom),zoom!==previousZoom&&(domMatrix=(new DOMMatrix).translateSelf(event.clientX,event.clientY).scaleSelf(currentZoomFactor).translateSelf(-event.clientX,-event.clientY).multiplySelf(domMatrix),onZoomChange(zoom,{x:domMatrix.e,y:domMatrix.f}),applyTransform())};return $root.addEventListener("wheel",handleWheel,{passive:1}),()=>{$root.removeEventListener("wheel",handleWheel)}})({initialZoom:state.zoom,onZoomChange(zoom,pointerOffset){state.zoom=zoom,state.pointerOffset=pointerOffset,invalidateState(),moved||(moved=1,state.fixedSize={width:parseInt(window.getComputedStyle($image).width,10),height:parseInt(window.getComputedStyle($image).height,10)},invalidateScaleToFit())}})};invalidateZoom();const invalidateStyle=()=>{state.style&&($style.textContent=(styleObject=>{let style="";for(const[selector,value]of Object.entries(styleObject)){style=`${style}${selector}{${Object.entries(value).reduce((styleString,[propName,propValue])=>`${styleString}${propName}:${propValue};`,"")}}`}return style})(state.style))};invalidateStyle();const invalidateScaleToFit=()=>{if(state.scaleToFit&&!moved)$image.style.height="",$image.style.width="100vmin";else{if(state.fixedSize)return $image.style.width=`${state.fixedSize.width}px`,$image.style.height=`${state.fixedSize.height}px`,void($image.style.maxWidth="none");const $svg=(new DOMParser).parseFromString(state.content,"image/svg+xml").querySelector("svg");if(!$svg)return;let newWidth=$svg.width.baseVal.valueAsString;1===$svg.width.baseVal.unitType&&(newWidth+="px");let newHeight=$svg.height.baseVal.valueAsString;if(1===$svg.height.baseVal.unitType&&(newHeight+="px"),$svg.getAttribute("width")&&$svg.getAttribute("height"))$image.style.width=newWidth,$image.style.height=newHeight;else if($svg.getAttribute("width")&&!$svg.getAttribute("height"))$image.style.width=newWidth,$image.style.height="";else if(!$svg.getAttribute("width")&&$svg.getAttribute("height"))$image.style.width="",$image.style.height=newHeight;else{const{width,height}=$svg.viewBox.baseVal;$image.style.width=`${width}px`,$image.style.height=`${height}px`,state.fixedSize={width,height},invalidateState()}}};new WebSocket(`ws://localhost:${port}`).addEventListener("message",event=>{const messages=JSON.parse(event.data);let invalidScaleToFit=0,invalidPan=0,invalidState=0,invalidContent=0,invalidStyle=0,invalidZoom=0;for(const message of messages)switch(message.command){case"update.pan":state.pointerOffset=void 0,state.fixedSize=void 0,moved=0,invalidScaleToFit=1,invalidPan=1,invalidState=1;break;case"update.zoom":state.zoom=void 0,state.fixedSize=void 0,moved=0,invalidScaleToFit=1,invalidZoom=1,invalidState=1;break;case"update.fsPath":state.fsPath=message.payload,invalidState=1;break;case"update.content":state.content=message.payload,invalidContent=1,invalidState=1;break;case"update.style":state.style=message.payload,invalidStyle=1,invalidState=1;break;case"update.scaleToFit":state.scaleToFit=message.payload,invalidScaleToFit=1,invalidState=1;break;default:throw new Error(`unknown command ${message.command}`)}invalidPan&&invalidatePan(),invalidScaleToFit&&invalidateScaleToFit(),invalidZoom&&invalidateZoom(),invalidContent&&invalidateContent(),invalidStyle&&(invalidateStyle(),invalidateContent()),invalidState&&invalidateState()});
//# sourceMappingURL=index.js.map
