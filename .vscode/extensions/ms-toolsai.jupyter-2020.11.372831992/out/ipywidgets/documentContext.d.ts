import { IClientSession } from '@jupyterlab/apputils';
import { DocumentRegistry } from '@jupyterlab/docregistry';
import { INotebookModel } from '@jupyterlab/notebook/lib';
import { IRenderMime } from '@jupyterlab/rendermime';
import { Contents, Kernel, KernelMessage, Session } from '@jupyterlab/services';
import { Widget } from '@phosphor/widgets';
import { Signal } from './signal';
export declare class DocumentContext implements DocumentRegistry.IContext<INotebookModel>, IClientSession {
    kernel: Kernel.IKernelConnection;
    pathChanged: Signal<this, string>;
    fileChanged: Signal<this, Contents.IModel>;
    saveState: Signal<this, DocumentRegistry.SaveState>;
    disposed: Signal<this, void>;
    model: INotebookModel;
    session: IClientSession;
    path: string;
    localPath: string;
    contentsModel: Contents.IModel;
    urlResolver: IRenderMime.IResolver;
    isReady: boolean;
    ready: Promise<void>;
    isDisposed: boolean;
    terminated: Signal<this, void>;
    kernelChanged: Signal<this, Session.IKernelChangedArgs>;
    statusChanged: Signal<this, Kernel.Status>;
    iopubMessage: Signal<this, KernelMessage.IMessage<KernelMessage.MessageType>>;
    unhandledMessage: Signal<this, KernelMessage.IMessage<KernelMessage.MessageType>>;
    propertyChanged: Signal<this, "name" | "path" | "type">;
    name: string;
    type: string;
    status: Kernel.Status;
    kernelPreference: IClientSession.IKernelPreference;
    kernelDisplayName: string;
    constructor(kernel: Kernel.IKernelConnection);
    changeKernel(_options: Partial<Kernel.IModel>): Promise<Kernel.IKernelConnection>;
    shutdown(): Promise<void>;
    selectKernel(): Promise<void>;
    restart(): Promise<boolean>;
    setPath(_path: string): Promise<void>;
    setName(_name: string): Promise<void>;
    setType(_type: string): Promise<void>;
    addSibling(_widget: Widget, _options?: any): any;
    save(): Promise<void>;
    saveAs(): Promise<void>;
    revert(): Promise<void>;
    createCheckpoint(): Promise<import('@jupyterlab/services').Contents.ICheckpointModel>;
    deleteCheckpoint(_checkpointID: string): Promise<void>;
    restoreCheckpoint(_checkpointID?: string): Promise<void>;
    listCheckpoints(): Promise<import('@jupyterlab/services').Contents.ICheckpointModel[]>;
    dispose(): void;
}
