{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/datascience-ui/native-editor/nativeEditor.less?da64","webpack:///./src/datascience-ui/react-common/constants.ts","webpack:///./src/datascience-ui/native-editor/addCellLine.tsx","webpack:///./src/datascience-ui/native-editor/redux/actions.ts","webpack:///./src/datascience-ui/native-editor/nativeCell.tsx","webpack:///./src/datascience-ui/native-editor/toolbar.tsx","webpack:///./src/datascience-ui/native-editor/nativeEditor.tsx","webpack:///./src/datascience-ui/native-editor/redux/reducers/effects.ts","webpack:///./src/datascience-ui/native-editor/redux/reducers/execution.ts","webpack:///./src/datascience-ui/native-editor/redux/reducers/movement.ts","webpack:///./src/datascience-ui/native-editor/redux/reducers/creation.ts","webpack:///./src/datascience-ui/native-editor/redux/reducers/index.ts","webpack:///./src/datascience-ui/native-editor/index.tsx","webpack:///./src/datascience-ui/native-editor/redux/store.ts","webpack:///external \"log4js\"","webpack:///./src/datascience-ui/native-editor/nativeEditor.less"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","exports","module","l","__esModule","undefined","default","headers","common","Accept","adapter","transformRequest","transformResponse","e","promises","installedChunkData","promise","Promise","resolve","reject","onScriptComplete","script","document","createElement","charset","timeout","nc","setAttribute","src","p","jsonpScriptSrc","error","Error","event","onerror","onload","clearTimeout","chunk","errorType","type","realSrc","target","message","name","request","setTimeout","head","appendChild","all","m","c","d","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","ns","create","key","bind","n","object","property","oe","err","console","jsonpArray","window","oldJsonpFunction","slice","content","options","transform","locals","getOSType","navigator","platform","startsWith","OSX","Windows","userAgent","indexOf","Linux","Unknown","props","render","className","this","tooltip","plus","includePlus","baseTheme","class","image","InsertBelow","disabled","isNotebookTrusted","innerFilter","role","title","onClick","click","createIncomingActionWithPayload","payload","messageDirection","createIncomingAction","CssConstants","actionCreators","addCell","ADD_AND_FOCUS_NEW_CELL","newCellId","insertAboveFirst","INSERT_ABOVE_FIRST_AND_FOCUS_NEW_CELL","insertAbove","cellId","INSERT_ABOVE_AND_FOCUS_NEW_CELL","insertBelow","INSERT_BELOW_AND_FOCUS_NEW_CELL","executeCell","moveOp","EXECUTE_CELL_AND_ADVANCE","focusCell","cursorPos","Current","FOCUS_CELL","unfocusCell","code","UNFOCUS_CELL","selectCell","SELECT_CELL","executeAllCells","EXECUTE_ALL_CELLS","executeAbove","EXECUTE_ABOVE","executeCellAndBelow","EXECUTE_CELL_AND_BELOW","toggleVariableExplorer","TOGGLE_VARIABLE_EXPLORER","setVariableExplorerHeight","containerHeight","gridHeight","SET_VARIABLE_EXPLORER_HEIGHT","restartKernel","RESTART_KERNEL","interruptKernel","INTERRUPT_KERNEL","clearAllOutputs","ClearAllOutputs","export","EXPORT","exportAs","EXPORT_NOTEBOOK_AS","save","SAVE","showDataViewer","variable","columnSize","SHOW_DATA_VIEWER","sendCommand","command","SEND_COMMAND","moveCellUp","MOVE_CELL_UP","moveCellDown","MOVE_CELL_DOWN","changeCellType","CHANGE_CELL_TYPE","toggleLineNumbers","TOGGLE_LINE_NUMBERS","toggleOutput","TOGGLE_OUTPUT","deleteCell","DELETE_CELL","undo","Undo","redo","Redo","arrowUp","ARROW_UP","arrowDown","ARROW_DOWN","editCell","EDIT_CELL","version","versionId","modelId","model","id","forward","reverse","getValue","linkClick","href","LINK_CLICK","showPlot","imageHtml","ShowPlot","editorLoaded","EDITOR_LOADED","codeCreated","CODE_CREATED","loadedAllCells","LOADED_ALL_CELLS","editorUnmounted","UNMOUNT","selectKernel","SelectKernel","selectServer","SELECT_SERVER","launchNotebookTrustPrompt","LAUNCH_NOTEBOOK_TRUST_PROMPT","openSettings","setting","OPEN_SETTINGS","getVariableData","newExecutionCount","refreshCount","startIndex","pageSize","GET_VARIABLE_DATA","executionCount","sortColumn","sortAscending","widgetFailed","ex","IPYWIDGET_RENDER_FAILURE","runByLine","RUN_BY_LINE","continue","CONTINUE","step","STEP","runExternalCommand","buttonId","cell","ExecuteExternalCommand","CellOutputWrapper","CellOutputWrapperClass","ImageButtonClass","prop","inputRef","wrapperRef","getCell","cellVM","isCodeCell","cell_type","isMarkdownCell","isSelected","selected","isFocused","focused","onMouseClick","ev","nativeEvent","elem","allowClickPropagation","stopPropagation","lastKeyPressed","onMouseDoubleClick","shouldRenderCodeEditor","inputBlockShow","editable","shouldRenderMarkdownEditor","isShowingMarkdownEditor","EditCellId","hasOutput","state","finished","executing","getCodeCell","keyDownInput","shiftKey","ctrlKey","altKey","isCellNavigationKeyboardEvent","isFocusedWhenNotSuggesting","editorInfo","isSuggesting","isFirstLine","arrowUpFromCell","isLastLine","arrowDownFromCell","metaKey","escapeCell","preventDefault","ChangeToCode","ChangeToMarkdown","ToggleLineNumbers","ToggleOutput","shiftEnterCell","ctrlEnterCell","altEnterCell","enterCell","DeleteCell","InsertAbove","useCustomEditorApi","current","focus","Unfocus","getCurrentCode","ArrowUp","ArrowDown","runAndMove","RunAndMove","runAndAdd","RunAndAdd","submitCell","Run","addNewCell","AddToEnd","addNewCellBelow","renderNavbar","addButtonRender","lastCell","MoveCellUp","firstCell","Up","MoveCellDown","Down","renderAddDivider","checkOutput","shouldRenderOutput","renderMiddleToolbar","runCell","switchTooltip","otherCellType","otherCellTypeCommand","otherCellImage","SwitchToMarkdown","SwitchToCode","toolbarClassName","runningByLine","hidden","busy","RunByLine","Interrupt","supportsRunByLine","onMouseDown","Delete","renderExternalButtons","renderControls","init","execution_count","toString","isBusy","count","visible","renderInput","shouldRenderInput","editorOptions","glyphMargin","history","codeTheme","onCodeChange","onCodeCreated","testMode","showWatermark","ref","monacoTheme","openLink","editorMeasureClassName","onCodeFocused","unfocused","onCodeUnfocused","keyDown","showLineNumbers","font","disableUndoStack","codeVersion","focusPending","language","_code","_file","renderOutput","themeMatplotlibPlots","toolbar","expandImage","maxTextSize","enableScroll","onOuterKeyDown","focusInOutput","renderCollapseBar","input","classes","Array","isArray","outputs","uri","messages","renderNormalCell","componentDidUpdate","prevProps","giveFocus","shouldComponentUpdate","nextProps","getUnknownMimeTypeFormatString","contains","activeElement","scrollIntoView","behavior","block","inline","cellOuterClass","cellWrapperClass","tabIndex","onKeyDown","onDoubleClick","closest","hideOutput","getContents","source","buttons","externalButtons","forEach","button","index","running","statusToEnable","includes","codicon","Sync","Cancel","focusedElement","selectedInfo","selectionFocusedInfo","variableExplorerTooltip","variablesVisible","canRunAbove","selectedCellIndex","canRunBelow","cellCount","selectedCellId","canRestartAndInterruptKernel","kernel","jupyterServerStatus","NotStarted","RunAll","RunAbove","RunBelow","Restart","ClearAllOutput","ToggleVariableExplorer","VariableExplorer","Save","dirty","SaveAs","ExportToPython","SelectServer","shouldShowTrustMessage","ToolbarComponent","main","cellVMs","variables","variableState","ConnectedNativeCell","renderCount","waitingForLoadRender","mainPanelToolbarRef","getContentProps","submittedText","skipNextScroll","renderCell","scrollToBottom","scrollDiv","scrollBeyondLastLine","settings","extraSettings","editor","getVariableProps","toolbarHeight","offsetHeight","debugging","showDataExplorer","skipDefault","closeVariableExplorer","pageIn","pageInVariableData","fontSize","size","currentExecutionCount","supportsDebugging","variableOptions","enableDuringDebugger","mainKeyDown","focusedCellId","debuggingCell","find","cvm","Break","focusedCell","firstLine","lastLine","otherCellRunningByLine","maxOutputSize","enableScrollingForCellOutputs","allowUndo","undoStack","hasPythonExtension","_div","componentDidMount","addEventListener","forceUpdate","componentWillUnmount","removeEventListener","loaded","requestAnimationFrame","dynamicFont","fontFamily","family","progressBar","addCellLine","style","rootCss","buildSettingsCss","renderToolbarPanel","renderVariablePanel","renderContentPanel","variableProps","monacoReady","contentProps","Effects","arg","prevState","findIndex","selectionInfo","newVMs","newCell","asCellViewModel","deselectCell","removeFocusIndex","focusedCellIndex","addFocusIndex","shouldFocusCell","addIndex","someOtherCellWasFocusedAndSelected","updateSettings","newSettings","JSON","parse","newEditorOptions","newFontFamily","newFontSize","theme","vscodeThemeName","knownDark","computeKnownDark","GetCssRequest","isDark","GetMonacoThemeRequest","lineDecorationsWidth","cloneDeep","Execution","executeRange","cellIds","originalArg","cellIdsToExecute","orig","clonedCell","ReExecuteCells","executeResult","map","cellVm","executeCellAndAdvance","EXECUTE_CELL","INSERT_BELOW","executeSelectedCell","newList","postModelClearOutputs","newType","newNotebookCell","cells","redoStack","pushStack","continueExec","cv","Continue","Step","expectedExecutionCount","newVM","handleBreakState","currentStack","frames","handleContinue","startDebugging","stopDebugging","Movement","swapCells","first","firstCellId","second","secondCellId","temp","postModelSwap","Bottom","Top","Creation","prepareCellVM","hasBeenRun","newText","inputBlockOpen","vm","position","postModelInsert","insertExistingAbove","insertNewAbove","updateCell","updateOrAdd","deleteAllCells","inputBlockText","inputBlockCollapseNeeded","scrollCount","Design","postModelRemoveAll","applyCellEdit","changes","before","rangeOffset","after","rangeLength","text","postModelRemove","previousSelection","filter","nextOrPrev","loadAllCells","vms","loadTotal","addAndFocusCell","ADD_NEW_CELL","insertAboveAndFocusCell","INSERT_ABOVE","insertBelowAndFocusCell","insertAboveFirstAndFocusCell","INSERT_ABOVE_FIRST","startCell","finishCell","unmount","handleUpdate","disabledQueueArg","queueAction","kind","oldCells","cellBelow","handleUndoModel","codeCellAboveId","newCells","handleRedoModel","reducerMap","exportCells","showExportAsMenu","selectJupyterURI","started","LOAD_IPYWIDGET_CLASS_SUCCESS","handleLoadIPyWidgetClassSuccess","LOAD_IPYWIDGET_CLASS_FAILURE","handleLoadIPyWidgetClassFailure","IPYWIDGET_WIDGET_VERSION_NOT_SUPPORTED","notifyAboutUnsupportedWidgetVersions","StartCell","FinishCell","UpdateCellWithExecutionResults","NotebookDirty","notebookDirty","NotebookClean","notebookClean","LoadAllCells","TrustNotebookComplete","trustNotebook","NotebookRunAllCells","NotebookRunSelectedCell","NotebookAddCellBelow","DoSave","DeleteAllCells","StartProgress","startProgress","StopProgress","stopProgress","UpdateSettings","RestartKernel","handleRestarted","GetCssResponse","handleCss","MonacoReady","GetMonacoThemeResponse","monacoThemeChange","UpdateModel","UpdateKernel","updateStatus","LocInit","handleLocInit","UpdateDisplayData","handleUpdateDisplayData","ShowBreak","ShowContinue","StartDebugging","StopDebugging","UpdateExternalCellButtons","handleWebviewButtons","executeExternalCommand","postOffice","inTestMode","acquireVsCodeApi","ConnectedNativeEditor","store","widgetContainerId","getElementById","log4js"],"mappings":"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","file":"nativeEditor.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"nativeEditor\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// script path function\n \tfunction jsonpScriptSrc(chunkId) {\n \t\treturn __webpack_require__.p + \"\" + ({\"vendors~dataresource~geojson~modeldebug~nteract_transforms~nteract_transforms_vsdom\":\"vendors~dataresource~geojson~modeldebug~nteract_transforms~nteract_transforms_vsdom\",\"modeldebug\":\"modeldebug\",\"nteract_transforms_vsdom\":\"nteract_transforms_vsdom\",\"vendors~dataresource~vega\":\"vendors~dataresource~vega\",\"vendors~dataresource\":\"vendors~dataresource\",\"vendors~geojson\":\"vendors~geojson\",\"vendors~nteract_transforms\":\"vendors~nteract_transforms\",\"vendors~vega\":\"vendors~vega\",\"vega\":\"vega\",\"vendors~plotly\":\"vendors~plotly\"}[chunkId]||chunkId) + \".bundle.js\"\n \t}\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\t(function (module) {\n \t\t  if (module.exports\n \t\t    && !module.exports.__esModule\n \t\t    && module.exports.default === undefined\n \t\t  ) {\n \t\t    if (module.exports.headers\n \t\t      && module.exports.headers.common\n \t\t      && module.exports.headers.common.Accept\n \t\t      && module.exports.adapter\n \t\t      && module.exports.transformRequest\n \t\t      && module.exports.transformResponse\n \t\t    ) {\n \t\t      return;\n \t\t    }\n \t\t    module.exports.default = module.exports;\n \t\t  }\n \t\t})(module);\n \t\treturn module.exports;\n \t}\n\n \t// This file contains only the entry chunk.\n \t// The chunk loading function for additional chunks\n \t__webpack_require__.e = function requireEnsure(chunkId) {\n \t\tvar promises = [];\n\n\n \t\t// JSONP chunk loading for javascript\n\n \t\tvar installedChunkData = installedChunks[chunkId];\n \t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n \t\t\t// a Promise means \"currently loading\".\n \t\t\tif(installedChunkData) {\n \t\t\t\tpromises.push(installedChunkData[2]);\n \t\t\t} else {\n \t\t\t\t// setup Promise in chunk cache\n \t\t\t\tvar promise = new Promise(function(resolve, reject) {\n \t\t\t\t\tinstalledChunkData = installedChunks[chunkId] = [resolve, reject];\n \t\t\t\t});\n \t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n \t\t\t\t// start chunk loading\n \t\t\t\tvar script = document.createElement('script');\n \t\t\t\tvar onScriptComplete;\n\n \t\t\t\tscript.charset = 'utf-8';\n \t\t\t\tscript.timeout = 120;\n \t\t\t\tif (__webpack_require__.nc) {\n \t\t\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n \t\t\t\t}\n \t\t\t\tscript.src = jsonpScriptSrc(chunkId);\n\n \t\t\t\t// create error before stack unwound to get useful stacktrace later\n \t\t\t\tvar error = new Error();\n \t\t\t\tonScriptComplete = function (event) {\n \t\t\t\t\t// avoid mem leaks in IE.\n \t\t\t\t\tscript.onerror = script.onload = null;\n \t\t\t\t\tclearTimeout(timeout);\n \t\t\t\t\tvar chunk = installedChunks[chunkId];\n \t\t\t\t\tif(chunk !== 0) {\n \t\t\t\t\t\tif(chunk) {\n \t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n \t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n \t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n \t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n \t\t\t\t\t\t\terror.type = errorType;\n \t\t\t\t\t\t\terror.request = realSrc;\n \t\t\t\t\t\t\tchunk[1](error);\n \t\t\t\t\t\t}\n \t\t\t\t\t\tinstalledChunks[chunkId] = undefined;\n \t\t\t\t\t}\n \t\t\t\t};\n \t\t\t\tvar timeout = setTimeout(function(){\n \t\t\t\t\tonScriptComplete({ type: 'timeout', target: script });\n \t\t\t\t}, 120000);\n \t\t\t\tscript.onerror = script.onload = onScriptComplete;\n \t\t\t\tdocument.head.appendChild(script);\n \t\t\t}\n \t\t}\n \t\treturn Promise.all(promises);\n \t};\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// on error function for async loading\n \t__webpack_require__.oe = function(err) { console.error(err); throw err; };\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([0,\"monaco\",\"commons\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","\nvar content = require(\"!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./nativeEditor.less\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./nativeEditor.less\", function() {\n\t\tvar newContent = require(\"!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./nativeEditor.less\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","import { OSType } from '../../client/common/utils/platform';\n\n// Javascript keyCodes\nexport const KeyCodes = {\n    LeftArrow: 37,\n    UpArrow: 38,\n    RightArrow: 39,\n    DownArrow: 40,\n    PageUp: 33,\n    PageDown: 34,\n    End: 35,\n    Home: 36\n};\n\nexport function getOSType() {\n    if (window.navigator.platform.startsWith('Mac')) {\n        return OSType.OSX;\n    } else if (window.navigator.platform.startsWith('Win')) {\n        return OSType.Windows;\n    } else if (window.navigator.userAgent.indexOf('Linux') > 0) {\n        return OSType.Linux;\n    } else {\n        return OSType.Unknown;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n'use strict';\nimport * as React from 'react';\nimport { Image, ImageName } from '../react-common/image';\nimport { getLocString } from '../react-common/locReactSide';\n\ninterface IAddCellLineProps {\n    baseTheme: string;\n    includePlus: boolean;\n    className: string;\n    isNotebookTrusted: boolean;\n    click(): void;\n}\n\nexport class AddCellLine extends React.Component<IAddCellLineProps> {\n    constructor(props: IAddCellLineProps) {\n        super(props);\n    }\n\n    public render() {\n        const className = `add-cell-line ${this.props.className}`;\n        const tooltip = getLocString('DataScience.insertBelow', 'Insert cell below');\n        const plus = this.props.includePlus ? (\n            <Image baseTheme={this.props.baseTheme} class=\"image-button-image\" image={ImageName.InsertBelow} />\n        ) : null;\n        const disabled = !this.props.isNotebookTrusted;\n        const innerFilter = disabled ? 'image-button-inner-disabled-filter' : '';\n        return (\n            <div className={className}>\n                <button\n                    role=\"button\"\n                    aria-pressed=\"false\"\n                    title={tooltip}\n                    disabled={disabled}\n                    aria-label={tooltip}\n                    className=\"add-cell-line-button\"\n                    onClick={this.props.click}\n                >\n                    <span className={innerFilter}>\n                        {plus}\n                        <span className=\"add-cell-line-divider\" />\n                    </span>\n                </button>\n            </div>\n        );\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n'use strict';\nimport * as uuid from 'uuid/v4';\nimport { NativeKeyboardCommandTelemetry, NativeMouseCommandTelemetry } from '../../../client/datascience/constants';\nimport {\n    IInteractiveWindowMapping,\n    InteractiveWindowMessages\n} from '../../../client/datascience/interactive-common/interactiveWindowTypes';\nimport {\n    ICell,\n    IExternalCommandFromWebview,\n    IJupyterVariable,\n    IJupyterVariablesRequest\n} from '../../../client/datascience/types';\nimport { CursorPos } from '../../interactive-common/mainState';\nimport {\n    CommonAction,\n    CommonActionType,\n    CommonActionTypeMapping,\n    ICellAction,\n    ICellAndCursorAction,\n    ICodeAction,\n    ICodeCreatedAction,\n    IEditCellAction,\n    ILinkClickAction,\n    IOpenSettingsAction,\n    ISendCommandAction,\n    IShowDataViewerAction,\n    IVariableExplorerHeight\n} from '../../interactive-common/redux/reducers/types';\nimport { IMonacoModelContentChangeEvent } from '../../react-common/monacoHelpers';\n\n// This function isn't made common and not exported, to ensure it isn't used elsewhere.\nfunction createIncomingActionWithPayload<\n    M extends IInteractiveWindowMapping & CommonActionTypeMapping,\n    K extends keyof M\n>(type: K, data: M[K]): CommonAction<M[K]> {\n    // tslint:disable-next-line: no-any\n    return { type, payload: { data, messageDirection: 'incoming' } as any } as any;\n}\n// This function isn't made common and not exported, to ensure it isn't used elsewhere.\nfunction createIncomingAction(type: CommonActionType | InteractiveWindowMessages): CommonAction {\n    return { type, payload: { messageDirection: 'incoming', data: undefined } };\n}\n\n// See https://react-redux.js.org/using-react-redux/connect-mapdispatch#defining-mapdispatchtoprops-as-an-object\nexport const actionCreators = {\n    addCell: () => createIncomingActionWithPayload(CommonActionType.ADD_AND_FOCUS_NEW_CELL, { newCellId: uuid() }),\n    insertAboveFirst: () =>\n        createIncomingActionWithPayload(CommonActionType.INSERT_ABOVE_FIRST_AND_FOCUS_NEW_CELL, { newCellId: uuid() }),\n    insertAbove: (cellId: string | undefined) =>\n        createIncomingActionWithPayload(CommonActionType.INSERT_ABOVE_AND_FOCUS_NEW_CELL, {\n            cellId,\n            newCellId: uuid()\n        }),\n    insertBelow: (cellId: string | undefined) =>\n        createIncomingActionWithPayload(CommonActionType.INSERT_BELOW_AND_FOCUS_NEW_CELL, {\n            cellId,\n            newCellId: uuid()\n        }),\n    executeCell: (cellId: string, moveOp: 'add' | 'select' | 'none') =>\n        createIncomingActionWithPayload(CommonActionType.EXECUTE_CELL_AND_ADVANCE, { cellId, moveOp }),\n    focusCell: (cellId: string, cursorPos: CursorPos = CursorPos.Current): CommonAction<ICellAndCursorAction> =>\n        createIncomingActionWithPayload(CommonActionType.FOCUS_CELL, { cellId, cursorPos }),\n    unfocusCell: (cellId: string, code: string) =>\n        createIncomingActionWithPayload(CommonActionType.UNFOCUS_CELL, { cellId, code }),\n    selectCell: (cellId: string, cursorPos: CursorPos = CursorPos.Current): CommonAction<ICellAndCursorAction> =>\n        createIncomingActionWithPayload(CommonActionType.SELECT_CELL, { cellId, cursorPos }),\n    executeAllCells: (): CommonAction => createIncomingAction(CommonActionType.EXECUTE_ALL_CELLS),\n    executeAbove: (cellId: string): CommonAction<ICellAction> =>\n        createIncomingActionWithPayload(CommonActionType.EXECUTE_ABOVE, { cellId }),\n    executeCellAndBelow: (cellId: string): CommonAction<ICellAction> =>\n        createIncomingActionWithPayload(CommonActionType.EXECUTE_CELL_AND_BELOW, { cellId }),\n    toggleVariableExplorer: (): CommonAction => createIncomingAction(CommonActionType.TOGGLE_VARIABLE_EXPLORER),\n    setVariableExplorerHeight: (containerHeight: number, gridHeight: number): CommonAction<IVariableExplorerHeight> =>\n        createIncomingActionWithPayload(CommonActionType.SET_VARIABLE_EXPLORER_HEIGHT, { containerHeight, gridHeight }),\n    restartKernel: (): CommonAction => createIncomingAction(CommonActionType.RESTART_KERNEL),\n    interruptKernel: (): CommonAction => createIncomingAction(CommonActionType.INTERRUPT_KERNEL),\n    clearAllOutputs: (): CommonAction => createIncomingAction(InteractiveWindowMessages.ClearAllOutputs),\n    export: (): CommonAction => createIncomingAction(CommonActionType.EXPORT),\n    exportAs: (): CommonAction => createIncomingAction(CommonActionType.EXPORT_NOTEBOOK_AS),\n    save: (): CommonAction => createIncomingAction(CommonActionType.SAVE),\n    showDataViewer: (variable: IJupyterVariable, columnSize: number): CommonAction<IShowDataViewerAction> =>\n        createIncomingActionWithPayload(CommonActionType.SHOW_DATA_VIEWER, { variable, columnSize }),\n    sendCommand: (\n        command: NativeKeyboardCommandTelemetry | NativeMouseCommandTelemetry\n    ): CommonAction<ISendCommandAction> => createIncomingActionWithPayload(CommonActionType.SEND_COMMAND, { command }),\n    moveCellUp: (cellId: string): CommonAction<ICellAction> =>\n        createIncomingActionWithPayload(CommonActionType.MOVE_CELL_UP, { cellId }),\n    moveCellDown: (cellId: string): CommonAction<ICellAction> =>\n        createIncomingActionWithPayload(CommonActionType.MOVE_CELL_DOWN, { cellId }),\n    changeCellType: (cellId: string) => createIncomingActionWithPayload(CommonActionType.CHANGE_CELL_TYPE, { cellId }),\n    toggleLineNumbers: (cellId: string): CommonAction<ICellAction> =>\n        createIncomingActionWithPayload(CommonActionType.TOGGLE_LINE_NUMBERS, { cellId }),\n    toggleOutput: (cellId: string): CommonAction<ICellAction> =>\n        createIncomingActionWithPayload(CommonActionType.TOGGLE_OUTPUT, { cellId }),\n    deleteCell: (cellId: string): CommonAction<ICellAction> =>\n        createIncomingActionWithPayload(CommonActionType.DELETE_CELL, { cellId }),\n    undo: (): CommonAction => createIncomingAction(InteractiveWindowMessages.Undo),\n    redo: (): CommonAction => createIncomingAction(InteractiveWindowMessages.Redo),\n    arrowUp: (cellId: string, code: string): CommonAction<ICodeAction> =>\n        createIncomingActionWithPayload(CommonActionType.ARROW_UP, { cellId, code }),\n    arrowDown: (cellId: string, code: string): CommonAction<ICodeAction> =>\n        createIncomingActionWithPayload(CommonActionType.ARROW_DOWN, { cellId, code }),\n    editCell: (cellId: string, e: IMonacoModelContentChangeEvent): CommonAction<IEditCellAction> =>\n        createIncomingActionWithPayload(CommonActionType.EDIT_CELL, {\n            cellId,\n            version: e.versionId,\n            modelId: e.model.id,\n            forward: e.forward,\n            reverse: e.reverse,\n            id: cellId,\n            code: e.model.getValue()\n        }),\n    linkClick: (href: string): CommonAction<ILinkClickAction> =>\n        createIncomingActionWithPayload(CommonActionType.LINK_CLICK, { href }),\n    showPlot: (imageHtml: string) => createIncomingActionWithPayload(InteractiveWindowMessages.ShowPlot, imageHtml),\n    editorLoaded: (): CommonAction => createIncomingAction(CommonActionType.EDITOR_LOADED),\n    codeCreated: (cellId: string | undefined, modelId: string): CommonAction<ICodeCreatedAction> =>\n        createIncomingActionWithPayload(CommonActionType.CODE_CREATED, { cellId, modelId }),\n    loadedAllCells: (): CommonAction => createIncomingAction(CommonActionType.LOADED_ALL_CELLS),\n    editorUnmounted: (): CommonAction => createIncomingAction(CommonActionType.UNMOUNT),\n    selectKernel: (): CommonAction => createIncomingAction(InteractiveWindowMessages.SelectKernel),\n    selectServer: (): CommonAction => createIncomingAction(CommonActionType.SELECT_SERVER),\n    launchNotebookTrustPrompt: (): CommonAction => createIncomingAction(CommonActionType.LAUNCH_NOTEBOOK_TRUST_PROMPT),\n    openSettings: (setting?: string): CommonAction<IOpenSettingsAction> =>\n        createIncomingActionWithPayload(CommonActionType.OPEN_SETTINGS, { setting }),\n    getVariableData: (\n        newExecutionCount: number,\n        refreshCount: number,\n        startIndex: number = 0,\n        pageSize: number = 100\n    ): CommonAction<IJupyterVariablesRequest> =>\n        createIncomingActionWithPayload(CommonActionType.GET_VARIABLE_DATA, {\n            executionCount: newExecutionCount,\n            sortColumn: 'name',\n            sortAscending: true,\n            startIndex,\n            pageSize,\n            refreshCount\n        }),\n    widgetFailed: (ex: Error): CommonAction<Error> =>\n        createIncomingActionWithPayload(CommonActionType.IPYWIDGET_RENDER_FAILURE, ex),\n    runByLine: (cellId: string): CommonAction<ICellAction> =>\n        createIncomingActionWithPayload(CommonActionType.RUN_BY_LINE, { cellId }),\n    continue: (cellId: string): CommonAction<ICellAction> =>\n        createIncomingActionWithPayload(CommonActionType.CONTINUE, { cellId }),\n    step: (cellId: string): CommonAction<ICellAction> =>\n        createIncomingActionWithPayload(CommonActionType.STEP, { cellId }),\n    runExternalCommand: (buttonId: string, cell: ICell): CommonAction<IExternalCommandFromWebview> =>\n        createIncomingActionWithPayload(InteractiveWindowMessages.ExecuteExternalCommand, { buttonId, cell })\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n'use strict';\nimport '../../client/common/extensions';\n\nimport { nbformat } from '@jupyterlab/coreutils';\nimport * as fastDeepEqual from 'fast-deep-equal';\nimport * as monacoEditor from 'monaco-editor/esm/vs/editor/editor.api';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\n\nimport { OSType } from '../../client/common/utils/platform';\nimport {\n    Identifiers,\n    NativeKeyboardCommandTelemetry,\n    NativeMouseCommandTelemetry\n} from '../../client/datascience/constants';\nimport { CellState, IExternalWebviewCellButton } from '../../client/datascience/types';\nimport { concatMultilineString } from '../common';\nimport { CellInput } from '../interactive-common/cellInput';\nimport { CellOutput } from '../interactive-common/cellOutput';\nimport { ExecutionCount } from '../interactive-common/executionCount';\nimport { InformationMessages } from '../interactive-common/informationMessages';\nimport { activeDebugState, CursorPos, DebugState, ICellViewModel, IFont } from '../interactive-common/mainState';\nimport { getOSType } from '../react-common/constants';\nimport { IKeyboardEvent } from '../react-common/event';\nimport { Image, ImageName } from '../react-common/image';\nimport { ImageButton } from '../react-common/imageButton';\nimport { getLocString } from '../react-common/locReactSide';\nimport { IMonacoModelContentChangeEvent } from '../react-common/monacoHelpers';\nimport { AddCellLine } from './addCellLine';\nimport { actionCreators } from './redux/actions';\n\nnamespace CssConstants {\n    export const CellOutputWrapper = 'cell-output-wrapper';\n    export const CellOutputWrapperClass = `.${CellOutputWrapper}`;\n    export const ImageButtonClass = '.image-button';\n}\n\ninterface INativeCellBaseProps {\n    role?: string;\n    cellVM: ICellViewModel;\n    language: string;\n\n    baseTheme: string;\n    codeTheme: string;\n    testMode?: boolean;\n    maxTextSize?: number;\n    enableScroll?: boolean;\n    monacoTheme: string | undefined;\n    lastCell: boolean;\n    firstCell: boolean;\n    font: IFont;\n    allowUndo: boolean;\n    editorOptions: monacoEditor.editor.IEditorOptions;\n    themeMatplotlibPlots: boolean | undefined;\n    focusPending: number;\n    busy: boolean;\n    useCustomEditorApi: boolean;\n    runningByLine: DebugState;\n    supportsRunByLine: boolean;\n    isNotebookTrusted: boolean;\n    externalButtons: IExternalWebviewCellButton[];\n}\n\ntype INativeCellProps = INativeCellBaseProps & typeof actionCreators;\n\n// tslint:disable: react-this-binding-issue\nexport class NativeCell extends React.Component<INativeCellProps> {\n    private inputRef: React.RefObject<CellInput> = React.createRef<CellInput>();\n    private wrapperRef: React.RefObject<HTMLDivElement> = React.createRef<HTMLDivElement>();\n    private lastKeyPressed: string | undefined;\n\n    constructor(prop: INativeCellProps) {\n        super(prop);\n    }\n\n    public render() {\n        if (this.props.cellVM.cell.data.cell_type === 'messages') {\n            return <InformationMessages messages={this.props.cellVM.cell.data.messages} />;\n        } else {\n            return this.renderNormalCell();\n        }\n    }\n\n    public componentDidUpdate(prevProps: INativeCellProps) {\n        if (this.props.cellVM.selected && !prevProps.cellVM.selected && !this.props.cellVM.focused) {\n            this.giveFocus();\n        }\n\n        // Anytime we update, reset the key. This object will be reused for different cell ids\n        this.lastKeyPressed = undefined;\n    }\n\n    public shouldComponentUpdate(nextProps: INativeCellProps): boolean {\n        return !fastDeepEqual(this.props, nextProps);\n    }\n\n    // Public for testing\n    public getUnknownMimeTypeFormatString() {\n        return getLocString('DataScience.unknownMimeTypeFormat', 'Unknown Mime Type');\n    }\n\n    private giveFocus() {\n        if (this.wrapperRef && this.wrapperRef.current) {\n            // Give focus to the cell if not already owning focus\n            if (!this.wrapperRef.current.contains(document.activeElement)) {\n                this.wrapperRef.current.focus();\n            }\n\n            // Scroll into view (since we have focus). However this function\n            // is not supported on enzyme\n            // tslint:disable-next-line: no-any\n            if ((this.wrapperRef.current as any).scrollIntoView) {\n                this.wrapperRef.current.scrollIntoView({ behavior: 'auto', block: 'nearest', inline: 'nearest' });\n            }\n        }\n    }\n\n    private getCell = () => {\n        return this.props.cellVM.cell;\n    };\n\n    private isCodeCell = () => {\n        return this.props.cellVM.cell.data.cell_type === 'code';\n    };\n\n    private isMarkdownCell = () => {\n        return this.props.cellVM.cell.data.cell_type === 'markdown';\n    };\n\n    private isSelected = () => {\n        return this.props.cellVM.selected;\n    };\n\n    private isNotebookTrusted = () => {\n        return this.props.isNotebookTrusted;\n    };\n\n    private isFocused = () => {\n        return this.props.cellVM.focused;\n    };\n\n    private renderNormalCell() {\n        const cellOuterClass = this.props.cellVM.editable ? 'cell-outer-editable' : 'cell-outer';\n        let cellWrapperClass = this.props.cellVM.editable ? 'cell-wrapper' : 'cell-wrapper cell-wrapper-noneditable';\n        if (this.isSelected() && !this.isFocused()) {\n            cellWrapperClass += ' cell-wrapper-selected';\n        }\n        if (this.isFocused()) {\n            cellWrapperClass += ' cell-wrapper-focused';\n        }\n\n        // Content changes based on if a markdown cell or not.\n        const content =\n            this.isMarkdownCell() && !this.isShowingMarkdownEditor() ? (\n                <div className=\"cell-result-container\">\n                    <div className=\"cell-row-container\">\n                        {this.renderCollapseBar(false)}\n                        {this.renderOutput()}\n                    </div>\n                    {this.renderAddDivider(false)}\n                </div>\n            ) : (\n                <div className=\"cell-result-container\">\n                    <div className=\"cell-row-container\">\n                        {this.renderCollapseBar(true)}\n                        {this.renderControls()}\n                        {this.renderInput()}\n                    </div>\n                    {this.renderAddDivider(true)}\n                    <div className=\"cell-row-container\">\n                        {this.renderCollapseBar(false)}\n                        {this.renderOutput()}\n                    </div>\n                </div>\n            );\n\n        return (\n            <div\n                className={cellWrapperClass}\n                role={this.props.role}\n                ref={this.wrapperRef}\n                tabIndex={0}\n                onKeyDown={this.onOuterKeyDown}\n                onClick={this.onMouseClick}\n                onDoubleClick={this.onMouseDoubleClick}\n            >\n                <div className={cellOuterClass}>\n                    {this.renderNavbar()}\n                    <div className=\"content-div\">{content}</div>\n                </div>\n            </div>\n        );\n    }\n\n    private allowClickPropagation(elem: HTMLElement): boolean {\n        if (this.isMarkdownCell()) {\n            return true;\n        }\n        if (!elem.closest(CssConstants.ImageButtonClass) && !elem.closest(CssConstants.CellOutputWrapperClass)) {\n            return true;\n        }\n        return false;\n    }\n\n    private onMouseClick = (ev: React.MouseEvent<HTMLDivElement>) => {\n        if (ev.nativeEvent.target) {\n            const elem = ev.nativeEvent.target as HTMLElement;\n            if (this.allowClickPropagation(elem)) {\n                // Not a click on an button in a toolbar or in output, select the cell.\n                ev.stopPropagation();\n                this.lastKeyPressed = undefined;\n                this.props.selectCell(this.cellId);\n            }\n        }\n    };\n\n    private onMouseDoubleClick = (ev: React.MouseEvent<HTMLDivElement>) => {\n        const elem = ev.nativeEvent.target as HTMLElement;\n        if (this.allowClickPropagation(elem)) {\n            // When we receive double click, propagate upwards. Might change our state\n            ev.stopPropagation();\n            this.props.focusCell(this.cellId, CursorPos.Current);\n        }\n    };\n\n    private shouldRenderCodeEditor = (): boolean => {\n        return this.isCodeCell() && (this.props.cellVM.inputBlockShow || this.props.cellVM.editable);\n    };\n\n    private shouldRenderMarkdownEditor = (): boolean => {\n        return (\n            this.isMarkdownCell() &&\n            (this.isShowingMarkdownEditor() || this.props.cellVM.cell.id === Identifiers.EditCellId)\n        );\n    };\n\n    private isShowingMarkdownEditor = (): boolean => {\n        return this.isMarkdownCell() && (this.props.cellVM.focused || !this.isNotebookTrusted());\n    };\n\n    private shouldRenderInput(): boolean {\n        return this.shouldRenderCodeEditor() || this.shouldRenderMarkdownEditor();\n    }\n\n    private hasOutput = () => {\n        return (\n            this.getCell().state === CellState.finished ||\n            this.getCell().state === CellState.error ||\n            this.getCell().state === CellState.executing\n        );\n    };\n\n    private getCodeCell = () => {\n        return this.props.cellVM.cell.data as nbformat.ICodeCell;\n    };\n\n    private shouldRenderOutput(): boolean {\n        if (!this.isNotebookTrusted()) {\n            return false;\n        }\n        if (this.isCodeCell()) {\n            const cell = this.getCodeCell();\n            return (\n                this.hasOutput() &&\n                cell.outputs &&\n                !this.props.cellVM.hideOutput &&\n                Array.isArray(cell.outputs) &&\n                cell.outputs.length !== 0\n            );\n        } else if (this.isMarkdownCell()) {\n            return !this.isShowingMarkdownEditor();\n        }\n        return false;\n    }\n\n    // tslint:disable-next-line: cyclomatic-complexity max-func-body-length\n    private keyDownInput = (cellId: string, e: IKeyboardEvent) => {\n        if (!this.isNotebookTrusted() && !isCellNavigationKeyboardEvent(e)) {\n            return;\n        }\n        const isFocusedWhenNotSuggesting = this.isFocused() && e.editorInfo && !e.editorInfo.isSuggesting;\n        switch (e.code) {\n            case 'ArrowUp':\n            case 'k':\n                if ((isFocusedWhenNotSuggesting && e.editorInfo!.isFirstLine && !e.shiftKey) || !this.isFocused()) {\n                    this.arrowUpFromCell(e);\n                }\n                break;\n            case 'ArrowDown':\n            case 'j':\n                if ((isFocusedWhenNotSuggesting && e.editorInfo!.isLastLine && !e.shiftKey) || !this.isFocused()) {\n                    this.arrowDownFromCell(e);\n                }\n                break;\n            case 's':\n                if ((e.ctrlKey && getOSType() !== OSType.OSX) || (e.metaKey && getOSType() === OSType.OSX)) {\n                    // This is save, save our cells\n                    this.props.save();\n                }\n                break;\n\n            case 'Escape':\n                if (isFocusedWhenNotSuggesting) {\n                    this.escapeCell(e);\n                }\n                break;\n            case 'y':\n                if (!this.isFocused() && this.isSelected() && this.isMarkdownCell()) {\n                    e.stopPropagation();\n                    e.preventDefault();\n                    this.props.changeCellType(cellId);\n                    this.props.sendCommand(NativeKeyboardCommandTelemetry.ChangeToCode);\n                }\n                break;\n            case 'm':\n                if (!this.isFocused() && this.isSelected() && this.isCodeCell()) {\n                    e.stopPropagation();\n                    e.preventDefault();\n                    this.props.changeCellType(cellId);\n                    this.props.sendCommand(NativeKeyboardCommandTelemetry.ChangeToMarkdown);\n                }\n                break;\n            case 'l':\n                if (!this.isFocused() && this.isSelected()) {\n                    e.stopPropagation();\n                    e.preventDefault();\n                    this.props.toggleLineNumbers(cellId);\n                    this.props.sendCommand(NativeKeyboardCommandTelemetry.ToggleLineNumbers);\n                }\n                break;\n            case 'o':\n                if (!this.isFocused() && this.isSelected()) {\n                    e.stopPropagation();\n                    e.preventDefault();\n                    this.props.toggleOutput(cellId);\n                    this.props.sendCommand(NativeKeyboardCommandTelemetry.ToggleOutput);\n                }\n                break;\n            case 'NumpadEnter':\n            case 'Enter':\n                if (e.shiftKey) {\n                    this.shiftEnterCell(e);\n                } else if (e.ctrlKey) {\n                    this.ctrlEnterCell(e);\n                } else if (e.altKey) {\n                    this.altEnterCell(e);\n                } else {\n                    this.enterCell(e);\n                }\n                break;\n            case 'd':\n                if (this.lastKeyPressed === 'd' && !this.isFocused() && this.isSelected()) {\n                    e.stopPropagation();\n                    this.lastKeyPressed = undefined; // Reset it so we don't keep deleting\n                    this.props.deleteCell(cellId);\n                    this.props.sendCommand(NativeKeyboardCommandTelemetry.DeleteCell);\n                }\n                break;\n            case 'a':\n                if (!this.isFocused()) {\n                    e.stopPropagation();\n                    e.preventDefault();\n                    setTimeout(() => this.props.insertAbove(cellId), 1);\n                    this.props.sendCommand(NativeKeyboardCommandTelemetry.InsertAbove);\n                }\n                break;\n            case 'b':\n                if (!this.isFocused()) {\n                    e.stopPropagation();\n                    e.preventDefault();\n                    setTimeout(() => this.props.insertBelow(cellId), 1);\n                    this.props.sendCommand(NativeKeyboardCommandTelemetry.InsertBelow);\n                }\n                break;\n            case 'z':\n            case 'Z':\n                if (!this.isFocused() && !this.props.useCustomEditorApi) {\n                    if (e.shiftKey && !e.ctrlKey && !e.altKey && !e.metaKey) {\n                        e.stopPropagation();\n                        this.props.redo();\n                        this.props.sendCommand(NativeKeyboardCommandTelemetry.Redo);\n                    } else if (!e.shiftKey && !e.altKey && !e.ctrlKey && !e.metaKey) {\n                        e.stopPropagation();\n                        this.props.undo();\n                        this.props.sendCommand(NativeKeyboardCommandTelemetry.Undo);\n                    }\n                }\n                break;\n            default:\n                break;\n        }\n\n        this.lastKeyPressed = e.code;\n    };\n\n    private get cellId(): string {\n        return this.props.cellVM.cell.id;\n    }\n\n    private escapeCell = (e: IKeyboardEvent) => {\n        // Unfocus the current cell by giving focus to the cell itself\n        if (this.wrapperRef && this.wrapperRef.current && this.isFocused()) {\n            e.stopPropagation();\n            this.wrapperRef.current.focus();\n            this.props.sendCommand(NativeKeyboardCommandTelemetry.Unfocus);\n        }\n    };\n\n    private arrowUpFromCell = (e: IKeyboardEvent) => {\n        e.stopPropagation();\n        e.preventDefault();\n        this.props.arrowUp(this.cellId, this.getCurrentCode());\n        this.props.sendCommand(NativeKeyboardCommandTelemetry.ArrowUp);\n    };\n\n    private arrowDownFromCell = (e: IKeyboardEvent) => {\n        e.stopPropagation();\n        e.preventDefault();\n        this.props.arrowDown(this.cellId, this.getCurrentCode());\n        this.props.sendCommand(NativeKeyboardCommandTelemetry.ArrowDown);\n    };\n\n    private enterCell = (e: IKeyboardEvent) => {\n        // If focused, then ignore this call. It should go to the focused cell instead.\n        if (!this.isFocused() && !e.editorInfo && this.wrapperRef && this.wrapperRef && this.isSelected()) {\n            e.stopPropagation();\n            e.preventDefault();\n            this.props.focusCell(this.cellId, CursorPos.Current);\n        }\n    };\n\n    private shiftEnterCell = (e: IKeyboardEvent) => {\n        // Prevent shift enter from add an enter\n        e.stopPropagation();\n        e.preventDefault();\n\n        // Submit and move to the next.\n        this.runAndMove();\n\n        this.props.sendCommand(NativeKeyboardCommandTelemetry.RunAndMove);\n    };\n\n    private altEnterCell = (e: IKeyboardEvent) => {\n        // Prevent shift enter from add an enter\n        e.stopPropagation();\n        e.preventDefault();\n\n        // Submit this cell\n        this.runAndAdd();\n\n        this.props.sendCommand(NativeKeyboardCommandTelemetry.RunAndAdd);\n    };\n\n    private runAndMove() {\n        // Submit this cell\n        this.submitCell(this.props.lastCell ? 'add' : 'select');\n    }\n\n    private runAndAdd() {\n        // Submit this cell\n        this.submitCell('add');\n    }\n\n    private ctrlEnterCell = (e: IKeyboardEvent) => {\n        // Prevent shift enter from add an enter\n        e.stopPropagation();\n        e.preventDefault();\n\n        // Escape the current cell if it is markdown to make it render\n        if (this.isMarkdownCell()) {\n            this.escapeCell(e);\n        }\n\n        // Submit this cell\n        this.submitCell('none');\n        this.props.sendCommand(NativeKeyboardCommandTelemetry.Run);\n    };\n\n    private submitCell = (moveOp: 'add' | 'select' | 'none') => {\n        this.props.executeCell(this.cellId, moveOp);\n    };\n\n    private addNewCell = () => {\n        setTimeout(() => this.props.insertBelow(this.cellId), 1);\n        this.props.sendCommand(NativeMouseCommandTelemetry.AddToEnd);\n    };\n    private addNewCellBelow = () => {\n        setTimeout(() => this.props.insertBelow(this.cellId), 1);\n        this.props.sendCommand(NativeMouseCommandTelemetry.InsertBelow);\n    };\n\n    private renderNavbar = () => {\n        const moveUp = () => {\n            this.props.moveCellUp(this.cellId);\n            this.props.sendCommand(NativeMouseCommandTelemetry.MoveCellUp);\n        };\n        const moveDown = () => {\n            this.props.moveCellDown(this.cellId);\n            this.props.sendCommand(NativeMouseCommandTelemetry.MoveCellDown);\n        };\n        const addButtonRender = !this.props.lastCell ? (\n            <div className=\"navbar-add-button\">\n                <ImageButton\n                    baseTheme={this.props.baseTheme}\n                    onClick={this.addNewCellBelow}\n                    disabled={!this.props.isNotebookTrusted}\n                    tooltip={getLocString('DataScience.insertBelow', 'Insert cell below')}\n                >\n                    <Image baseTheme={this.props.baseTheme} class=\"image-button-image\" image={ImageName.InsertBelow} />\n                </ImageButton>\n            </div>\n        ) : null;\n\n        return (\n            <div className=\"navbar-div\">\n                <div>\n                    <ImageButton\n                        baseTheme={this.props.baseTheme}\n                        onClick={moveUp}\n                        disabled={this.props.firstCell || !this.props.isNotebookTrusted}\n                        tooltip={getLocString('DataScience.moveCellUp', 'Move cell up')}\n                    >\n                        <Image baseTheme={this.props.baseTheme} class=\"image-button-image\" image={ImageName.Up} />\n                    </ImageButton>\n                </div>\n                <div>\n                    <ImageButton\n                        baseTheme={this.props.baseTheme}\n                        onClick={moveDown}\n                        disabled={this.props.lastCell || !this.props.isNotebookTrusted}\n                        tooltip={getLocString('DataScience.moveCellDown', 'Move cell down')}\n                    >\n                        <Image baseTheme={this.props.baseTheme} class=\"image-button-image\" image={ImageName.Down} />\n                    </ImageButton>\n                </div>\n                {addButtonRender}\n            </div>\n        );\n    };\n\n    private renderAddDivider = (checkOutput: boolean) => {\n        // Skip on the last cell\n        if (!this.props.lastCell) {\n            // Divider should only show if no output\n            if (!checkOutput || !this.shouldRenderOutput()) {\n                return (\n                    <AddCellLine\n                        className=\"add-divider\"\n                        baseTheme={this.props.baseTheme}\n                        includePlus={false}\n                        isNotebookTrusted={this.props.isNotebookTrusted}\n                        click={this.addNewCell}\n                    />\n                );\n            }\n        }\n\n        return null;\n    };\n\n    private getCurrentCode(): string {\n        // Input may not be open at this time. If not, then use current cell contents.\n        const contents = this.inputRef.current ? this.inputRef.current.getContents() : undefined;\n        return contents || concatMultilineString(this.props.cellVM.cell.data.source);\n    }\n\n    private renderMiddleToolbar = () => {\n        const cellId = this.props.cellVM.cell.id;\n        const runCell = () => {\n            this.runAndMove();\n            this.props.sendCommand(NativeMouseCommandTelemetry.Run);\n        };\n        const deleteCell = () => {\n            this.props.deleteCell(cellId);\n            this.props.sendCommand(NativeMouseCommandTelemetry.DeleteCell);\n        };\n        const runbyline = () => {\n            this.props.focusCell(cellId);\n            this.props.runByLine(cellId);\n        };\n        const stop = () => {\n            this.props.interruptKernel();\n        };\n        const step = () => {\n            this.props.focusCell(cellId);\n            this.props.step(cellId);\n        };\n        const switchTooltip =\n            this.props.cellVM.cell.data.cell_type === 'code'\n                ? getLocString('DataScience.switchToMarkdown', 'Change to markdown')\n                : getLocString('DataScience.switchToCode', 'Change to code');\n        const otherCellType = this.props.cellVM.cell.data.cell_type === 'code' ? 'markdown' : 'code';\n        const otherCellTypeCommand =\n            otherCellType === 'markdown'\n                ? NativeMouseCommandTelemetry.ChangeToMarkdown\n                : NativeMouseCommandTelemetry.ChangeToCode;\n        const otherCellImage = otherCellType === 'markdown' ? ImageName.SwitchToMarkdown : ImageName.SwitchToCode;\n        const switchCellType = (event: React.MouseEvent<HTMLButtonElement>) => {\n            // Prevent this mouse click from stealing focus so that we\n            // can give focus to the cell input.\n            event.stopPropagation();\n            event.preventDefault();\n            this.props.changeCellType(cellId);\n            this.props.sendCommand(otherCellTypeCommand);\n        };\n        const toolbarClassName = this.props.cellVM.cell.data.cell_type === 'code' ? '' : 'markdown-toolbar';\n\n        if (activeDebugState(this.props.runningByLine) && !this.isMarkdownCell()) {\n            return (\n                <div className={toolbarClassName}>\n                    <div className=\"native-editor-celltoolbar-middle\">\n                        <ImageButton\n                            className={'image-button-empty'} // Just takes up space for now\n                            baseTheme={this.props.baseTheme}\n                            onClick={runCell}\n                            tooltip={getLocString('DataScience.runCell', 'Run cell')}\n                            hidden={this.isMarkdownCell()}\n                            disabled={true}\n                        >\n                            <Image baseTheme={this.props.baseTheme} class=\"image-button-image\" image={ImageName.Run} />\n                        </ImageButton>\n                        <ImageButton\n                            baseTheme={this.props.baseTheme}\n                            onClick={step}\n                            tooltip={getLocString('DataScience.step', 'Run next line (F10)')}\n                            hidden={this.isMarkdownCell()}\n                            disabled={this.props.busy || this.props.runningByLine === DebugState.Run}\n                        >\n                            <Image\n                                baseTheme={this.props.baseTheme}\n                                class=\"image-button-image\"\n                                image={ImageName.RunByLine}\n                            />\n                        </ImageButton>\n                        <ImageButton\n                            baseTheme={this.props.baseTheme}\n                            onClick={stop}\n                            tooltip={getLocString('DataScience.stopRunByLine', 'Stop')}\n                            hidden={this.isMarkdownCell()}\n                            disabled={false}\n                        >\n                            <Image\n                                baseTheme={this.props.baseTheme}\n                                class=\"image-button-image\"\n                                image={ImageName.Interrupt}\n                            />\n                        </ImageButton>\n                    </div>\n                    <div className=\"native-editor-celltoolbar-divider\" />\n                </div>\n            );\n        }\n        return (\n            <div className={toolbarClassName}>\n                <div className=\"native-editor-celltoolbar-middle\">\n                    <ImageButton\n                        baseTheme={this.props.baseTheme}\n                        onClick={runCell}\n                        tooltip={getLocString('DataScience.runCell', 'Run cell')}\n                        hidden={this.isMarkdownCell()}\n                        disabled={this.props.busy || !this.props.isNotebookTrusted}\n                    >\n                        <Image baseTheme={this.props.baseTheme} class=\"image-button-image\" image={ImageName.Run} />\n                    </ImageButton>\n                    <ImageButton\n                        baseTheme={this.props.baseTheme}\n                        onClick={runbyline}\n                        tooltip={getLocString('DataScience.runByLine', 'Run by line')}\n                        hidden={this.isMarkdownCell() || !this.props.supportsRunByLine}\n                        disabled={this.props.busy || !this.props.isNotebookTrusted}\n                    >\n                        <Image\n                            baseTheme={this.props.baseTheme}\n                            class=\"image-button-image\"\n                            image={ImageName.RunByLine}\n                        />\n                    </ImageButton>\n                    <ImageButton\n                        baseTheme={this.props.baseTheme}\n                        onMouseDown={switchCellType}\n                        tooltip={switchTooltip}\n                        disabled={!this.props.isNotebookTrusted}\n                    >\n                        <Image baseTheme={this.props.baseTheme} class=\"image-button-image\" image={otherCellImage} />\n                    </ImageButton>\n                    <ImageButton\n                        baseTheme={this.props.baseTheme}\n                        onClick={deleteCell}\n                        tooltip={getLocString('DataScience.deleteCell', 'Delete cell')}\n                        className=\"delete-cell-button hover-cell-button\"\n                        disabled={!this.props.isNotebookTrusted}\n                    >\n                        <Image baseTheme={this.props.baseTheme} class=\"image-button-image\" image={ImageName.Delete} />\n                    </ImageButton>\n                    {this.renderExternalButtons()}\n                </div>\n                <div className=\"native-editor-celltoolbar-divider\" />\n            </div>\n        );\n    };\n\n    private renderExternalButtons() {\n        const buttons: JSX.Element[] = [];\n\n        this.props.externalButtons.forEach((button, index) => {\n            if (this.isCodeCell()) {\n                buttons.push(\n                    <ImageButton\n                        baseTheme={this.props.baseTheme}\n                        onClick={() => {\n                            button.running = true;\n                            this.props.runExternalCommand(button.buttonId, this.props.cellVM.cell);\n                        }}\n                        disabled={!button.statusToEnable.includes(this.props.cellVM.cell.state)}\n                        tooltip={button.tooltip}\n                        key={index}\n                    >\n                        <Image\n                            baseTheme={this.props.baseTheme}\n                            class=\"image-button-image\"\n                            codicon={button.running ? undefined : button.codicon}\n                            image={button.running ? ImageName.Sync : ImageName.Cancel}\n                        />\n                    </ImageButton>\n                );\n            }\n        });\n\n        return buttons;\n    }\n\n    private renderControls = () => {\n        const busy =\n            this.props.cellVM.cell.state === CellState.init || this.props.cellVM.cell.state === CellState.executing;\n        const executionCount =\n            this.props.cellVM &&\n            this.props.cellVM.cell &&\n            this.props.cellVM.cell.data &&\n            this.props.cellVM.cell.data.execution_count\n                ? this.props.cellVM.cell.data.execution_count.toString()\n                : '-';\n\n        return (\n            <div className=\"controls-div\">\n                <ExecutionCount isBusy={busy} count={executionCount} visible={this.isCodeCell()} />\n            </div>\n        );\n    };\n\n    private renderInput = () => {\n        if (this.shouldRenderInput()) {\n            // Make sure the glyph margin is always there for native cells.\n            // We need it for debugging.\n            const options = {\n                ...this.props.editorOptions,\n                glyphMargin: true\n            };\n            return (\n                <div className=\"cell-input-wrapper\">\n                    {this.renderMiddleToolbar()}\n                    <CellInput\n                        cellVM={this.props.cellVM}\n                        editorOptions={options}\n                        history={undefined}\n                        codeTheme={this.props.codeTheme}\n                        onCodeChange={this.onCodeChange}\n                        onCodeCreated={this.onCodeCreated}\n                        testMode={this.props.testMode ? true : false}\n                        showWatermark={false}\n                        ref={this.inputRef}\n                        monacoTheme={this.props.monacoTheme}\n                        openLink={this.openLink}\n                        editorMeasureClassName={undefined}\n                        focused={this.onCodeFocused}\n                        unfocused={this.onCodeUnfocused}\n                        keyDown={this.keyDownInput}\n                        showLineNumbers={this.props.cellVM.showLineNumbers}\n                        font={this.props.font}\n                        disableUndoStack={this.props.useCustomEditorApi}\n                        codeVersion={this.props.cellVM.codeVersion ? this.props.cellVM.codeVersion : 1}\n                        focusPending={this.props.focusPending}\n                        language={this.props.language}\n                        isNotebookTrusted={this.props.isNotebookTrusted}\n                    />\n                </div>\n            );\n        }\n        return null;\n    };\n\n    private onCodeFocused = () => {\n        this.props.focusCell(this.cellId, CursorPos.Current);\n    };\n\n    private onCodeUnfocused = () => {\n        // Make sure to save the code from the editor into the cell\n        this.props.unfocusCell(this.cellId, this.getCurrentCode());\n    };\n\n    private onCodeChange = (e: IMonacoModelContentChangeEvent) => {\n        this.props.editCell(this.getCell().id, e);\n    };\n\n    private onCodeCreated = (_code: string, _file: string, cellId: string, modelId: string) => {\n        this.props.codeCreated(cellId, modelId);\n    };\n\n    private renderOutput = (): JSX.Element | null => {\n        const themeMatplotlibPlots = this.props.themeMatplotlibPlots ? true : false;\n        const toolbar = this.props.cellVM.cell.data.cell_type === 'markdown' ? this.renderMiddleToolbar() : null;\n        if (this.shouldRenderOutput()) {\n            return (\n                <div className={CssConstants.CellOutputWrapper}>\n                    {toolbar}\n                    <CellOutput\n                        cellVM={this.props.cellVM}\n                        baseTheme={this.props.baseTheme}\n                        expandImage={this.props.showPlot}\n                        maxTextSize={this.props.maxTextSize}\n                        enableScroll={this.props.enableScroll}\n                        themeMatplotlibPlots={themeMatplotlibPlots}\n                        widgetFailed={this.props.widgetFailed}\n                        openSettings={this.props.openSettings}\n                    />\n                </div>\n            );\n        }\n        return null;\n    };\n\n    private onOuterKeyDown = (event: React.KeyboardEvent<HTMLDivElement>) => {\n        // Handle keydown events for the entire cell when we don't have focus\n        if (event.key !== 'Tab' && !this.isFocused() && !this.focusInOutput()) {\n            this.keyDownInput(this.props.cellVM.cell.id, {\n                code: event.key,\n                shiftKey: event.shiftKey,\n                ctrlKey: event.ctrlKey,\n                metaKey: event.metaKey,\n                altKey: event.altKey,\n                target: event.target as HTMLDivElement,\n                stopPropagation: () => event.stopPropagation(),\n                preventDefault: () => event.preventDefault()\n            });\n        }\n    };\n\n    private focusInOutput(): boolean {\n        const focusedElement = document.activeElement as HTMLElement;\n        if (focusedElement) {\n            return focusedElement.closest(CssConstants.CellOutputWrapperClass) !== null;\n        }\n        return false;\n    }\n\n    private renderCollapseBar = (input: boolean) => {\n        let classes = 'collapse-bar';\n\n        if (this.isSelected() && !this.isFocused()) {\n            classes += ' collapse-bar-selected';\n        }\n        if (this.isFocused()) {\n            classes += ' collapse-bar-focused';\n        }\n\n        if (input) {\n            return <div className={classes}></div>;\n        }\n\n        if (this.props.cellVM.cell.data.cell_type === 'markdown') {\n            classes += ' collapse-bar-markdown';\n        } else if (\n            Array.isArray(this.props.cellVM.cell.data.outputs) &&\n            this.props.cellVM.cell.data.outputs.length !== 0\n        ) {\n            classes += ' collapse-bar-output';\n        } else {\n            return null;\n        }\n\n        return <div className={classes}></div>;\n    };\n\n    private openLink = (uri: monacoEditor.Uri) => {\n        this.props.linkClick(uri.toString());\n    };\n}\n\n// Main export, return a redux connected editor\nexport function getConnectedNativeCell() {\n    return connect(null, actionCreators)(NativeCell);\n}\n\nfunction isCellNavigationKeyboardEvent(e: IKeyboardEvent) {\n    return (\n        ((e.code === 'Enter' || e.code === 'NumpadEnter') && !e.shiftKey && !e.ctrlKey && !e.altKey) ||\n        e.code === 'ArrowUp' ||\n        e.code === 'k' ||\n        e.code === 'ArrowDown' ||\n        e.code === 'j' ||\n        e.code === 'Escape'\n    );\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n'use strict';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { NativeMouseCommandTelemetry } from '../../client/datascience/constants';\nimport { IJupyterExtraSettings } from '../../client/datascience/types';\nimport { JupyterInfo } from '../interactive-common/jupyterInfo';\nimport {\n    getSelectedAndFocusedInfo,\n    IFont,\n    IServerState,\n    SelectionAndFocusedInfo,\n    ServerStatus\n} from '../interactive-common/mainState';\nimport { IStore } from '../interactive-common/redux/store';\nimport { Image, ImageName } from '../react-common/image';\nimport { ImageButton } from '../react-common/imageButton';\nimport { getLocString } from '../react-common/locReactSide';\nimport './nativeEditor.less';\nimport { actionCreators } from './redux/actions';\n\ntype INativeEditorDataProps = {\n    busy: boolean;\n    dirty: boolean;\n    baseTheme: string;\n    cellCount: number;\n    font: IFont;\n    kernel: IServerState;\n    selectionFocusedInfo: SelectionAndFocusedInfo;\n    variablesVisible: boolean;\n    settings?: IJupyterExtraSettings;\n};\nexport type INativeEditorToolbarProps = INativeEditorDataProps & {\n    sendCommand: typeof actionCreators.sendCommand;\n    clearAllOutputs: typeof actionCreators.clearAllOutputs;\n    export: typeof actionCreators.export;\n    exportAs: typeof actionCreators.exportAs;\n    addCell: typeof actionCreators.addCell;\n    save: typeof actionCreators.save;\n    executeAllCells: typeof actionCreators.executeAllCells;\n    toggleVariableExplorer: typeof actionCreators.toggleVariableExplorer;\n    setVariableExplorerHeight: typeof actionCreators.setVariableExplorerHeight;\n    executeAbove: typeof actionCreators.executeAbove;\n    executeCellAndBelow: typeof actionCreators.executeCellAndBelow;\n    restartKernel: typeof actionCreators.restartKernel;\n    interruptKernel: typeof actionCreators.interruptKernel;\n    selectKernel: typeof actionCreators.selectKernel;\n    selectServer: typeof actionCreators.selectServer;\n    launchNotebookTrustPrompt: typeof actionCreators.launchNotebookTrustPrompt;\n    isNotebookTrusted: boolean;\n};\n\nfunction mapStateToProps(state: IStore): INativeEditorDataProps {\n    return {\n        ...state.main,\n        cellCount: state.main.cellVMs.length,\n        selectionFocusedInfo: getSelectedAndFocusedInfo(state.main),\n        variablesVisible: state.variables.visible\n    };\n}\n\nexport class Toolbar extends React.PureComponent<INativeEditorToolbarProps> {\n    constructor(props: INativeEditorToolbarProps) {\n        super(props);\n    }\n\n    // tslint:disable: react-this-binding-issue\n    // tslint:disable-next-line: max-func-body-length\n    public render() {\n        const selectedInfo = this.props.selectionFocusedInfo;\n\n        const addCell = () => {\n            setTimeout(() => this.props.addCell(), 1);\n            this.props.sendCommand(NativeMouseCommandTelemetry.AddToEnd);\n        };\n        const runAll = () => {\n            // Run all cells currently available.\n            this.props.executeAllCells();\n            this.props.sendCommand(NativeMouseCommandTelemetry.RunAll);\n        };\n        const save = () => {\n            this.props.save();\n            this.props.sendCommand(NativeMouseCommandTelemetry.Save);\n        };\n        const toggleVariableExplorer = () => {\n            this.props.toggleVariableExplorer();\n            this.props.sendCommand(NativeMouseCommandTelemetry.ToggleVariableExplorer);\n        };\n        const variableExplorerTooltip = this.props.variablesVisible\n            ? getLocString('DataScience.collapseVariableExplorerTooltip', 'Hide variables active in jupyter kernel')\n            : getLocString('DataScience.expandVariableExplorerTooltip', 'Show variables active in jupyter kernel');\n        const runAbove = () => {\n            if (selectedInfo.selectedCellId) {\n                this.props.executeAbove(selectedInfo.selectedCellId);\n                this.props.sendCommand(NativeMouseCommandTelemetry.RunAbove);\n            }\n        };\n        const runBelow = () => {\n            if (selectedInfo.selectedCellId && typeof selectedInfo.selectedCellIndex === 'number') {\n                // tslint:disable-next-line: no-suspicious-comment\n                // TODO: Is the source going to be up to date during run below?\n                this.props.executeCellAndBelow(selectedInfo.selectedCellId);\n                this.props.sendCommand(NativeMouseCommandTelemetry.RunBelow);\n            }\n        };\n        const selectKernel = () => {\n            this.props.selectKernel();\n            this.props.sendCommand(NativeMouseCommandTelemetry.SelectKernel);\n        };\n        const selectServer = () => {\n            this.props.selectServer();\n            this.props.sendCommand(NativeMouseCommandTelemetry.SelectServer);\n        };\n        const launchNotebookTrustPrompt = () => {\n            if (!this.props.isNotebookTrusted) {\n                this.props.launchNotebookTrustPrompt();\n            }\n        };\n        const canRunAbove = (selectedInfo.selectedCellIndex ?? -1) > 0;\n        const canRunBelow =\n            (selectedInfo.selectedCellIndex ?? -1) < this.props.cellCount - 1 &&\n            (selectedInfo.selectedCellId || '').length > 0;\n\n        const canRestartAndInterruptKernel = this.props.kernel.jupyterServerStatus !== ServerStatus.NotStarted;\n\n        return (\n            <div id=\"toolbar-panel\">\n                <div className=\"toolbar-menu-bar\">\n                    <div className=\"toolbar-menu-bar-child\">\n                        <ImageButton\n                            baseTheme={this.props.baseTheme}\n                            onClick={runAll}\n                            disabled={this.props.busy || !this.props.isNotebookTrusted}\n                            className=\"native-button\"\n                            tooltip={getLocString('DataScience.runAll', 'Run All Cells')}\n                        >\n                            <Image\n                                baseTheme={this.props.baseTheme}\n                                class=\"image-button-image\"\n                                image={ImageName.RunAll}\n                            />\n                        </ImageButton>\n                        <ImageButton\n                            baseTheme={this.props.baseTheme}\n                            onClick={runAbove}\n                            disabled={!canRunAbove || this.props.busy || !this.props.isNotebookTrusted}\n                            className=\"native-button\"\n                            tooltip={getLocString('DataScience.runAbove', 'Run cells above')}\n                        >\n                            <Image\n                                baseTheme={this.props.baseTheme}\n                                class=\"image-button-image\"\n                                image={ImageName.RunAbove}\n                            />\n                        </ImageButton>\n                        <ImageButton\n                            baseTheme={this.props.baseTheme}\n                            onClick={runBelow}\n                            disabled={!canRunBelow || this.props.busy || !this.props.isNotebookTrusted}\n                            className=\"native-button\"\n                            tooltip={getLocString('DataScience.runBelow', 'Run cell and below')}\n                        >\n                            <Image\n                                baseTheme={this.props.baseTheme}\n                                class=\"image-button-image\"\n                                image={ImageName.RunBelow}\n                            />\n                        </ImageButton>\n                        <ImageButton\n                            baseTheme={this.props.baseTheme}\n                            onClick={this.props.restartKernel}\n                            disabled={!canRestartAndInterruptKernel || !this.props.isNotebookTrusted}\n                            className=\"native-button\"\n                            tooltip={getLocString('DataScience.restartServer', 'Restart Jupyter kernel')}\n                        >\n                            <Image\n                                baseTheme={this.props.baseTheme}\n                                class=\"image-button-image\"\n                                image={ImageName.Restart}\n                            />\n                        </ImageButton>\n                        <ImageButton\n                            baseTheme={this.props.baseTheme}\n                            onClick={this.props.interruptKernel}\n                            disabled={!canRestartAndInterruptKernel || !this.props.isNotebookTrusted}\n                            className=\"native-button\"\n                            tooltip={getLocString('DataScience.interruptKernel', 'Interrupt Jupyter kernel')}\n                        >\n                            <Image\n                                baseTheme={this.props.baseTheme}\n                                class=\"image-button-image\"\n                                image={ImageName.Interrupt}\n                            />\n                        </ImageButton>\n                        <ImageButton\n                            baseTheme={this.props.baseTheme}\n                            onClick={addCell}\n                            disabled={!this.props.isNotebookTrusted}\n                            className=\"native-button\"\n                            tooltip={getLocString('DataScience.addNewCell', 'Insert cell')}\n                        >\n                            <Image\n                                baseTheme={this.props.baseTheme}\n                                class=\"image-button-image\"\n                                image={ImageName.InsertBelow}\n                            />\n                        </ImageButton>\n                        <ImageButton\n                            baseTheme={this.props.baseTheme}\n                            onClick={this.props.clearAllOutputs}\n                            disabled={!this.props.cellCount || !this.props.isNotebookTrusted}\n                            className=\"native-button\"\n                            tooltip={getLocString('DataScience.clearAllOutput', 'Clear All Output')}\n                        >\n                            <Image\n                                baseTheme={this.props.baseTheme}\n                                class=\"image-button-image\"\n                                image={ImageName.ClearAllOutput}\n                            />\n                        </ImageButton>\n                        <ImageButton\n                            baseTheme={this.props.baseTheme}\n                            onClick={toggleVariableExplorer}\n                            disabled={!this.props.isNotebookTrusted}\n                            className=\"native-button\"\n                            tooltip={variableExplorerTooltip}\n                        >\n                            <Image\n                                baseTheme={this.props.baseTheme}\n                                class=\"image-button-image\"\n                                image={ImageName.VariableExplorer}\n                            />\n                        </ImageButton>\n                        <ImageButton\n                            baseTheme={this.props.baseTheme}\n                            onClick={save}\n                            disabled={!this.props.dirty || !this.props.isNotebookTrusted}\n                            className=\"native-button\"\n                            tooltip={getLocString('DataScience.save', 'Save File')}\n                        >\n                            <Image\n                                baseTheme={this.props.baseTheme}\n                                class=\"image-button-image\"\n                                image={ImageName.SaveAs}\n                            />\n                        </ImageButton>\n                        <ImageButton\n                            baseTheme={this.props.baseTheme}\n                            onClick={this.props.exportAs}\n                            disabled={!this.props.cellCount || this.props.busy || !this.props.isNotebookTrusted}\n                            className=\"native-button\"\n                            tooltip={getLocString('DataScience.notebookExportAs', 'Export as')}\n                        >\n                            <Image\n                                baseTheme={this.props.baseTheme}\n                                class=\"image-button-image\"\n                                image={ImageName.ExportToPython}\n                            />\n                        </ImageButton>\n                    </div>\n                    <JupyterInfo\n                        baseTheme={this.props.baseTheme}\n                        font={this.props.font}\n                        kernel={this.props.kernel}\n                        selectServer={selectServer}\n                        selectKernel={selectKernel}\n                        shouldShowTrustMessage={true}\n                        isNotebookTrusted={this.props.isNotebookTrusted}\n                        launchNotebookTrustPrompt={launchNotebookTrustPrompt}\n                    />\n                </div>\n                <div className=\"toolbar-divider\" />\n            </div>\n        );\n    }\n}\n\nexport const ToolbarComponent = connect(mapStateToProps, actionCreators)(Toolbar);\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n'use strict';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { OSType } from '../../client/common/utils/platform';\nimport { NativeKeyboardCommandTelemetry, NativeMouseCommandTelemetry } from '../../client/datascience/constants';\nimport { buildSettingsCss } from '../interactive-common/buildSettingsCss';\nimport { ContentPanel, IContentPanelProps } from '../interactive-common/contentPanel';\nimport { handleLinkClick } from '../interactive-common/handlers';\nimport {\n    activeDebugState,\n    DebugState,\n    getSelectedAndFocusedInfo,\n    ICellViewModel,\n    IMainState\n} from '../interactive-common/mainState';\nimport { IMainWithVariables, IStore } from '../interactive-common/redux/store';\nimport { IVariablePanelProps, VariablePanel } from '../interactive-common/variablePanel';\nimport { getOSType } from '../react-common/constants';\nimport { ErrorBoundary } from '../react-common/errorBoundary';\nimport { getLocString } from '../react-common/locReactSide';\nimport { Progress } from '../react-common/progress';\nimport { AddCellLine } from './addCellLine';\nimport { getConnectedNativeCell } from './nativeCell';\nimport './nativeEditor.less';\nimport { actionCreators } from './redux/actions';\nimport { ToolbarComponent } from './toolbar';\n\ntype INativeEditorProps = IMainWithVariables & typeof actionCreators;\n\nfunction mapStateToProps(state: IStore): IMainWithVariables {\n    return { ...state.main, variableState: state.variables };\n}\n\nconst ConnectedNativeCell = getConnectedNativeCell();\n\nexport class NativeEditor extends React.Component<INativeEditorProps> {\n    private renderCount: number = 0;\n    private waitingForLoadRender = true;\n    private mainPanelToolbarRef: React.RefObject<HTMLDivElement> = React.createRef();\n\n    constructor(props: INativeEditorProps) {\n        super(props);\n        this.insertAboveFirst = this.insertAboveFirst.bind(this);\n    }\n\n    public componentDidMount() {\n        this.props.editorLoaded();\n        window.addEventListener('keydown', this.mainKeyDown);\n        window.addEventListener('resize', () => this.forceUpdate(), true);\n        document.addEventListener('click', this.linkClick, true);\n    }\n\n    public componentWillUnmount() {\n        window.removeEventListener('keydown', this.mainKeyDown);\n        window.removeEventListener('resize', () => this.forceUpdate());\n        document.removeEventListener('click', this.linkClick);\n        this.props.editorUnmounted();\n    }\n\n    public componentDidUpdate(prevProps: IMainState) {\n        if (this.props.loaded && !prevProps.loaded && this.waitingForLoadRender) {\n            this.waitingForLoadRender = false;\n            // After this render is complete (see this SO)\n            // https://stackoverflow.com/questions/26556436/react-after-render-code,\n            // indicate we are done loading. We want to wait for the render\n            // so we get accurate timing on first launch.\n            setTimeout(() => {\n                window.requestAnimationFrame(() => {\n                    this.props.loadedAllCells();\n                });\n            });\n        }\n    }\n\n    public render() {\n        const dynamicFont: React.CSSProperties = {\n            fontSize: this.props.font.size,\n            fontFamily: this.props.font.family\n        };\n\n        // If in test mode, update our count. Use this to determine how many renders a normal update takes.\n        if (this.props.testMode) {\n            this.renderCount = this.renderCount + 1;\n        }\n\n        // Update the state controller with our new state\n        const progressBar = (this.props.busy || !this.props.loaded) && !this.props.testMode ? <Progress /> : undefined;\n        const addCellLine =\n            this.props.cellVMs.length === 0 ? null : (\n                <AddCellLine\n                    includePlus={true}\n                    className=\"add-cell-line-top\"\n                    click={this.insertAboveFirst}\n                    baseTheme={this.props.baseTheme}\n                    isNotebookTrusted={this.props.isNotebookTrusted}\n                />\n            );\n\n        return (\n            <div id=\"main-panel\" role=\"Main\" style={dynamicFont}>\n                <div className=\"styleSetter\">\n                    <style>{`${this.props.rootCss ? this.props.rootCss : ''}\n${buildSettingsCss(this.props.settings)}`}</style>\n                </div>\n                <header ref={this.mainPanelToolbarRef} id=\"main-panel-toolbar\">\n                    {this.renderToolbarPanel()}\n                    {progressBar}\n                </header>\n                <section\n                    id=\"main-panel-variable\"\n                    aria-label={getLocString('DataScience.collapseVariableExplorerLabel', 'Variables')}\n                >\n                    {this.renderVariablePanel(this.props.baseTheme)}\n                </section>\n                <main id=\"main-panel-content\">\n                    {addCellLine}\n                    {this.renderContentPanel(this.props.baseTheme)}\n                </main>\n            </div>\n        );\n    }\n\n    private insertAboveFirst() {\n        setTimeout(() => this.props.insertAboveFirst(), 1);\n    }\n    private renderToolbarPanel() {\n        return <ToolbarComponent isNotebookTrusted={this.props.isNotebookTrusted}></ToolbarComponent>;\n    }\n\n    private renderVariablePanel(baseTheme: string) {\n        if (this.props.variableState.visible) {\n            const variableProps = this.getVariableProps(baseTheme);\n            return <VariablePanel {...variableProps} />;\n        }\n\n        return null;\n    }\n\n    private renderContentPanel(baseTheme: string) {\n        // Skip if the tokenizer isn't finished yet. It needs\n        // to finish loading so our code editors work.\n        if (!this.props.monacoReady && !this.props.testMode) {\n            return null;\n        }\n\n        // Otherwise render our cells.\n        const contentProps = this.getContentProps(baseTheme);\n        return <ContentPanel {...contentProps} />;\n    }\n\n    private getContentProps = (baseTheme: string): IContentPanelProps => {\n        return {\n            baseTheme: baseTheme,\n            cellVMs: this.props.cellVMs,\n            testMode: this.props.testMode,\n            codeTheme: this.props.codeTheme,\n            submittedText: this.props.submittedText,\n            skipNextScroll: this.props.skipNextScroll ? true : false,\n            editable: true,\n            renderCell: this.renderCell,\n            scrollToBottom: this.scrollDiv,\n            scrollBeyondLastLine: this.props.settings\n                ? this.props.settings.extraSettings.editor.scrollBeyondLastLine\n                : false\n        };\n    };\n    private getVariableProps = (baseTheme: string): IVariablePanelProps => {\n        let toolbarHeight = 0;\n        if (this.mainPanelToolbarRef.current) {\n            toolbarHeight = this.mainPanelToolbarRef.current.offsetHeight;\n        }\n        return {\n            variables: this.props.variableState.variables,\n            containerHeight: this.props.variableState.containerHeight,\n            gridHeight: this.props.variableState.gridHeight,\n            debugging: this.props.debugging,\n            busy: this.props.busy,\n            showDataExplorer: this.props.showDataViewer,\n            skipDefault: this.props.skipDefault,\n            testMode: this.props.testMode,\n            closeVariableExplorer: this.props.toggleVariableExplorer,\n            setVariableExplorerHeight: this.props.setVariableExplorerHeight,\n            baseTheme: baseTheme,\n            pageIn: this.pageInVariableData,\n            fontSize: this.props.font.size,\n            executionCount: this.props.currentExecutionCount,\n            refreshCount: this.props.variableState.refreshCount,\n            offsetHeight: toolbarHeight,\n            supportsDebugging:\n                this.props.settings && this.props.settings.variableOptions\n                    ? this.props.settings.variableOptions.enableDuringDebugger\n                    : false\n        };\n    };\n\n    private pageInVariableData = (startIndex: number, pageSize: number) => {\n        this.props.getVariableData(\n            this.props.currentExecutionCount,\n            this.props.variableState.refreshCount,\n            startIndex,\n            pageSize\n        );\n    };\n\n    private isNotebookTrusted = () => {\n        return this.props.isNotebookTrusted;\n    };\n\n    // tslint:disable-next-line: cyclomatic-complexity\n    private mainKeyDown = (event: KeyboardEvent) => {\n        if (!this.isNotebookTrusted()) {\n            return; // Disable keyboard interaction with untrusted notebooks\n        }\n        // Handler for key down presses in the main panel\n        switch (event.key) {\n            // tslint:disable-next-line: no-suspicious-comment\n            // TODO: How to have this work for when the keyboard shortcuts are changed?\n            case 's': {\n                if (!this.props.settings?.extraSettings.useCustomEditorApi) {\n                    if (\n                        (event.ctrlKey && getOSType() !== OSType.OSX) ||\n                        (event.metaKey && getOSType() === OSType.OSX)\n                    ) {\n                        // This is save, save our cells\n                        this.props.save();\n                        this.props.sendCommand(NativeKeyboardCommandTelemetry.Save);\n                    }\n                }\n                break;\n            }\n            case 'z':\n            case 'Z':\n                if (\n                    !getSelectedAndFocusedInfo(this.props).focusedCellId &&\n                    !this.props.settings?.extraSettings.useCustomEditorApi\n                ) {\n                    if (event.shiftKey && !event.ctrlKey && !event.altKey && !event.metaKey) {\n                        event.stopPropagation();\n                        this.props.redo();\n                        this.props.sendCommand(NativeKeyboardCommandTelemetry.Redo);\n                    } else if (!event.shiftKey && !event.altKey && !event.ctrlKey && !event.metaKey) {\n                        event.stopPropagation();\n                        this.props.undo();\n                        this.props.sendCommand(NativeKeyboardCommandTelemetry.Undo);\n                    }\n                }\n                break;\n\n            case 'F10':\n                if (this.props.debugging) {\n                    // Only allow step if debugging in break mode\n                    const debuggingCell = this.props.cellVMs.find((cvm) => cvm.runningByLine === DebugState.Break);\n                    if (debuggingCell) {\n                        this.props.step(debuggingCell.cell.id);\n                    }\n                    event.stopPropagation();\n                } else {\n                    // Otherwise if not debugging, run by line the current focused cell\n                    const focusedCell = getSelectedAndFocusedInfo(this.props).focusedCellId;\n                    if (focusedCell) {\n                        this.props.runByLine(focusedCell);\n                    }\n                }\n                break;\n            case 'F5':\n                if (this.props.debugging) {\n                    // Only allow continue if debugging in break mode\n                    const debuggingCell = this.props.cellVMs.find((cvm) => cvm.runningByLine === DebugState.Break);\n                    if (debuggingCell) {\n                        this.props.continue(debuggingCell.cell.id);\n                    }\n                    event.stopPropagation();\n                }\n                break;\n            default:\n                break;\n        }\n    };\n\n    // private copyToClipboard = (cellId: string) => {\n    //     const cell = this.props.findCell(cellId);\n    //     if (cell) {\n    //         // Need to do this in this process so it copies to the user's clipboard and not\n    //         // the remote clipboard where the extension is running\n    //         const textArea = document.createElement('textarea');\n    //         textArea.value = concatMultilineString(cell.cell.data.source);\n    //         document.body.appendChild(textArea);\n    //         textArea.select();\n    //         document.execCommand('Copy');\n    //         textArea.remove();\n    //     }\n    // }\n\n    // private pasteFromClipboard = (cellId: string) => {\n    //     const editedCells = this.props.cellVMs;\n    //     const index = editedCells.findIndex(x => x.cell.id === cellId) + 1;\n\n    //     if (index > -1) {\n    //         const textArea = document.createElement('textarea');\n    //         document.body.appendChild(textArea);\n    //         textArea.select();\n    //         document.execCommand('Paste');\n    //         editedCells[index].cell.data.source = textArea.value.split(/\\r?\\n/);\n    //         textArea.remove();\n    //     }\n\n    //     this.setState({\n    //         cellVMs: editedCells\n    //     });\n    // }\n\n    private renderCell = (cellVM: ICellViewModel, index: number): JSX.Element | null => {\n        // Don't render until we have settings\n        if (!this.props.settings || !this.props.editorOptions) {\n            return null;\n        }\n        const addNewCell = () => {\n            setTimeout(() => this.props.insertBelow(cellVM.cell.id), 1);\n            this.props.sendCommand(NativeMouseCommandTelemetry.AddToEnd);\n        };\n        const firstLine = index === 0;\n        const lastLine =\n            index === this.props.cellVMs.length - 1 ? (\n                <AddCellLine\n                    includePlus={true}\n                    baseTheme={this.props.baseTheme}\n                    className=\"add-cell-line-cell\"\n                    click={addNewCell}\n                    isNotebookTrusted={this.props.isNotebookTrusted}\n                />\n            ) : null;\n\n        const otherCellRunningByLine = this.props.cellVMs.find(\n            (cvm) => activeDebugState(cvm.runningByLine) && cvm.cell.id !== cellVM.cell.id\n        );\n        const maxOutputSize = this.props.settings.maxOutputSize;\n        const outputSizeLimit = 10000;\n        const maxTextSize =\n            maxOutputSize && maxOutputSize < outputSizeLimit && maxOutputSize > 0\n                ? maxOutputSize\n                : this.props.settings.enableScrollingForCellOutputs\n                ? 400\n                : undefined;\n\n        return (\n            <div key={cellVM.cell.id} id={cellVM.cell.id}>\n                <ErrorBoundary>\n                    <ConnectedNativeCell\n                        role=\"listitem\"\n                        maxTextSize={maxTextSize}\n                        enableScroll={this.props.settings.enableScrollingForCellOutputs}\n                        testMode={this.props.testMode}\n                        cellVM={cellVM}\n                        baseTheme={this.props.baseTheme}\n                        codeTheme={this.props.codeTheme}\n                        monacoTheme={this.props.monacoTheme}\n                        lastCell={lastLine !== null}\n                        firstCell={firstLine}\n                        font={this.props.font}\n                        allowUndo={this.props.undoStack.length > 0}\n                        editorOptions={this.props.editorOptions}\n                        themeMatplotlibPlots={this.props.settings.themeMatplotlibPlots}\n                        // Focus pending does not apply to native editor.\n                        focusPending={0}\n                        busy={this.props.busy}\n                        useCustomEditorApi={this.props.settings?.extraSettings.useCustomEditorApi}\n                        runningByLine={cellVM.runningByLine}\n                        supportsRunByLine={\n                            this.props.settings?.variableOptions?.enableDuringDebugger &&\n                            this.props.settings?.extraSettings.hasPythonExtension\n                                ? otherCellRunningByLine === undefined\n                                : false\n                        }\n                        language={this.props.kernel.language}\n                        isNotebookTrusted={this.props.isNotebookTrusted}\n                        externalButtons={this.props.externalButtons}\n                    />\n                </ErrorBoundary>\n                {lastLine}\n            </div>\n        );\n    };\n\n    private scrollDiv = (_div: HTMLDivElement) => {\n        // Doing nothing for now. This should be implemented once redux refactor is done.\n    };\n\n    private linkClick = (ev: MouseEvent) => {\n        handleLinkClick(ev, this.props.linkClick);\n    };\n}\n\n// Main export, return a redux connected editor\nexport function getConnectedNativeEditor() {\n    return connect(mapStateToProps, actionCreators)(NativeEditor);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n'use strict';\nimport { CssMessages } from '../../../../client/datascience/messages';\nimport { IJupyterExtraSettings } from '../../../../client/datascience/types';\nimport { getSelectedAndFocusedInfo, IMainState } from '../../../interactive-common/mainState';\nimport { postActionToExtension } from '../../../interactive-common/redux/helpers';\nimport { Helpers } from '../../../interactive-common/redux/reducers/helpers';\nimport { ICellAction, ICellAndCursorAction } from '../../../interactive-common/redux/reducers/types';\nimport { computeEditorOptions } from '../../../react-common/settingsReactSide';\nimport { NativeEditorReducerArg } from '../mapping';\n\nexport namespace Effects {\n    export function focusCell(arg: NativeEditorReducerArg<ICellAndCursorAction>): IMainState {\n        // Do nothing if already the focused cell.\n        let selectionInfo = getSelectedAndFocusedInfo(arg.prevState);\n        if (selectionInfo.focusedCellId !== arg.payload.data.cellId) {\n            let prevState = arg.prevState;\n\n            // Ensure we unfocus & unselect all cells.\n            while (selectionInfo.focusedCellId || selectionInfo.selectedCellId) {\n                selectionInfo = getSelectedAndFocusedInfo(prevState);\n                // First find the old focused cell and unfocus it\n                let removeFocusIndex = selectionInfo.focusedCellIndex;\n                if (typeof removeFocusIndex !== 'number') {\n                    removeFocusIndex = selectionInfo.selectedCellIndex;\n                }\n\n                if (typeof removeFocusIndex === 'number') {\n                    prevState = unfocusCell({\n                        ...arg,\n                        prevState,\n                        payload: {\n                            ...arg.payload,\n                            data: { cellId: prevState.cellVMs[removeFocusIndex].cell.id }\n                        }\n                    });\n                    prevState = deselectCell({\n                        ...arg,\n                        prevState,\n                        payload: { ...arg.payload, data: { cellId: prevState.cellVMs[removeFocusIndex].cell.id } }\n                    });\n                }\n            }\n\n            const newVMs = [...prevState.cellVMs];\n\n            // Add focus on new cell\n            const addFocusIndex = newVMs.findIndex((c) => c.cell.id === arg.payload.data.cellId);\n            if (addFocusIndex >= 0) {\n                newVMs[addFocusIndex] = {\n                    ...newVMs[addFocusIndex],\n                    focused: true,\n                    selected: true,\n                    cursorPos: arg.payload.data.cursorPos\n                };\n            }\n\n            return {\n                ...prevState,\n                cellVMs: newVMs\n            };\n        }\n\n        return arg.prevState;\n    }\n\n    export function unfocusCell(arg: NativeEditorReducerArg<ICellAction>): IMainState {\n        // Unfocus the cell\n        const index = arg.prevState.cellVMs.findIndex((c) => c.cell.id === arg.payload.data.cellId);\n        const selectionInfo = getSelectedAndFocusedInfo(arg.prevState);\n        if (index >= 0 && selectionInfo.focusedCellId === arg.payload.data.cellId) {\n            const newVMs = [...arg.prevState.cellVMs];\n            const current = arg.prevState.cellVMs[index];\n            const newCell = {\n                ...current,\n                focused: false\n            };\n\n            // tslint:disable-next-line: no-any\n            newVMs[index] = Helpers.asCellViewModel(newCell); // This is because IMessageCell doesn't fit in here\n\n            return {\n                ...arg.prevState,\n                cellVMs: newVMs\n            };\n        } else if (index >= 0) {\n            // Dont change focus state if not the focused cell. Just update the code.\n            const newVMs = [...arg.prevState.cellVMs];\n            const current = arg.prevState.cellVMs[index];\n            const newCell = {\n                ...current\n            };\n\n            // tslint:disable-next-line: no-any\n            newVMs[index] = newCell as any; // This is because IMessageCell doesn't fit in here\n\n            return {\n                ...arg.prevState,\n                cellVMs: newVMs\n            };\n        }\n\n        return arg.prevState;\n    }\n\n    export function deselectCell(arg: NativeEditorReducerArg<ICellAction>): IMainState {\n        const index = arg.prevState.cellVMs.findIndex((c) => c.cell.id === arg.payload.data.cellId);\n        const selectionInfo = getSelectedAndFocusedInfo(arg.prevState);\n        if (index >= 0 && selectionInfo.selectedCellId === arg.payload.data.cellId) {\n            const newVMs = [...arg.prevState.cellVMs];\n            const target = arg.prevState.cellVMs[index];\n            const newCell = {\n                ...target,\n                selected: false\n            };\n\n            // tslint:disable-next-line: no-any\n            newVMs[index] = newCell as any; // This is because IMessageCell doesn't fit in here\n\n            return {\n                ...arg.prevState,\n                cellVMs: newVMs\n            };\n        }\n\n        return arg.prevState;\n    }\n\n    /**\n     * Select a cell.\n     *\n     * @param {boolean} [shouldFocusCell] If provided, then will control the focus behavior of the cell. (defaults to focus state of previously selected cell).\n     */\n    export function selectCell(\n        arg: NativeEditorReducerArg<ICellAndCursorAction>,\n        shouldFocusCell?: boolean\n    ): IMainState {\n        // Skip doing anything if already selected.\n        const selectionInfo = getSelectedAndFocusedInfo(arg.prevState);\n        if (arg.payload.data.cellId !== selectionInfo.selectedCellId) {\n            let prevState = arg.prevState;\n            const addIndex = prevState.cellVMs.findIndex((c) => c.cell.id === arg.payload.data.cellId);\n            const someOtherCellWasFocusedAndSelected =\n                selectionInfo.focusedCellId === selectionInfo.selectedCellId && !!selectionInfo.focusedCellId;\n            // First find the old focused cell and unfocus it\n            let removeFocusIndex = arg.prevState.cellVMs.findIndex((c) => c.cell.id === selectionInfo.focusedCellId);\n            if (removeFocusIndex < 0) {\n                removeFocusIndex = arg.prevState.cellVMs.findIndex((c) => c.cell.id === selectionInfo.selectedCellId);\n            }\n\n            if (removeFocusIndex >= 0) {\n                prevState = unfocusCell({\n                    ...arg,\n                    prevState,\n                    payload: {\n                        ...arg.payload,\n                        data: { cellId: prevState.cellVMs[removeFocusIndex].cell.id }\n                    }\n                });\n                prevState = deselectCell({\n                    ...arg,\n                    prevState,\n                    payload: { ...arg.payload, data: { cellId: prevState.cellVMs[removeFocusIndex].cell.id } }\n                });\n            }\n\n            const newVMs = [...prevState.cellVMs];\n            if (addIndex >= 0 && arg.payload.data.cellId !== selectionInfo.selectedCellId) {\n                newVMs[addIndex] = {\n                    ...newVMs[addIndex],\n                    focused:\n                        typeof shouldFocusCell === 'boolean' ? shouldFocusCell : someOtherCellWasFocusedAndSelected,\n                    selected: true,\n                    cursorPos: arg.payload.data.cursorPos\n                };\n            }\n\n            return {\n                ...prevState,\n                cellVMs: newVMs\n            };\n        }\n        return arg.prevState;\n    }\n\n    export function toggleLineNumbers(arg: NativeEditorReducerArg<ICellAction>): IMainState {\n        const index = arg.prevState.cellVMs.findIndex((c) => c.cell.id === arg.payload.data.cellId);\n        if (index >= 0) {\n            const newVMs = [...arg.prevState.cellVMs];\n            newVMs[index] = { ...newVMs[index], showLineNumbers: !newVMs[index].showLineNumbers };\n            return {\n                ...arg.prevState,\n                cellVMs: newVMs\n            };\n        }\n        return arg.prevState;\n    }\n\n    export function toggleOutput(arg: NativeEditorReducerArg<ICellAction>): IMainState {\n        const index = arg.prevState.cellVMs.findIndex((c) => c.cell.id === arg.payload.data.cellId);\n        if (index >= 0) {\n            const newVMs = [...arg.prevState.cellVMs];\n            newVMs[index] = { ...newVMs[index], hideOutput: !newVMs[index].hideOutput };\n            return {\n                ...arg.prevState,\n                cellVMs: newVMs\n            };\n        }\n        return arg.prevState;\n    }\n\n    export function updateSettings(arg: NativeEditorReducerArg<string>): IMainState {\n        // String arg should be the IDataScienceExtraSettings\n        const newSettingsJSON = JSON.parse(arg.payload.data);\n        const newSettings = <IJupyterExtraSettings>newSettingsJSON;\n        const newEditorOptions = computeEditorOptions(newSettings);\n        const newFontFamily = newSettings.extraSettings\n            ? newSettings.extraSettings.editor.fontFamily\n            : arg.prevState.font.family;\n        const newFontSize = newSettings.extraSettings\n            ? newSettings.extraSettings.editor.fontSize\n            : arg.prevState.font.size;\n\n        // Ask for new theme data if necessary\n        if (\n            newSettings &&\n            newSettings.extraSettings &&\n            newSettings.extraSettings.theme !== arg.prevState.vscodeThemeName\n        ) {\n            const knownDark = Helpers.computeKnownDark(newSettings);\n            // User changed the current theme. Rerender\n            postActionToExtension(arg, CssMessages.GetCssRequest, { isDark: knownDark });\n            postActionToExtension(arg, CssMessages.GetMonacoThemeRequest, { isDark: knownDark });\n        }\n\n        return {\n            ...arg.prevState,\n            settings: newSettings,\n            editorOptions: { ...newEditorOptions, lineDecorationsWidth: 5 },\n            font: {\n                size: newFontSize,\n                family: newFontFamily\n            }\n        };\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n'use strict';\n// tslint:disable-next-line: no-require-imports no-var-requires\nconst cloneDeep = require('lodash/cloneDeep');\nimport * as uuid from 'uuid/v4';\nimport { DebugProtocol } from 'vscode-debugprotocol';\nimport { InteractiveWindowMessages } from '../../../../client/datascience/interactive-common/interactiveWindowTypes';\nimport { CellState, ICell } from '../../../../client/datascience/types';\nimport { concatMultilineString } from '../../../common';\nimport { createCellFrom } from '../../../common/cellFactory';\nimport {\n    CursorPos,\n    DebugState,\n    getSelectedAndFocusedInfo,\n    ICellViewModel,\n    IMainState\n} from '../../../interactive-common/mainState';\nimport { postActionToExtension, queueIncomingActionWithPayload } from '../../../interactive-common/redux/helpers';\nimport { Helpers } from '../../../interactive-common/redux/reducers/helpers';\nimport { Transfer } from '../../../interactive-common/redux/reducers/transfer';\nimport {\n    CommonActionType,\n    ICellAction,\n    IChangeCellTypeAction,\n    IExecuteAction\n} from '../../../interactive-common/redux/reducers/types';\nimport { NativeEditorReducerArg } from '../mapping';\nimport { Effects } from './effects';\n\nexport namespace Execution {\n    function executeRange(\n        prevState: IMainState,\n        cellIds: string[],\n        // tslint:disable-next-line: no-any\n        originalArg: NativeEditorReducerArg<any>\n    ): IMainState {\n        const newVMs = [...prevState.cellVMs];\n        const cellIdsToExecute: string[] = [];\n        cellIds.forEach((cellId) => {\n            const index = prevState.cellVMs.findIndex((cell) => cell.cell.id === cellId);\n            if (index === -1) {\n                return;\n            }\n            const orig = prevState.cellVMs[index];\n            // noop if the submitted code is just a cell marker\n            if (orig.cell.data.cell_type === 'code' && concatMultilineString(orig.cell.data.source)) {\n                // When cloning cells, preserve the metadata (hence deep clone).\n                const clonedCell = cloneDeep(orig.cell.data);\n                // Update our input cell to be in progress again and clear outputs\n                clonedCell.outputs = [];\n                newVMs[index] = Helpers.asCellViewModel({\n                    ...orig,\n                    cell: { ...orig.cell, state: CellState.executing, data: clonedCell }\n                });\n                cellIdsToExecute.push(orig.cell.id);\n            }\n        });\n\n        // If any cells to execute, execute them all\n        if (cellIdsToExecute.length > 0) {\n            // Send a message if a code cell\n            postActionToExtension(originalArg, InteractiveWindowMessages.ReExecuteCells, {\n                cellIds: cellIdsToExecute\n            });\n        }\n\n        return {\n            ...prevState,\n            cellVMs: newVMs\n        };\n    }\n\n    export function executeAbove(arg: NativeEditorReducerArg<ICellAction>): IMainState {\n        const index = arg.prevState.cellVMs.findIndex((c) => c.cell.id === arg.payload.data.cellId);\n        if (index > 0) {\n            // Get all cellIds until `index`.\n            const cellIds = arg.prevState.cellVMs.slice(0, index).map((cellVm) => cellVm.cell.id);\n            return executeRange(arg.prevState, cellIds, arg);\n        }\n        return arg.prevState;\n    }\n\n    export function executeCellAndAdvance(arg: NativeEditorReducerArg<IExecuteAction>): IMainState {\n        queueIncomingActionWithPayload(arg, CommonActionType.EXECUTE_CELL, {\n            cellId: arg.payload.data.cellId,\n            moveOp: arg.payload.data.moveOp\n        });\n        if (arg.payload.data.moveOp === 'add') {\n            const newCellId = uuid();\n            queueIncomingActionWithPayload(arg, CommonActionType.INSERT_BELOW, {\n                cellId: arg.payload.data.cellId,\n                newCellId\n            });\n            queueIncomingActionWithPayload(arg, CommonActionType.FOCUS_CELL, {\n                cellId: newCellId,\n                cursorPos: CursorPos.Current\n            });\n        }\n        return arg.prevState;\n    }\n\n    export function executeCell(arg: NativeEditorReducerArg<IExecuteAction>): IMainState {\n        const index = arg.prevState.cellVMs.findIndex((c) => c.cell.id === arg.payload.data.cellId);\n        if (index >= 0 && arg.payload.data.cellId) {\n            // Start executing this cell.\n            const executeResult = executeRange(arg.prevState, [arg.payload.data.cellId], arg);\n\n            // Modify the execute result if moving\n            if (arg.payload.data.moveOp === 'select') {\n                // Select the cell below this one, but don't focus it\n                if (index < arg.prevState.cellVMs.length - 1) {\n                    return Effects.selectCell(\n                        {\n                            ...arg,\n                            prevState: {\n                                ...executeResult\n                            },\n                            payload: {\n                                ...arg.payload,\n                                data: {\n                                    ...arg.payload.data,\n                                    cellId: arg.prevState.cellVMs[index + 1].cell.id,\n                                    cursorPos: CursorPos.Current\n                                }\n                            }\n                        },\n                        // Select the next cell, but do not set focus to it.\n                        false\n                    );\n                }\n                return executeResult;\n            } else {\n                return executeResult;\n            }\n        }\n        return arg.prevState;\n    }\n\n    export function executeCellAndBelow(arg: NativeEditorReducerArg<ICellAction>): IMainState {\n        const index = arg.prevState.cellVMs.findIndex((c) => c.cell.id === arg.payload.data.cellId);\n        if (index >= 0) {\n            // Get all cellIds starting from `index`.\n            const cellIds = arg.prevState.cellVMs.slice(index).map((cellVm) => cellVm.cell.id);\n            return executeRange(arg.prevState, cellIds, arg);\n        }\n        return arg.prevState;\n    }\n\n    export function executeAllCells(arg: NativeEditorReducerArg): IMainState {\n        if (arg.prevState.cellVMs.length > 0) {\n            const cellIds = arg.prevState.cellVMs.map((cellVm) => cellVm.cell.id);\n            return executeRange(arg.prevState, cellIds, arg);\n        }\n        return arg.prevState;\n    }\n\n    export function executeSelectedCell(arg: NativeEditorReducerArg): IMainState {\n        // This is the same thing as executing the selected cell\n        const selectionInfo = getSelectedAndFocusedInfo(arg.prevState);\n        const index = arg.prevState.cellVMs.findIndex((c) => c.cell.id === selectionInfo.selectedCellId);\n        if (selectionInfo.selectedCellId && index >= 0) {\n            return executeCell({\n                ...arg,\n                payload: {\n                    ...arg.payload,\n                    data: {\n                        cellId: selectionInfo.selectedCellId,\n                        moveOp: 'none'\n                    }\n                }\n            });\n        }\n\n        return arg.prevState;\n    }\n\n    export function clearAllOutputs(arg: NativeEditorReducerArg): IMainState {\n        const newList = arg.prevState.cellVMs.map((cellVM) => {\n            return Helpers.asCellViewModel({\n                ...cellVM,\n                cell: { ...cellVM.cell, data: { ...cellVM.cell.data, outputs: [], execution_count: null } }\n            });\n        });\n\n        Transfer.postModelClearOutputs(arg);\n\n        return {\n            ...arg.prevState,\n            cellVMs: newList\n        };\n    }\n\n    export function changeCellType(arg: NativeEditorReducerArg<IChangeCellTypeAction>): IMainState {\n        const index = arg.prevState.cellVMs.findIndex((c) => c.cell.id === arg.payload.data.cellId);\n        if (index >= 0) {\n            const cellVMs = [...arg.prevState.cellVMs];\n            const current = arg.prevState.cellVMs[index];\n            const newType = current.cell.data.cell_type === 'code' ? 'markdown' : 'code';\n            const newNotebookCell = createCellFrom(current.cell.data, newType);\n            const newCell: ICellViewModel = {\n                ...current,\n                cell: {\n                    ...current.cell,\n                    data: newNotebookCell\n                }\n            };\n            cellVMs[index] = newCell;\n            Transfer.changeCellType(arg, cellVMs[index].cell);\n\n            return {\n                ...arg.prevState,\n                cellVMs\n            };\n        }\n\n        return arg.prevState;\n    }\n\n    export function undo(arg: NativeEditorReducerArg): IMainState {\n        if (arg.prevState.undoStack.length > 0) {\n            // Pop one off of our undo stack and update our redo\n            const cells = arg.prevState.undoStack[arg.prevState.undoStack.length - 1];\n            const undoStack = arg.prevState.undoStack.slice(0, arg.prevState.undoStack.length - 1);\n            const redoStack = Helpers.pushStack(arg.prevState.redoStack, arg.prevState.cellVMs);\n            postActionToExtension(arg, InteractiveWindowMessages.Undo);\n            return {\n                ...arg.prevState,\n                cellVMs: cells,\n                undoStack: undoStack,\n                redoStack: redoStack,\n                skipNextScroll: true\n            };\n        }\n\n        return arg.prevState;\n    }\n\n    export function redo(arg: NativeEditorReducerArg): IMainState {\n        if (arg.prevState.redoStack.length > 0) {\n            // Pop one off of our redo stack and update our undo\n            const cells = arg.prevState.redoStack[arg.prevState.redoStack.length - 1];\n            const redoStack = arg.prevState.redoStack.slice(0, arg.prevState.redoStack.length - 1);\n            const undoStack = Helpers.pushStack(arg.prevState.undoStack, arg.prevState.cellVMs);\n            postActionToExtension(arg, InteractiveWindowMessages.Redo);\n            return {\n                ...arg.prevState,\n                cellVMs: cells,\n                undoStack: undoStack,\n                redoStack: redoStack,\n                skipNextScroll: true\n            };\n        }\n\n        return arg.prevState;\n    }\n\n    export function continueExec(arg: NativeEditorReducerArg<ICellAction>): IMainState {\n        const index = arg.prevState.cellVMs.findIndex((cv) => cv.cell.id === arg.payload.data.cellId);\n        if (index >= 0) {\n            postActionToExtension(arg, InteractiveWindowMessages.Continue);\n        }\n        return arg.prevState;\n    }\n\n    export function step(arg: NativeEditorReducerArg<ICellAction>): IMainState {\n        const index = arg.prevState.cellVMs.findIndex((cv) => cv.cell.id === arg.payload.data.cellId);\n        if (index >= 0) {\n            postActionToExtension(arg, InteractiveWindowMessages.Step);\n        }\n        return arg.prevState;\n    }\n\n    export function runByLine(arg: NativeEditorReducerArg<ICellAction>): IMainState {\n        const index = arg.prevState.cellVMs.findIndex((cv) => cv.cell.id === arg.payload.data.cellId);\n        if (index >= 0) {\n            postActionToExtension(arg, InteractiveWindowMessages.RunByLine, {\n                cell: arg.prevState.cellVMs[index].cell,\n                expectedExecutionCount: arg.prevState.currentExecutionCount + 1\n            });\n            const newVM = {\n                ...arg.prevState.cellVMs[index],\n                runningByLine: DebugState.Run\n            };\n            const newVMs = [...arg.prevState.cellVMs];\n            newVMs[index] = newVM;\n            return {\n                ...arg.prevState,\n                cellVMs: newVMs\n            };\n        }\n        return arg.prevState;\n    }\n\n    export function handleBreakState(\n        arg: NativeEditorReducerArg<{ frames: DebugProtocol.StackFrame[]; cell: ICell }>\n    ): IMainState {\n        const index = arg.prevState.cellVMs.findIndex((cv) => cv.cell.id === arg.payload.data.cell.id);\n        if (index >= 0) {\n            const newVM = {\n                ...arg.prevState.cellVMs[index],\n                runningByLine: DebugState.Break,\n                currentStack: arg.payload.data.frames\n            };\n            const newVMs = [...arg.prevState.cellVMs];\n            newVMs[index] = newVM;\n            return {\n                ...arg.prevState,\n                cellVMs: newVMs\n            };\n        }\n        return arg.prevState;\n    }\n\n    export function handleContinue(arg: NativeEditorReducerArg<ICell>): IMainState {\n        const index = arg.prevState.cellVMs.findIndex((cv) => cv.cell.id === arg.payload.data.id);\n        if (index >= 0) {\n            const newVM = {\n                ...arg.prevState.cellVMs[index],\n                runningByLine: DebugState.Run,\n                currentStack: undefined\n            };\n            const newVMs = [...arg.prevState.cellVMs];\n            newVMs[index] = newVM;\n            return {\n                ...arg.prevState,\n                cellVMs: newVMs\n            };\n        }\n        return arg.prevState;\n    }\n\n    export function startDebugging(arg: NativeEditorReducerArg): IMainState {\n        return {\n            ...arg.prevState,\n            debugging: true\n        };\n    }\n\n    export function stopDebugging(arg: NativeEditorReducerArg): IMainState {\n        // Clear out any cells that have frames\n        const index = arg.prevState.cellVMs.findIndex((cvm) => cvm.currentStack);\n        const newVMs = [...arg.prevState.cellVMs];\n        if (index >= 0) {\n            const newVM = {\n                ...newVMs[index],\n                currentStack: undefined\n            };\n            newVMs[index] = newVM;\n        }\n        return {\n            ...arg.prevState,\n            cellVMs: newVMs,\n            debugging: false\n        };\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n'use strict';\nimport { CursorPos, IMainState } from '../../../interactive-common/mainState';\nimport { queueIncomingActionWithPayload } from '../../../interactive-common/redux/helpers';\nimport { Helpers } from '../../../interactive-common/redux/reducers/helpers';\nimport { Transfer } from '../../../interactive-common/redux/reducers/transfer';\nimport { CommonActionType, ICellAction, ICodeAction } from '../../../interactive-common/redux/reducers/types';\nimport { NativeEditorReducerArg } from '../mapping';\n\nexport namespace Movement {\n    export function swapCells(arg: NativeEditorReducerArg<{ firstCellId: string; secondCellId: string }>) {\n        const newVMs = [...arg.prevState.cellVMs];\n        const first = newVMs.findIndex((cvm) => cvm.cell.id === arg.payload.data.firstCellId);\n        const second = newVMs.findIndex((cvm) => cvm.cell.id === arg.payload.data.secondCellId);\n        if (first >= 0 && second >= 0 && first !== second) {\n            const temp = newVMs[first];\n            newVMs[first] = newVMs[second];\n            newVMs[second] = temp;\n            Transfer.postModelSwap(arg, arg.payload.data.firstCellId, arg.payload.data.secondCellId);\n            return {\n                ...arg.prevState,\n                cellVMs: newVMs,\n                undoStack: Helpers.pushStack(arg.prevState.undoStack, arg.prevState.cellVMs)\n            };\n        }\n\n        return arg.prevState;\n    }\n\n    export function moveCellUp(arg: NativeEditorReducerArg<ICellAction>): IMainState {\n        const index = arg.prevState.cellVMs.findIndex((cvm) => cvm.cell.id === arg.payload.data.cellId);\n        if (index > 0 && arg.payload.data.cellId) {\n            return swapCells({\n                ...arg,\n                payload: {\n                    ...arg.payload,\n                    data: {\n                        firstCellId: arg.prevState.cellVMs[index - 1].cell.id,\n                        secondCellId: arg.payload.data.cellId\n                    }\n                }\n            });\n        }\n\n        return arg.prevState;\n    }\n\n    export function moveCellDown(arg: NativeEditorReducerArg<ICellAction>): IMainState {\n        const newVMs = [...arg.prevState.cellVMs];\n        const index = newVMs.findIndex((cvm) => cvm.cell.id === arg.payload.data.cellId);\n        if (index < newVMs.length - 1 && arg.payload.data.cellId) {\n            return swapCells({\n                ...arg,\n                payload: {\n                    ...arg.payload,\n                    data: {\n                        firstCellId: arg.payload.data.cellId,\n                        secondCellId: arg.prevState.cellVMs[index + 1].cell.id\n                    }\n                }\n            });\n        }\n\n        return arg.prevState;\n    }\n\n    export function arrowUp(arg: NativeEditorReducerArg<ICodeAction>): IMainState {\n        const index = arg.prevState.cellVMs.findIndex((c) => c.cell.id === arg.payload.data.cellId);\n        if (index > 0) {\n            queueIncomingActionWithPayload(arg, CommonActionType.SELECT_CELL, {\n                cellId: arg.prevState.cellVMs[index - 1].cell.id,\n                cursorPos: CursorPos.Bottom\n            });\n        }\n\n        return arg.prevState;\n    }\n\n    export function arrowDown(arg: NativeEditorReducerArg<ICodeAction>): IMainState {\n        const index = arg.prevState.cellVMs.findIndex((c) => c.cell.id === arg.payload.data.cellId);\n        if (index < arg.prevState.cellVMs.length - 1) {\n            queueIncomingActionWithPayload(arg, CommonActionType.SELECT_CELL, {\n                cellId: arg.prevState.cellVMs[index + 1].cell.id,\n                cursorPos: CursorPos.Top\n            });\n        }\n\n        return arg.prevState;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n'use strict';\n\nimport { noop } from '../../../../client/common/utils/misc';\nimport {\n    IEditorContentChange,\n    IFinishCell,\n    ILoadAllCells,\n    NotebookModelChange\n} from '../../../../client/datascience/interactive-common/interactiveWindowTypes';\nimport { ICell, IJupyterExtraSettings } from '../../../../client/datascience/types';\nimport { splitMultilineString } from '../../../common';\nimport {\n    createCellVM,\n    createEmptyCell,\n    CursorPos,\n    DebugState,\n    extractInputText,\n    getSelectedAndFocusedInfo,\n    ICellViewModel,\n    IMainState\n} from '../../../interactive-common/mainState';\nimport { queueIncomingActionWithPayload } from '../../../interactive-common/redux/helpers';\nimport { Helpers } from '../../../interactive-common/redux/reducers/helpers';\nimport { Transfer } from '../../../interactive-common/redux/reducers/transfer';\nimport { CommonActionType, IAddCellAction, ICellAction } from '../../../interactive-common/redux/reducers/types';\nimport { NativeEditorReducerArg } from '../mapping';\nimport { Effects } from './effects';\nimport { Execution } from './execution';\nimport { Movement } from './movement';\n\nexport namespace Creation {\n    function prepareCellVM(cell: ICell, hasBeenRun: boolean, settings?: IJupyterExtraSettings): ICellViewModel {\n        const cellVM: ICellViewModel = createCellVM(cell, settings, true, false);\n\n        // Set initial cell visibility and collapse\n        cellVM.editable = true;\n\n        // Always have the cell input text open\n        const newText = extractInputText(cellVM, settings);\n\n        cellVM.inputBlockOpen = true;\n        cell.data.source = splitMultilineString(newText);\n        cellVM.hasBeenRun = hasBeenRun;\n\n        return cellVM;\n    }\n\n    export function addAndFocusCell(arg: NativeEditorReducerArg<IAddCellAction>): IMainState {\n        queueIncomingActionWithPayload(arg, CommonActionType.ADD_NEW_CELL, { newCellId: arg.payload.data.newCellId });\n        queueIncomingActionWithPayload(arg, CommonActionType.FOCUS_CELL, {\n            cellId: arg.payload.data.newCellId,\n            cursorPos: CursorPos.Current\n        });\n        return arg.prevState;\n    }\n\n    export function insertAboveAndFocusCell(arg: NativeEditorReducerArg<IAddCellAction & ICellAction>): IMainState {\n        queueIncomingActionWithPayload(arg, CommonActionType.INSERT_ABOVE, {\n            cellId: arg.payload.data.cellId,\n            newCellId: arg.payload.data.newCellId\n        });\n        queueIncomingActionWithPayload(arg, CommonActionType.SELECT_CELL, {\n            cellId: arg.payload.data.newCellId,\n            cursorPos: CursorPos.Current\n        });\n        return arg.prevState;\n    }\n\n    export function insertBelowAndFocusCell(arg: NativeEditorReducerArg<IAddCellAction & ICellAction>): IMainState {\n        queueIncomingActionWithPayload(arg, CommonActionType.INSERT_BELOW, {\n            cellId: arg.payload.data.cellId,\n            newCellId: arg.payload.data.newCellId\n        });\n        queueIncomingActionWithPayload(arg, CommonActionType.SELECT_CELL, {\n            cellId: arg.payload.data.newCellId,\n            cursorPos: CursorPos.Current\n        });\n        return arg.prevState;\n    }\n\n    export function insertAboveFirstAndFocusCell(arg: NativeEditorReducerArg<IAddCellAction>): IMainState {\n        queueIncomingActionWithPayload(arg, CommonActionType.INSERT_ABOVE_FIRST, {\n            newCellId: arg.payload.data.newCellId\n        });\n        queueIncomingActionWithPayload(arg, CommonActionType.FOCUS_CELL, {\n            cellId: arg.payload.data.newCellId,\n            cursorPos: CursorPos.Current\n        });\n        return arg.prevState;\n    }\n\n    function insertAbove(arg: NativeEditorReducerArg<ICellAction & { vm: ICellViewModel }>): IMainState {\n        const newList = [...arg.prevState.cellVMs];\n        const newVM = arg.payload.data.vm;\n\n        // Find the position where we want to insert\n        let position = arg.prevState.cellVMs.findIndex((c) => c.cell.id === arg.payload.data.cellId);\n        if (position >= 0) {\n            newList.splice(position, 0, newVM);\n        } else {\n            newList.splice(0, 0, newVM);\n            position = 0;\n        }\n\n        const result = {\n            ...arg.prevState,\n            undoStack: Helpers.pushStack(arg.prevState.undoStack, arg.prevState.cellVMs),\n            cellVMs: newList\n        };\n\n        // Send a messsage that we inserted a cell\n        Transfer.postModelInsert(arg, position, newVM.cell, arg.payload.data.cellId);\n\n        return result;\n    }\n\n    export function insertExistingAbove(arg: NativeEditorReducerArg<ICellAction & { cell: ICell }>): IMainState {\n        const newVM = prepareCellVM(arg.payload.data.cell, false, arg.prevState.settings);\n        return insertAbove({\n            ...arg,\n            payload: {\n                ...arg.payload,\n                data: {\n                    cellId: arg.payload.data.cellId,\n                    vm: newVM\n                }\n            }\n        });\n    }\n\n    export function insertNewAbove(arg: NativeEditorReducerArg<ICellAction & IAddCellAction>): IMainState {\n        const newVM = prepareCellVM(createEmptyCell(arg.payload.data.newCellId, null), false, arg.prevState.settings);\n        return insertAbove({\n            ...arg,\n            payload: {\n                ...arg.payload,\n                data: {\n                    cellId: arg.payload.data.cellId,\n                    vm: newVM\n                }\n            }\n        });\n    }\n\n    export function insertBelow(arg: NativeEditorReducerArg<ICellAction & IAddCellAction>): IMainState {\n        const newVM = prepareCellVM(createEmptyCell(arg.payload.data.newCellId, null), false, arg.prevState.settings);\n        const newList = [...arg.prevState.cellVMs];\n\n        // Find the position where we want to insert\n        let position = arg.prevState.cellVMs.findIndex((c) => c.cell.id === arg.payload.data.cellId);\n        if (position >= 0) {\n            position += 1;\n            newList.splice(position, 0, newVM);\n        } else {\n            newList.push(newVM);\n            position = newList.length;\n        }\n\n        const result = {\n            ...arg.prevState,\n            undoStack: Helpers.pushStack(arg.prevState.undoStack, arg.prevState.cellVMs),\n            cellVMs: newList\n        };\n\n        // Send a messsage that we inserted a cell\n        Transfer.postModelInsert(arg, position, newVM.cell, arg.payload.data.cellId);\n\n        return result;\n    }\n\n    export function insertAboveFirst(arg: NativeEditorReducerArg<IAddCellAction>): IMainState {\n        // Get the first cell id\n        const firstCellId = arg.prevState.cellVMs.length > 0 ? arg.prevState.cellVMs[0].cell.id : undefined;\n\n        // Do what an insertAbove does\n        return insertNewAbove({\n            ...arg,\n            payload: { ...arg.payload, data: { cellId: firstCellId, newCellId: arg.payload.data.newCellId } }\n        });\n    }\n\n    export function addNewCell(arg: NativeEditorReducerArg<IAddCellAction>): IMainState {\n        // Do the same thing that an insertBelow does using the currently selected cell.\n        return insertBelow({\n            ...arg,\n            payload: {\n                ...arg.payload,\n                data: {\n                    cellId: getSelectedAndFocusedInfo(arg.prevState).selectedCellId,\n                    newCellId: arg.payload.data.newCellId\n                }\n            }\n        });\n    }\n\n    export function startCell(arg: NativeEditorReducerArg<ICell>): IMainState {\n        return Helpers.updateOrAdd(arg, (c: ICell, s: IMainState) => prepareCellVM(c, true, s.settings));\n    }\n\n    export function updateCell(arg: NativeEditorReducerArg<ICell>): IMainState {\n        return Helpers.updateOrAdd(arg, (c: ICell, s: IMainState) => prepareCellVM(c, true, s.settings));\n    }\n\n    export function finishCell(arg: NativeEditorReducerArg<IFinishCell>): IMainState {\n        return Helpers.updateOrAdd(\n            { ...arg, payload: { ...arg.payload, data: arg.payload.data.cell } },\n            (c: ICell, s: IMainState) => prepareCellVM(c, true, s.settings)\n        );\n    }\n\n    export function deleteAllCells(arg: NativeEditorReducerArg<IAddCellAction>): IMainState {\n        // Just leave one single blank empty cell\n        const newVM: ICellViewModel = {\n            cell: createEmptyCell(arg.payload.data.newCellId, null),\n            editable: true,\n            inputBlockOpen: true,\n            inputBlockShow: true,\n            inputBlockText: '',\n            inputBlockCollapseNeeded: false,\n            selected: false,\n            focused: false,\n            cursorPos: CursorPos.Current,\n            hasBeenRun: false,\n            scrollCount: 0,\n            runningByLine: DebugState.Design\n        };\n\n        Transfer.postModelRemoveAll(arg, newVM.cell.id);\n\n        return {\n            ...arg.prevState,\n            cellVMs: [newVM],\n            undoStack: Helpers.pushStack(arg.prevState.undoStack, arg.prevState.cellVMs)\n        };\n    }\n\n    export function applyCellEdit(\n        arg: NativeEditorReducerArg<{ id: string; changes: IEditorContentChange[] }>\n    ): IMainState {\n        const index = arg.prevState.cellVMs.findIndex((c) => c.cell.id === arg.payload.data.id);\n        if (index >= 0) {\n            const newVM = { ...arg.prevState.cellVMs[index] };\n            arg.payload.data.changes.forEach((c) => {\n                const source = newVM.inputBlockText;\n                const before = source.slice(0, c.rangeOffset);\n                // tslint:disable-next-line: restrict-plus-operands\n                const after = source.slice(c.rangeOffset + c.rangeLength);\n                newVM.inputBlockText = `${before}${c.text}${after}`;\n            });\n            newVM.codeVersion = newVM.codeVersion ? newVM.codeVersion + 1 : 1;\n            newVM.cell.data.source = splitMultilineString(newVM.inputBlockText);\n            newVM.cursorPos = arg.payload.data.changes[0].position;\n            const newVMs = [...arg.prevState.cellVMs];\n            newVMs[index] = Helpers.asCellViewModel(newVM);\n            // When editing, make sure we focus the edited cell (otherwise undo looks weird because it undoes a non focused cell)\n            return Effects.focusCell({\n                ...arg,\n                prevState: { ...arg.prevState, cellVMs: newVMs },\n                payload: { ...arg.payload, data: { cursorPos: CursorPos.Current, cellId: arg.payload.data.id } }\n            });\n        }\n        return arg.prevState;\n    }\n\n    export function deleteCell(arg: NativeEditorReducerArg<ICellAction>): IMainState {\n        const cells = arg.prevState.cellVMs;\n        if (cells.length === 1 && cells[0].cell.id === arg.payload.data.cellId) {\n            // Special case, if this is the last cell, don't delete it, just clear it's output and input\n            const newVM: ICellViewModel = {\n                cell: createEmptyCell(arg.payload.data.cellId, null),\n                editable: true,\n                inputBlockOpen: true,\n                inputBlockShow: true,\n                inputBlockText: '',\n                inputBlockCollapseNeeded: false,\n                selected: cells[0].selected,\n                focused: cells[0].focused,\n                cursorPos: CursorPos.Current,\n                hasBeenRun: false,\n                scrollCount: 0,\n                runningByLine: DebugState.Design\n            };\n\n            // Send messages to other side to indicate the new add\n            Transfer.postModelRemove(arg, 0, cells[0].cell);\n            Transfer.postModelInsert(arg, 0, newVM.cell);\n\n            return {\n                ...arg.prevState,\n                undoStack: Helpers.pushStack(arg.prevState.undoStack, arg.prevState.cellVMs),\n                cellVMs: [newVM]\n            };\n        } else if (arg.payload.data.cellId) {\n            // Otherwise just a straight delete\n            const index = arg.prevState.cellVMs.findIndex((c) => c.cell.id === arg.payload.data.cellId);\n            if (index >= 0) {\n                Transfer.postModelRemove(arg, 0, cells[index].cell);\n\n                // Recompute select/focus if this item has either\n                const previousSelection = getSelectedAndFocusedInfo(arg.prevState);\n                const newVMs = [...arg.prevState.cellVMs.filter((c) => c.cell.id !== arg.payload.data.cellId)];\n                const nextOrPrev = index === arg.prevState.cellVMs.length - 1 ? index - 1 : index;\n                if (\n                    previousSelection.selectedCellId === arg.payload.data.cellId ||\n                    previousSelection.focusedCellId === arg.payload.data.cellId\n                ) {\n                    if (nextOrPrev >= 0) {\n                        newVMs[nextOrPrev] = {\n                            ...newVMs[nextOrPrev],\n                            selected: true,\n                            focused: previousSelection.focusedCellId === arg.payload.data.cellId\n                        };\n                    }\n                }\n\n                return {\n                    ...arg.prevState,\n                    cellVMs: newVMs,\n                    undoStack: Helpers.pushStack(arg.prevState.undoStack, arg.prevState.cellVMs),\n                    skipNextScroll: true\n                };\n            }\n        }\n\n        return arg.prevState;\n    }\n\n    export function loadAllCells(arg: NativeEditorReducerArg<ILoadAllCells>): IMainState {\n        const vms = arg.payload.data.cells.map((c) => prepareCellVM(c, false, arg.prevState.settings));\n        return {\n            ...arg.prevState,\n            busy: false,\n            loadTotal: arg.payload.data.cells.length,\n            undoStack: [],\n            cellVMs: vms,\n            loaded: true,\n            isNotebookTrusted: arg.payload.data.isNotebookTrusted!\n        };\n    }\n\n    export function unmount(arg: NativeEditorReducerArg): IMainState {\n        return {\n            ...arg.prevState,\n            cellVMs: [],\n            undoStack: [],\n            redoStack: []\n        };\n    }\n\n    function handleUndoModel(arg: NativeEditorReducerArg<NotebookModelChange>): IMainState {\n        // Disable the queueAction in the arg so that calling other reducers doesn't cause\n        // messages to be posted back (as were handling a message from the extension here)\n        const disabledQueueArg = { ...arg, queueAction: noop };\n        switch (arg.payload.data.kind) {\n            case 'clear':\n                return loadAllCells({\n                    ...disabledQueueArg,\n                    payload: { ...arg.payload, data: { cells: arg.payload.data.oldCells } }\n                });\n            case 'edit':\n                return applyCellEdit({\n                    ...disabledQueueArg,\n                    payload: { ...arg.payload, data: { id: arg.payload.data.id, changes: arg.payload.data.reverse } }\n                });\n            case 'insert':\n                return deleteCell({\n                    ...disabledQueueArg,\n                    payload: { ...arg.payload, data: { cellId: arg.payload.data.cell.id } }\n                });\n            case 'remove':\n                const cellBelow =\n                    arg.prevState.cellVMs.length > arg.payload.data.index\n                        ? arg.prevState.cellVMs[arg.payload.data.index].cell\n                        : undefined;\n                return insertExistingAbove({\n                    ...disabledQueueArg,\n                    payload: {\n                        ...arg.payload,\n                        data: { cell: arg.payload.data.cell, cellId: cellBelow ? cellBelow.id : undefined }\n                    }\n                });\n            case 'remove_all':\n                return loadAllCells({\n                    ...disabledQueueArg,\n                    payload: { ...arg.payload, data: { cells: arg.payload.data.oldCells } }\n                });\n            case 'swap':\n                return Movement.swapCells({\n                    ...disabledQueueArg,\n                    payload: {\n                        ...arg.payload,\n                        data: {\n                            firstCellId: arg.payload.data.secondCellId,\n                            secondCellId: arg.payload.data.firstCellId\n                        }\n                    }\n                });\n            case 'modify':\n                // Undo for modify should reapply the outputs. Go through each and apply the update\n                let result = arg.prevState;\n                arg.payload.data.oldCells.forEach((c) => {\n                    result = updateCell({\n                        ...disabledQueueArg,\n                        prevState: result,\n                        payload: { ...arg.payload, data: c }\n                    });\n                });\n                return result;\n\n            default:\n                // File, version can be ignored.\n                break;\n        }\n\n        return arg.prevState;\n    }\n\n    function handleRedoModel(arg: NativeEditorReducerArg<NotebookModelChange>): IMainState {\n        // Disable the queueAction in the arg so that calling other reducers doesn't cause\n        // messages to be posted back (as were handling a message from the extension here)\n        const disabledQueueArg = { ...arg, queueAction: noop };\n        switch (arg.payload.data.kind) {\n            case 'clear':\n                // tslint:disable-next-line: no-any\n                return Execution.clearAllOutputs(disabledQueueArg as any);\n            case 'edit':\n                return applyCellEdit({\n                    ...disabledQueueArg,\n                    payload: { ...arg.payload, data: { id: arg.payload.data.id, changes: arg.payload.data.forward } }\n                });\n            case 'insert':\n                return insertExistingAbove({\n                    ...disabledQueueArg,\n                    payload: {\n                        ...arg.payload,\n                        data: { cell: arg.payload.data.cell, cellId: arg.payload.data.codeCellAboveId }\n                    }\n                });\n            case 'remove':\n                return deleteCell({\n                    ...disabledQueueArg,\n                    payload: { ...arg.payload, data: { cellId: arg.payload.data.cell.id } }\n                });\n            case 'remove_all':\n                return deleteAllCells({\n                    ...disabledQueueArg,\n                    payload: { ...arg.payload, data: { newCellId: arg.payload.data.newCellId } }\n                });\n            case 'swap':\n                return Movement.swapCells({\n                    ...disabledQueueArg,\n                    payload: {\n                        ...arg.payload,\n                        data: {\n                            firstCellId: arg.payload.data.secondCellId,\n                            secondCellId: arg.payload.data.firstCellId\n                        }\n                    }\n                });\n            case 'modify':\n                // Redo for modify should reapply the outputs. Go through each and apply the update\n                let result = arg.prevState;\n                arg.payload.data.newCells.forEach((c) => {\n                    result = updateCell({\n                        ...disabledQueueArg,\n                        prevState: result,\n                        payload: { ...arg.payload, data: c }\n                    });\n                });\n                return result;\n            default:\n                // Modify, file, version can all be ignored.\n                break;\n        }\n\n        return arg.prevState;\n    }\n\n    export function handleUpdate(arg: NativeEditorReducerArg<NotebookModelChange>): IMainState {\n        switch (arg.payload.data.source) {\n            case 'undo':\n                return handleUndoModel(arg);\n            case 'redo':\n                return handleRedoModel(arg);\n            default:\n                break;\n        }\n        return arg.prevState;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n'use strict';\nimport { InteractiveWindowMessages } from '../../../../client/datascience/interactive-common/interactiveWindowTypes';\nimport { CssMessages, SharedMessages } from '../../../../client/datascience/messages';\nimport { CommonEffects } from '../../../interactive-common/redux/reducers/commonEffects';\nimport { Kernel } from '../../../interactive-common/redux/reducers/kernel';\nimport { Transfer } from '../../../interactive-common/redux/reducers/transfer';\nimport { CommonActionType } from '../../../interactive-common/redux/reducers/types';\nimport { INativeEditorActionMapping } from '../mapping';\nimport { Creation } from './creation';\nimport { Effects } from './effects';\nimport { Execution } from './execution';\nimport { Movement } from './movement';\n\n// The list of reducers. 1 per message/action.\nexport const reducerMap: Partial<INativeEditorActionMapping> = {\n    // State updates\n    [CommonActionType.INSERT_ABOVE_AND_FOCUS_NEW_CELL]: Creation.insertAboveAndFocusCell,\n    [CommonActionType.INSERT_ABOVE_FIRST_AND_FOCUS_NEW_CELL]: Creation.insertAboveFirstAndFocusCell,\n    [CommonActionType.INSERT_BELOW_AND_FOCUS_NEW_CELL]: Creation.insertBelowAndFocusCell,\n    [CommonActionType.INSERT_ABOVE]: Creation.insertNewAbove,\n    [CommonActionType.INSERT_ABOVE_FIRST]: Creation.insertAboveFirst,\n    [CommonActionType.INSERT_BELOW]: Creation.insertBelow,\n    [CommonActionType.FOCUS_CELL]: Effects.focusCell,\n    [CommonActionType.UNFOCUS_CELL]: Effects.unfocusCell,\n    [CommonActionType.ADD_AND_FOCUS_NEW_CELL]: Creation.addAndFocusCell,\n    [CommonActionType.ADD_NEW_CELL]: Creation.addNewCell,\n    [CommonActionType.EXECUTE_CELL_AND_ADVANCE]: Execution.executeCellAndAdvance,\n    [CommonActionType.EXECUTE_CELL]: Execution.executeCell,\n    [CommonActionType.EXECUTE_ALL_CELLS]: Execution.executeAllCells,\n    [CommonActionType.EXECUTE_ABOVE]: Execution.executeAbove,\n    [CommonActionType.EXECUTE_CELL_AND_BELOW]: Execution.executeCellAndBelow,\n    [CommonActionType.RESTART_KERNEL]: Kernel.restartKernel,\n    [CommonActionType.INTERRUPT_KERNEL]: Kernel.interruptKernel,\n    [InteractiveWindowMessages.ClearAllOutputs]: Execution.clearAllOutputs,\n    [CommonActionType.EXPORT]: Transfer.exportCells,\n    [CommonActionType.EXPORT_NOTEBOOK_AS]: Transfer.showExportAsMenu,\n    [CommonActionType.SAVE]: Transfer.save,\n    [CommonActionType.SHOW_DATA_VIEWER]: Transfer.showDataViewer,\n    [CommonActionType.SEND_COMMAND]: Transfer.sendCommand,\n    [CommonActionType.SELECT_CELL]: Effects.selectCell,\n    [InteractiveWindowMessages.SelectKernel]: Kernel.selectKernel,\n    [CommonActionType.SELECT_SERVER]: Kernel.selectJupyterURI,\n    [CommonActionType.MOVE_CELL_UP]: Movement.moveCellUp,\n    [CommonActionType.MOVE_CELL_DOWN]: Movement.moveCellDown,\n    [CommonActionType.DELETE_CELL]: Creation.deleteCell,\n    [CommonActionType.TOGGLE_LINE_NUMBERS]: Effects.toggleLineNumbers,\n    [CommonActionType.TOGGLE_OUTPUT]: Effects.toggleOutput,\n    [CommonActionType.CHANGE_CELL_TYPE]: Execution.changeCellType,\n    [InteractiveWindowMessages.Undo]: Execution.undo,\n    [InteractiveWindowMessages.Redo]: Execution.redo,\n    [CommonActionType.ARROW_UP]: Movement.arrowUp,\n    [CommonActionType.ARROW_DOWN]: Movement.arrowDown,\n    [CommonActionType.EDIT_CELL]: Transfer.editCell,\n    [InteractiveWindowMessages.ShowPlot]: Transfer.showPlot,\n    [CommonActionType.LINK_CLICK]: Transfer.linkClick,\n    [CommonActionType.EDITOR_LOADED]: Transfer.started,\n    [CommonActionType.LOADED_ALL_CELLS]: Transfer.loadedAllCells,\n    [CommonActionType.LAUNCH_NOTEBOOK_TRUST_PROMPT]: Transfer.launchNotebookTrustPrompt,\n    [CommonActionType.UNMOUNT]: Creation.unmount,\n    [CommonActionType.LOAD_IPYWIDGET_CLASS_SUCCESS]: CommonEffects.handleLoadIPyWidgetClassSuccess,\n    [CommonActionType.LOAD_IPYWIDGET_CLASS_FAILURE]: CommonEffects.handleLoadIPyWidgetClassFailure,\n    [CommonActionType.IPYWIDGET_WIDGET_VERSION_NOT_SUPPORTED]: CommonEffects.notifyAboutUnsupportedWidgetVersions,\n    [CommonActionType.CONTINUE]: Execution.continueExec,\n    [CommonActionType.STEP]: Execution.step,\n    [CommonActionType.RUN_BY_LINE]: Execution.runByLine,\n    [CommonActionType.OPEN_SETTINGS]: CommonEffects.openSettings,\n\n    // Messages from the webview (some are ignored)\n    [InteractiveWindowMessages.StartCell]: Creation.startCell,\n    [InteractiveWindowMessages.FinishCell]: Creation.finishCell,\n    [InteractiveWindowMessages.UpdateCellWithExecutionResults]: Creation.updateCell,\n    [InteractiveWindowMessages.NotebookDirty]: CommonEffects.notebookDirty,\n    [InteractiveWindowMessages.NotebookClean]: CommonEffects.notebookClean,\n    [InteractiveWindowMessages.LoadAllCells]: Creation.loadAllCells,\n    [InteractiveWindowMessages.TrustNotebookComplete]: CommonEffects.trustNotebook,\n    [InteractiveWindowMessages.NotebookRunAllCells]: Execution.executeAllCells,\n    [InteractiveWindowMessages.NotebookRunSelectedCell]: Execution.executeSelectedCell,\n    [InteractiveWindowMessages.NotebookAddCellBelow]: Creation.addAndFocusCell,\n    [InteractiveWindowMessages.DoSave]: Transfer.save,\n    [InteractiveWindowMessages.DeleteAllCells]: Creation.deleteAllCells,\n    [InteractiveWindowMessages.Undo]: Execution.undo,\n    [InteractiveWindowMessages.Redo]: Execution.redo,\n    [InteractiveWindowMessages.StartProgress]: CommonEffects.startProgress,\n    [InteractiveWindowMessages.StopProgress]: CommonEffects.stopProgress,\n    [SharedMessages.UpdateSettings]: Effects.updateSettings,\n    [InteractiveWindowMessages.RestartKernel]: Kernel.handleRestarted,\n    [CssMessages.GetCssResponse]: CommonEffects.handleCss,\n    [InteractiveWindowMessages.MonacoReady]: CommonEffects.monacoReady,\n    [CssMessages.GetMonacoThemeResponse]: CommonEffects.monacoThemeChange,\n    [InteractiveWindowMessages.UpdateModel]: Creation.handleUpdate,\n    [InteractiveWindowMessages.UpdateKernel]: Kernel.updateStatus,\n    [SharedMessages.LocInit]: CommonEffects.handleLocInit,\n    [InteractiveWindowMessages.UpdateDisplayData]: CommonEffects.handleUpdateDisplayData,\n    [InteractiveWindowMessages.ShowBreak]: Execution.handleBreakState,\n    [InteractiveWindowMessages.ShowContinue]: Execution.handleContinue,\n    [InteractiveWindowMessages.StartDebugging]: Execution.startDebugging,\n    [InteractiveWindowMessages.StopDebugging]: Execution.stopDebugging,\n    [InteractiveWindowMessages.UpdateExternalCellButtons]: CommonEffects.handleWebviewButtons,\n    [InteractiveWindowMessages.ExecuteExternalCommand]: Transfer.executeExternalCommand\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n'use strict';\n\n// This must be on top, do not change. Required by webpack.\nimport '../common/main';\n// This must be on top, do not change. Required by webpack.\n\n// tslint:disable-next-line: ordered-imports\nimport '../common/index.css';\n\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport { TextAreaFocusTracker } from '../interactive-common/textAreaFocusTracker';\nimport { WidgetManagerComponent } from '../ipywidgets/container';\nimport { IVsCodeApi, PostOffice } from '../react-common/postOffice';\nimport { detectBaseTheme } from '../react-common/themeDetector';\nimport { getConnectedNativeEditor } from './nativeEditor';\nimport { createStore } from './redux/store';\n\n// This special function talks to vscode from a web panel\nexport declare function acquireVsCodeApi(): IVsCodeApi;\nconst baseTheme = detectBaseTheme();\n// tslint:disable-next-line: no-any\nconst testMode = (window as any).inTestMode;\n// tslint:disable-next-line: no-typeof-undefined\nconst skipDefault = testMode ? false : typeof acquireVsCodeApi !== 'undefined';\n\n// Create the redux store\nconst postOffice = new PostOffice();\nconst store = createStore(skipDefault, baseTheme, testMode, postOffice);\n\n// Wire up a connected react control for our NativeEditor\nconst ConnectedNativeEditor = getConnectedNativeEditor();\n\n// Stick them all together\nReactDOM.render(\n    <Provider store={store}>\n        <TextAreaFocusTracker />\n        <ConnectedNativeEditor />\n        <WidgetManagerComponent postOffice={postOffice} widgetContainerId={'rootWidget'} store={store} />\n    </Provider>,\n    document.getElementById('root') as HTMLElement\n);\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n'use strict';\n\nimport * as ReduxCommon from '../../interactive-common/redux/store';\nimport { PostOffice } from '../../react-common/postOffice';\nimport { reducerMap } from './reducers';\n\n// This special version uses the reducer map from the INativeEditorMapping\nexport function createStore(skipDefault: boolean, baseTheme: string, testMode: boolean, postOffice: PostOffice) {\n    return ReduxCommon.createStore(skipDefault, baseTheme, testMode, true, true, reducerMap, postOffice);\n}\n","module.exports = log4js;","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\nexports.i(require(\"-!../../../node_modules/css-loader/index.js!../interactive-common/common.css\"), \"\");\n\n// module\nexports.push([module.id, \"/* Import common styles and then override them below */\\n.toolbar-panel-button {\\n  border-width: 1px;\\n  border-style: solid;\\n  border-color: var(--override-badge-background, var(--vscode-badge-background));\\n  color: var(--override-foreground, var(--vscode-editor-foreground));\\n  text-align: center;\\n  overflow: hidden;\\n  margin-left: 2px;\\n  padding: 2px;\\n  background-color: transparent;\\n  cursor: hand;\\n}\\n.cell-wrapper {\\n  margin: 2px 2px 0px 0px;\\n  position: relative;\\n  min-height: 55px;\\n}\\n.cell-wrapper-focused {\\n  margin: 2px 2px 0px 0px;\\n}\\n.cell-wrapper-selected {\\n  margin: 2px 2px 0px 0px;\\n}\\n.cell-menu-bar-outer {\\n  justify-self: right;\\n}\\n.cell-output-wrapper {\\n  grid-row: 1;\\n  grid-column: 3;\\n}\\n.cell-output {\\n  margin-top: 5px;\\n  background: transparent;\\n  width: 100%;\\n  overflow-x: scroll;\\n}\\n.cell-output-text {\\n  white-space: pre-wrap;\\n  word-break: break-all;\\n  overflow-x: hidden;\\n}\\n.markdown-cell-output-container {\\n  grid-row: 1;\\n  grid-column: 3;\\n}\\n.markdown-cell-output {\\n  width: 100%;\\n  overflow-x: scroll;\\n}\\n.cell-outer {\\n  display: grid;\\n  grid-template-columns: auto auto minmax(0, 1fr);\\n}\\n.cell-outer-editable {\\n  display: grid;\\n  grid-template-columns: auto auto minmax(0, 1fr);\\n  margin-top: 0px;\\n}\\n.cell-state-selector {\\n  border-width: 1px;\\n  border-style: solid;\\n  border-color: var(--override-badge-background, var(--vscode-badge-background));\\n  color: var(--override-foreground, var(--vscode-editor-foreground));\\n  text-align: center;\\n  overflow: hidden;\\n  margin-left: 2px;\\n  padding: 2px;\\n  background-color: transparent;\\n  cursor: hand;\\n}\\n.cell-state-selector-option {\\n  border-width: 1px;\\n  border-style: solid;\\n  border-color: var(--override-badge-background, var(--vscode-badge-background));\\n  color: var(--override-foreground, var(--vscode-editor-foreground));\\n  background-color: var(--override-background, var(--vscode-editor-background));\\n}\\n.code-area {\\n  position: relative;\\n  width: 100%;\\n  padding-right: 8px;\\n  margin-bottom: 0px;\\n  padding-left: 2px;\\n  padding-top: 2px;\\n  background: var(--override-widget-background, var(--vscode-notifications-background));\\n}\\n.markdown-editor-area {\\n  position: relative;\\n  width: 100%;\\n  padding-right: 8px;\\n  margin-bottom: 0px;\\n  padding-left: 2px;\\n  padding-top: 2px;\\n  background: var(--override-widget-background, var(--vscode-notifications-background));\\n}\\n.code-watermark {\\n  top: 5px;\\n  /* Account for extra padding and border in native editor */\\n}\\n.cell-input-wrapper {\\n  grid-column: 3;\\n  grid-row: 1;\\n}\\n.cell-input {\\n  margin: 2px 10px 0px 0px;\\n}\\n.content-div {\\n  grid-column: 3;\\n}\\n.controls-div {\\n  min-width: 34px;\\n  padding-left: 4px;\\n  padding-right: 4px;\\n  display: block;\\n  grid-column: 2;\\n  grid-row: 1;\\n}\\n.navbar-div {\\n  grid-column: 1;\\n  visibility: hidden;\\n  display: grid;\\n  grid-template-rows: var(--button-size) var(--button-size) auto;\\n}\\n.navbar-add-button {\\n  align-self: end;\\n}\\n.execution-count {\\n  justify-self: end;\\n  margin-bottom: 10px;\\n  margin-top: 1px;\\n}\\n.execution-count-busy-outer {\\n  justify-self: end;\\n}\\n.native-editor-celltoolbar-inner {\\n  justify-self: center;\\n  grid-column: 1;\\n}\\n.native-editor-celltoolbar-middle {\\n  display: flex;\\n  grid-column: 3;\\n  grid-row: 2;\\n  justify-items: left;\\n  background: var(--vscode-notifications-background);\\n}\\n.native-editor-celltoolbar-divider {\\n  background-color: var(--vscode-badge-background);\\n  height: 2px;\\n}\\n.code-toolbar {\\n  visibility: visible;\\n}\\n.markdown-toolbar {\\n  visibility: collapse;\\n}\\n.hover-cell-button {\\n  visibility: collapse;\\n}\\n.cell-wrapper:hover .hover-cell-button {\\n  visibility: visible;\\n}\\n.cell-wrapper-selected .hover-cell-button {\\n  visibility: visible;\\n}\\n.cell-wrapper-focused .hover-cell-button {\\n  visibility: visible;\\n}\\n.delete-cell-button {\\n  right: 2px;\\n  position: absolute;\\n  visibility: collapse;\\n}\\n.cell-wrapper:hover .navbar-div {\\n  visibility: visible;\\n}\\n.cell-wrapper-selected .navbar-div {\\n  visibility: visible;\\n}\\n.cell-wrapper-focused .navbar-div {\\n  visibility: visible;\\n}\\n.cell-wrapper:hover .markdown-toolbar {\\n  visibility: visible;\\n}\\n.cell-wrapper-selected .markdown-toolbar {\\n  visibility: visible;\\n}\\n.cell-wrapper-focused .markdown-toolbar {\\n  visibility: visible;\\n}\\n.native-editor-flyout-button {\\n  width: auto;\\n  height: auto;\\n  border-color: transparent;\\n  background-color: transparent;\\n  padding: 0px;\\n  margin-left: 4px;\\n  margin-right: 0px;\\n  margin-top: 0px;\\n  margin-bottom: 0px;\\n  border-width: 0px;\\n}\\n.native-editor-flyout-button:focus {\\n  outline: none;\\n}\\n.native-editor-cellflyout {\\n  position: relative;\\n  left: 20px;\\n  top: -15px;\\n  width: auto;\\n  height: auto;\\n  padding-top: 2px;\\n  padding-right: 2px;\\n  z-index: 100;\\n}\\n.native-editor-cellflyout-selected {\\n  background-color: var(--vscode-peekView-border);\\n}\\n.native-editor-cellflyout-focused {\\n  background-color: var(--vscode-editorInfo-foreground);\\n}\\n.flyout-button-content {\\n  color: var(--override-foreground, var(--vscode-editor-foreground));\\n}\\n.native-button {\\n  background: transparent;\\n  z-index: 10;\\n}\\n#toolbar-panel {\\n  margin-top: 2px;\\n  margin-bottom: 2px;\\n  margin-left: 0px;\\n  margin-right: 0px;\\n}\\n#content-panel-div {\\n  overflow: hidden;\\n}\\n/* Fix image buttons that are supposed to be hidden from showing up */\\n.flyout-children-hidden .image-button {\\n  width: 0px;\\n  height: 0px;\\n  margin-left: 0px;\\n  padding: 0px;\\n}\\n.add-cell-line {\\n  display: flex;\\n  justify-content: left;\\n  margin-top: 5px;\\n  margin-bottom: 0px;\\n  margin-left: 5px;\\n  margin-right: 5px;\\n}\\n.add-cell-line:focus-within {\\n  outline: 1px solid black;\\n}\\n.add-cell-line-top {\\n  margin-top: 2px;\\n  margin-bottom: 0px;\\n}\\n.add-cell-line-top-force-visible {\\n  margin-top: 2px;\\n  margin-bottom: 0px;\\n}\\n.add-cell-line-top .add-cell-line-button {\\n  visibility: hidden;\\n}\\n.add-cell-line-button {\\n  border-width: 0px;\\n  border-style: solid;\\n  text-align: center;\\n  line-height: 16px;\\n  background-color: transparent;\\n  cursor: hand;\\n  height: var(--button-size);\\n  padding: 0px;\\n  display: flex;\\n}\\n.add-cell-line-button:focus {\\n  outline: none;\\n}\\n.add-cell-line-top:hover .add-cell-line-button {\\n  visibility: visible;\\n}\\n.add-cell-line-button .image-button-image {\\n  height: var(--button-size);\\n}\\n.add-cell-line-button .image-button-image svg {\\n  height: var(--button-size);\\n}\\n.add-cell-line-divider {\\n  margin-top: 8px;\\n  margin-left: 2px;\\n  width: calc(100% - 40px);\\n  border-width: 0px;\\n  border-top-color: var(--override-badge-background, var(--vscode-badge-background));\\n  border-top-width: 1px;\\n  border-style: solid;\\n}\\n.add-cell-line-divider:hover {\\n  cursor: pointer;\\n}\\n.cell-wrapper-selected .add-cell-line {\\n  visibility: visible;\\n}\\n.cell-wrapper-focused .add-cell-line {\\n  visibility: visible;\\n}\\n/*\\nCell Row Container layout\\n--------------------------\\ncollapse-bar        controls-div        [cell-input, cell-output, markdown-cell-output-container]\\n(expanded c-bar)    celltoolbar-middle\\n*/\\n.cell-row-container {\\n  display: grid;\\n  grid-template-columns: auto auto minmax(0, 1fr);\\n  grid-template-rows: 1fr auto;\\n}\\n.collapse-bar {\\n  grid-column: 1;\\n  grid-row-start: 1;\\n  grid-row-end: 2;\\n  background-color: transparent;\\n  max-width: 8px;\\n  min-width: 8px;\\n}\\n.cell-wrapper:hover .collapse-bar {\\n  background-color: var(--override-widget-background, var(--vscode-notifications-background));\\n}\\n.collapse-bar-markdown {\\n  margin: 0px 44px 0px 0px;\\n}\\n.collapse-bar-output {\\n  margin: 0px 28px 0px 16px;\\n}\\n.collapse-bar-selected {\\n  background-color: var(--vscode-peekView-border);\\n  grid-row-start: 1;\\n  grid-row-end: 3;\\n}\\n.collapse-bar-focused {\\n  background: repeating-linear-gradient(-45deg, transparent, transparent 3px, var(--vscode-editorGutter-addedBackground) 3px, var(--vscode-editorGutter-addedBackground) 6px);\\n  grid-row-start: 1;\\n  grid-row-end: 3;\\n}\\n.cell-wrapper:hover .collapse-bar-selected {\\n  background-color: var(--vscode-peekView-border);\\n}\\n.cell-wrapper:hover .collapse-bar-focused {\\n  background: repeating-linear-gradient(-45deg, transparent, transparent 3px, var(--vscode-editorGutter-addedBackground) 3px, var(--vscode-editorGutter-addedBackground) 6px);\\n}\\n.add-divider {\\n  visibility: hidden;\\n  margin: 0px;\\n  position: absolute;\\n  bottom: 8px;\\n}\\n.cell-wrapper:hover .add-divider {\\n  visibility: hidden;\\n  z-index: -100;\\n  pointer-events: none;\\n}\\n.cell-wrapper-selected .add-divider {\\n  visibility: hidden;\\n  z-index: -100;\\n  pointer-events: none;\\n}\\n.cell-wrapper-focused .add-divider {\\n  visibility: hidden;\\n  z-index: -100;\\n  pointer-events: none;\\n}\\n.cell-wrapper-selected:hover .add-divider {\\n  visibility: hidden;\\n  z-index: -100;\\n  pointer-events: none;\\n}\\n.cell-wrapper-focused:hover .add-divider {\\n  visibility: hidden;\\n  z-index: -100;\\n  pointer-events: none;\\n}\\n.native-editor-celltoolbar-middle .image-button {\\n  margin-right: 3px;\\n  margin-top: 4px;\\n  margin-bottom: 4px;\\n  margin-left: 3px;\\n}\\n\", \"\"]);\n\n// exports\n"],"sourceRoot":""}