{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/datascience-ui/history-react/interactivePanel.less","webpack:///./src/datascience-ui/interactive-common/collapseButton.tsx","webpack:///./src/datascience-ui/interactive-common/inputHistory.ts","webpack:///./src/datascience-ui/history-react/redux/actions.ts","webpack:///./src/datascience-ui/history-react/interactiveCell.tsx","webpack:///./src/datascience-ui/history-react/interactivePanel.tsx","webpack:///./src/datascience-ui/history-react/redux/reducers/creation.ts","webpack:///./src/datascience-ui/history-react/redux/reducers/effects.ts","webpack:///./src/datascience-ui/history-react/redux/reducers/execution.ts","webpack:///./src/datascience-ui/history-react/redux/reducers/index.ts","webpack:///./src/datascience-ui/history-react/index.tsx","webpack:///./src/datascience-ui/history-react/redux/store.ts","webpack:///./src/datascience-ui/history-react/interactivePanel.less?214b","webpack:///external \"log4js\""],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","exports","module","l","__esModule","undefined","default","headers","common","Accept","adapter","transformRequest","transformResponse","e","promises","installedChunkData","promise","Promise","resolve","reject","onScriptComplete","script","document","createElement","charset","timeout","nc","setAttribute","src","p","jsonpScriptSrc","error","Error","event","onerror","onload","clearTimeout","chunk","errorType","type","realSrc","target","message","name","request","setTimeout","head","appendChild","all","m","c","d","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","ns","create","key","bind","n","object","property","oe","err","console","jsonpArray","window","oldJsonpFunction","slice","props","render","collapseInputPolygonClassNames","this","open","theme","collapseInputClassNames","visible","tooltip","ariaExpanded","className","title","onClick","version","baseProfile","width","height","points","fill","label","historyStack","completeUp","code","up","adjustCursors","completeDown","down","add","typed","last","reset","currentPos","createIncomingActionWithPayload","payload","messageDirection","createIncomingAction","actionCreators","focusInput","FOCUS_INPUT","restartKernel","RESTART_KERNEL","interruptKernel","INTERRUPT_KERNEL","deleteAllCells","DeleteAllCells","deleteCell","cellId","DELETE_CELL","undo","Undo","redo","Redo","linkClick","href","LINK_CLICK","showPlot","imageHtml","ShowPlot","toggleInputBlock","TOGGLE_INPUT_BLOCK","gotoCell","GOTO_CELL","copyCellCode","COPY_CELL_CODE","clickCell","CLICK_CELL","editCell","EDIT_CELL","versionId","modelId","model","id","forward","reverse","getValue","submitInput","SUBMIT_INPUT","toggleVariableExplorer","TOGGLE_VARIABLE_EXPLORER","setVariableExplorerHeight","containerHeight","gridHeight","SET_VARIABLE_EXPLORER_HEIGHT","expandAll","ExpandAll","collapseAll","CollapseAll","export","EXPORT","exportAs","EXPORT_NOTEBOOK_AS","showDataViewer","variable","columnSize","SHOW_DATA_VIEWER","editorLoaded","EDITOR_LOADED","scroll","isAtBottom","SCROLL","unfocus","UNFOCUS_CELL","codeCreated","CODE_CREATED","editorUnmounted","UNMOUNT","selectKernel","SelectKernel","selectServer","SELECT_SERVER","openSettings","setting","OPEN_SETTINGS","getVariableData","newExecutionCount","refreshCount","startIndex","pageSize","GET_VARIABLE_DATA","executionCount","sortColumn","sortAscending","widgetFailed","ex","IPYWIDGET_RENDER_FAILURE","runExternalCommand","buttonId","cell","ExecuteExternalCommand","prop","codeRef","wrapperRef","getCell","cellVM","isCodeCell","cell_type","renderNormalToolbar","hasNoSource","file","EmptyFileName","baseTheme","hidden","class","image","GoToSourceCode","Copy","Cancel","renderExternalButtons","onMouseClick","ev","stopPropagation","renderControls","busy","state","init","executing","collapseVisible","inputBlockCollapseNeeded","inputBlockShow","editable","execution_count","toString","isEditOnlyCell","EditCellId","toolbar","isBusy","count","editExecutionCount","inputBlockOpen","renderInput","editorOptions","history","inputHistory","codeTheme","onCodeChange","onCodeCreated","unfocused","onUnfocused","testMode","showWatermark","ref","monacoTheme","openLink","editorMeasureClassName","keyDown","isEditCell","onEditCellKeyDown","showLineNumbers","font","disableUndoStack","codeVersion","focusPending","language","isNotebookTrusted","_code","_file","hasOutput","finished","getCodeCell","onKeyDown","shiftKey","ctrlKey","metaKey","altKey","preventDefault","onKeyUp","onEditCellKeyUp","_cellId","editCellSubmit","editorInfo","isSuggesting","clear","editCellShiftEscape","focusedElement","activeElement","nextTabStop","findTabStop","focus","uri","showingMarkdownEditor","messages","renderNormalCell","componentDidUpdate","prevProps","selected","focused","giveFocus","scrollCount","scrollAndFlash","shouldComponentUpdate","nextProps","current","scrollIntoView","behavior","block","inline","classList","remove","contains","shouldRender","settings","showCellInputCode","directInput","shouldRenderResults","cellOuterClass","cellWrapperClass","themeMatplotlibPlots","role","tabIndex","expandImage","maxTextSize","enableScroll","buttons","externalButtons","forEach","button","index","running","disabled","statusToEnable","includes","codicon","Sync","outputs","hideOutput","contents","endPos","content","isDirty","direction","element","allFocusable","querySelectorAll","tabable","Array","filter","self","indexOf","InteractiveCellComponent","mapStateToProps","main","variableState","variables","mainPanelRef","mainPanelToolbarRef","contentPanelRef","renderCount","internalScrollCount","footerPanelClick","_event","getInputExecutionCount","currentExecutionCount","getContentProps","cellVMs","submittedText","skipNextScroll","renderCell","scrollToBottom","scrollDiv","scrollBeyondLastLine","extraSettings","editor","getVariableProps","toolbarHeight","offsetHeight","debugging","showDataExplorer","skipDefault","closeVariableExplorer","pageIn","pageInVariableData","fontSize","size","supportsDebugging","variableOptions","enableDuringDebugger","_index","containerRef","options","hover","enabled","autoFocus","kernel","div","handleScroll","alwaysScrollOnNewCell","computeIsAtBottom","currentTarget","componentDidMount","addEventListener","componentWillUnmount","removeEventListener","dynamicFont","fontFamily","family","progressBar","loaded","style","rootCss","buildSettingsCss","renderToolbarPanel","renderVariablePanel","onScroll","renderContentPanel","renderFooterPanel","variableExplorerTooltip","redoStack","undoStack","Restart","Interrupt","VariableExplorer","SaveAs","ExportToPython","renderKernelSelection","shouldShowTrustMessage","variableProps","monacoReady","contentProps","editCellVM","allowInput","editPanelClass","colorizeInputBox","hasFocus","Creation","isCellSupported","alterCellVM","expanded","newCellVM","newText","text","extractInputBlockText","inputBlockText","split","concat","prepareCellVM","mainState","collapseCellInputCodeByDefault","hasBeenRun","startCell","arg","prevState","updateOrAdd","UpdateModel","source","kind","oldDirty","dirty","newDirty","fullText","currentText","updateCell","finishCell","pushStack","findIndex","newVMs","_c","unmount","LoadAllCellsComplete","cells","Effects","map","oldVM","updateSettings","newSettings","JSON","parse","newEditorOptions","newFontFamily","newFontSize","vscodeThemeName","knownDark","computeKnownDark","GetCssRequest","isDark","GetMonacoThemeRequest","scrollToCell","scrolled","unfocusCell","Execution","cloneDeep","startDebugging","stopDebugging","matcher","stripFirstMarker","newCell","splitLines","trim","firstLine","isMarkdown","collapseInputs","useQuickEdit","SubmitNewCell","reducerMap","selectJupyterURI","exportCells","showExportAsMenu","SAVE","save","started","LoadAllCells","LOAD_IPYWIDGET_CLASS_SUCCESS","handleLoadIPyWidgetClassSuccess","LOAD_IPYWIDGET_CLASS_FAILURE","handleLoadIPyWidgetClassFailure","IPYWIDGET_WIDGET_VERSION_NOT_SUPPORTED","notifyAboutUnsupportedWidgetVersions","handleIPyWidgetRenderFailure","StartCell","FinishCell","UpdateCellWithExecutionResults","RestartKernel","handleRestarted","GetCssResponse","handleCss","MonacoReady","GetMonacoThemeResponse","monacoThemeChange","GetAllCells","getAllCells","StartProgress","startProgress","StopProgress","stopProgress","UpdateSettings","StartDebugging","StopDebugging","ScrollToCell","UpdateKernel","updateStatus","LocInit","handleLocInit","UpdateDisplayData","handleUpdateDisplayData","HasCell","hasCell","UpdateExternalCellButtons","handleWebviewButtons","executeExternalCommand","postOffice","inTestMode","acquireVsCodeApi","ConnectedInteractiveEditor","store","widgetContainerId","getElementById","transform","locals","log4js"],"mappings":"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","file":"interactiveWindow.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"interactiveWindow\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// script path function\n \tfunction jsonpScriptSrc(chunkId) {\n \t\treturn __webpack_require__.p + \"\" + ({\"vendors~dataresource~geojson~modeldebug~nteract_transforms~nteract_transforms_vsdom\":\"vendors~dataresource~geojson~modeldebug~nteract_transforms~nteract_transforms_vsdom\",\"modeldebug\":\"modeldebug\",\"nteract_transforms_vsdom\":\"nteract_transforms_vsdom\",\"vendors~dataresource~vega\":\"vendors~dataresource~vega\",\"vendors~dataresource\":\"vendors~dataresource\",\"vendors~geojson\":\"vendors~geojson\",\"vendors~nteract_transforms\":\"vendors~nteract_transforms\",\"vendors~vega\":\"vendors~vega\",\"vega\":\"vega\",\"vendors~plotly\":\"vendors~plotly\"}[chunkId]||chunkId) + \".bundle.js\"\n \t}\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\t(function (module) {\n \t\t  if (module.exports\n \t\t    && !module.exports.__esModule\n \t\t    && module.exports.default === undefined\n \t\t  ) {\n \t\t    if (module.exports.headers\n \t\t      && module.exports.headers.common\n \t\t      && module.exports.headers.common.Accept\n \t\t      && module.exports.adapter\n \t\t      && module.exports.transformRequest\n \t\t      && module.exports.transformResponse\n \t\t    ) {\n \t\t      return;\n \t\t    }\n \t\t    module.exports.default = module.exports;\n \t\t  }\n \t\t})(module);\n \t\treturn module.exports;\n \t}\n\n \t// This file contains only the entry chunk.\n \t// The chunk loading function for additional chunks\n \t__webpack_require__.e = function requireEnsure(chunkId) {\n \t\tvar promises = [];\n\n\n \t\t// JSONP chunk loading for javascript\n\n \t\tvar installedChunkData = installedChunks[chunkId];\n \t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n \t\t\t// a Promise means \"currently loading\".\n \t\t\tif(installedChunkData) {\n \t\t\t\tpromises.push(installedChunkData[2]);\n \t\t\t} else {\n \t\t\t\t// setup Promise in chunk cache\n \t\t\t\tvar promise = new Promise(function(resolve, reject) {\n \t\t\t\t\tinstalledChunkData = installedChunks[chunkId] = [resolve, reject];\n \t\t\t\t});\n \t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n \t\t\t\t// start chunk loading\n \t\t\t\tvar script = document.createElement('script');\n \t\t\t\tvar onScriptComplete;\n\n \t\t\t\tscript.charset = 'utf-8';\n \t\t\t\tscript.timeout = 120;\n \t\t\t\tif (__webpack_require__.nc) {\n \t\t\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n \t\t\t\t}\n \t\t\t\tscript.src = jsonpScriptSrc(chunkId);\n\n \t\t\t\t// create error before stack unwound to get useful stacktrace later\n \t\t\t\tvar error = new Error();\n \t\t\t\tonScriptComplete = function (event) {\n \t\t\t\t\t// avoid mem leaks in IE.\n \t\t\t\t\tscript.onerror = script.onload = null;\n \t\t\t\t\tclearTimeout(timeout);\n \t\t\t\t\tvar chunk = installedChunks[chunkId];\n \t\t\t\t\tif(chunk !== 0) {\n \t\t\t\t\t\tif(chunk) {\n \t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n \t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n \t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n \t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n \t\t\t\t\t\t\terror.type = errorType;\n \t\t\t\t\t\t\terror.request = realSrc;\n \t\t\t\t\t\t\tchunk[1](error);\n \t\t\t\t\t\t}\n \t\t\t\t\t\tinstalledChunks[chunkId] = undefined;\n \t\t\t\t\t}\n \t\t\t\t};\n \t\t\t\tvar timeout = setTimeout(function(){\n \t\t\t\t\tonScriptComplete({ type: 'timeout', target: script });\n \t\t\t\t}, 120000);\n \t\t\t\tscript.onerror = script.onload = onScriptComplete;\n \t\t\t\tdocument.head.appendChild(script);\n \t\t\t}\n \t\t}\n \t\treturn Promise.all(promises);\n \t};\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// on error function for async loading\n \t__webpack_require__.oe = function(err) { console.error(err); throw err; };\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([7,\"monaco\",\"commons\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\nexports.i(require(\"-!../../../node_modules/css-loader/index.js!../interactive-common/common.css\"), \"\");\n\n// module\nexports.push([module.id, \"/* Import common styles and then override them below */\\n.toolbar-menu-bar-child {\\n  background: var(--override-background, var(--vscode-editor-background));\\n  z-index: 10;\\n}\\n#main-panel-content {\\n  grid-area: content;\\n  max-height: 100%;\\n  overflow-x: hidden;\\n  overflow-y: auto;\\n}\\n.messages-result-container {\\n  width: 100%;\\n}\\n.messages-result-container pre {\\n  white-space: pre-wrap;\\n  font-family: monospace;\\n  margin: 0px;\\n  word-break: break-all;\\n}\\n.cell-wrapper {\\n  margin: 0px;\\n  padding: 0px;\\n  display: block;\\n}\\n.cell-result-container {\\n  margin: 0px;\\n  display: grid;\\n  grid-auto-columns: minmax(0, 1fr);\\n}\\n.cell-outer {\\n  display: grid;\\n  grid-template-columns: auto minmax(0, 1fr) 8px;\\n  grid-column-gap: 3px;\\n  width: 100%;\\n}\\n.cell-output {\\n  margin: 0px;\\n  width: 100%;\\n  overflow-x: scroll;\\n  background: transparent;\\n}\\n.cell-output > div {\\n  background: var(--override-widget-background, var(--vscode-notifications-background));\\n}\\nxmp {\\n  margin: 0px;\\n}\\n.cell-input {\\n  margin: 0;\\n}\\n.markdown-cell-output {\\n  width: 100%;\\n  overflow-x: scroll;\\n}\\n.cell-output-text {\\n  white-space: pre-wrap;\\n  word-break: break-all;\\n  overflow-x: hidden;\\n}\\n\", \"\"]);\n\n// exports\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n'use strict';\n\nimport * as React from 'react';\nimport { getLocString } from '../react-common/locReactSide';\n\ninterface ICollapseButtonProps {\n    theme: string;\n    tooltip: string;\n    visible: boolean;\n    open: boolean;\n    label?: string;\n    onClick(): void;\n}\n\nexport class CollapseButton extends React.Component<ICollapseButtonProps> {\n    constructor(props: ICollapseButtonProps) {\n        super(props);\n    }\n\n    public render() {\n        const collapseInputPolygonClassNames = `collapse-input-svg ${\n            this.props.open ? ' collapse-input-svg-rotate' : ''\n        } collapse-input-svg-${this.props.theme}`;\n        const collapseInputClassNames = `collapse-input remove-style ${this.props.visible ? '' : ' invisible'}`;\n        const tooltip = this.props.open\n            ? getLocString('DataScience.collapseSingle', 'Collapse')\n            : getLocString('DataScience.expandSingle', 'Expand');\n        const ariaExpanded = this.props.open ? 'true' : 'false';\n        // https://reactjs.org/docs/conditional-rendering.html#inline-if-with-logical--operator\n        // Comment here just because the (boolean && statement) was new to me\n        return (\n            <button\n                className={collapseInputClassNames}\n                title={tooltip}\n                onClick={this.props.onClick}\n                aria-expanded={ariaExpanded}\n            >\n                <svg version=\"1.1\" baseProfile=\"full\" width=\"8px\" height=\"11px\">\n                    <polygon points=\"0,0 0,10 5,5\" className={collapseInputPolygonClassNames} fill=\"black\" />\n                </svg>\n                {this.props.label && <label className=\"collapseInputLabel\">{this.props.label}</label>}\n            </button>\n        );\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n'use strict';\n\nexport class InputHistory {\n    private historyStack: string[] = [];\n    private up: number | undefined;\n    private down: number | undefined;\n    private last: number | undefined;\n\n    public completeUp(code: string): string {\n        // If going up, only move if anything in the history\n        if (this.historyStack.length > 0) {\n            if (this.up === undefined) {\n                this.up = 0;\n            }\n\n            const result = this.up < this.historyStack.length ? this.historyStack[this.up] : code;\n            this.adjustCursors(this.up);\n            return result;\n        }\n\n        return code;\n    }\n\n    public completeDown(code: string): string {\n        // If going down, move and then return something if we have a position\n        if (this.historyStack.length > 0 && this.down !== undefined) {\n            const result = this.historyStack[this.down];\n            this.adjustCursors(this.down);\n            return result;\n        }\n\n        return code;\n    }\n\n    public add(code: string, typed: boolean) {\n        // Compute our new history. Behavior depends upon if the user typed it in or\n        // just used the arrows\n\n        // Only skip adding a dupe if it's the same as the top item. Otherwise\n        // add it as normal.\n        this.historyStack =\n            this.last === 0 && this.historyStack.length > 0 && this.historyStack[this.last] === code\n                ? this.historyStack\n                : [code, ...this.historyStack];\n\n        // Position is more complicated. If we typed something start over\n        if (typed) {\n            this.reset();\n        } else {\n            // We want our next up push to match the index of the item that was\n            // actually entered.\n            if (this.last === 0) {\n                this.up = undefined;\n                this.down = undefined;\n            } else if (this.last) {\n                this.up = this.last + 1;\n                this.down = this.last - 1;\n            }\n        }\n    }\n\n    private reset() {\n        this.up = undefined;\n        this.down = undefined;\n    }\n\n    private adjustCursors(currentPos: number) {\n        // Save last position we entered.\n        this.last = currentPos;\n\n        // For a single item, ony up works. But never modify it.\n        if (this.historyStack.length > 1) {\n            if (currentPos < this.historyStack.length) {\n                this.up = currentPos + 1;\n            } else {\n                this.up = this.historyStack.length;\n\n                // If we go off the end, don't make the down go up to the last.\n                // CMD prompt behaves this way. Down is always one off.\n                currentPos = this.historyStack.length - 1;\n            }\n            if (currentPos > 0) {\n                this.down = currentPos - 1;\n            } else {\n                this.down = undefined;\n            }\n        }\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n'use strict';\n\nimport {\n    IInteractiveWindowMapping,\n    InteractiveWindowMessages\n} from '../../../client/datascience/interactive-common/interactiveWindowTypes';\nimport {\n    ICell,\n    IExternalCommandFromWebview,\n    IJupyterVariable,\n    IJupyterVariablesRequest\n} from '../../../client/datascience/types';\nimport {\n    CommonAction,\n    CommonActionType,\n    CommonActionTypeMapping,\n    ICellAction,\n    ICodeAction,\n    ICodeCreatedAction,\n    IEditCellAction,\n    ILinkClickAction,\n    IOpenSettingsAction,\n    IScrollAction,\n    IShowDataViewerAction,\n    IVariableExplorerHeight\n} from '../../interactive-common/redux/reducers/types';\nimport { IMonacoModelContentChangeEvent } from '../../react-common/monacoHelpers';\n\n// This function isn't made common and not exported, to ensure it isn't used elsewhere.\nfunction createIncomingActionWithPayload<\n    M extends IInteractiveWindowMapping & CommonActionTypeMapping,\n    K extends keyof M\n>(type: K, data: M[K]): CommonAction<M[K]> {\n    // tslint:disable-next-line: no-any\n    return { type, payload: { data, messageDirection: 'incoming' } as any } as any;\n}\n// This function isn't made common and not exported, to ensure it isn't used elsewhere.\nfunction createIncomingAction(type: CommonActionType | InteractiveWindowMessages): CommonAction {\n    return { type, payload: { messageDirection: 'incoming', data: undefined } };\n}\n\n// See https://react-redux.js.org/using-react-redux/connect-mapdispatch#defining-mapdispatchtoprops-as-an-object\nexport const actionCreators = {\n    focusInput: (): CommonAction => createIncomingAction(CommonActionType.FOCUS_INPUT),\n    restartKernel: (): CommonAction => createIncomingAction(CommonActionType.RESTART_KERNEL),\n    interruptKernel: (): CommonAction => createIncomingAction(CommonActionType.INTERRUPT_KERNEL),\n    deleteAllCells: (): CommonAction => createIncomingAction(InteractiveWindowMessages.DeleteAllCells),\n    deleteCell: (cellId: string): CommonAction<ICellAction> =>\n        createIncomingActionWithPayload(CommonActionType.DELETE_CELL, { cellId }),\n    undo: (): CommonAction => createIncomingAction(InteractiveWindowMessages.Undo),\n    redo: (): CommonAction => createIncomingAction(InteractiveWindowMessages.Redo),\n    linkClick: (href: string): CommonAction<ILinkClickAction> =>\n        createIncomingActionWithPayload(CommonActionType.LINK_CLICK, { href }),\n    showPlot: (imageHtml: string) => createIncomingActionWithPayload(InteractiveWindowMessages.ShowPlot, imageHtml),\n    toggleInputBlock: (cellId: string): CommonAction<ICellAction> =>\n        createIncomingActionWithPayload(CommonActionType.TOGGLE_INPUT_BLOCK, { cellId }),\n    gotoCell: (cellId: string): CommonAction<ICellAction> =>\n        createIncomingActionWithPayload(CommonActionType.GOTO_CELL, { cellId }),\n    copyCellCode: (cellId: string): CommonAction<ICellAction> =>\n        createIncomingActionWithPayload(CommonActionType.COPY_CELL_CODE, { cellId }),\n    clickCell: (cellId: string): CommonAction<ICellAction> =>\n        createIncomingActionWithPayload(CommonActionType.CLICK_CELL, { cellId }),\n    editCell: (cellId: string, e: IMonacoModelContentChangeEvent): CommonAction<IEditCellAction> =>\n        createIncomingActionWithPayload(CommonActionType.EDIT_CELL, {\n            cellId,\n            version: e.versionId,\n            modelId: e.model.id,\n            forward: e.forward,\n            reverse: e.reverse,\n            id: cellId,\n            code: e.model.getValue()\n        }),\n    submitInput: (code: string, cellId: string): CommonAction<ICodeAction> =>\n        createIncomingActionWithPayload(CommonActionType.SUBMIT_INPUT, { code, cellId }),\n    toggleVariableExplorer: (): CommonAction => createIncomingAction(CommonActionType.TOGGLE_VARIABLE_EXPLORER),\n    setVariableExplorerHeight: (containerHeight: number, gridHeight: number): CommonAction<IVariableExplorerHeight> =>\n        createIncomingActionWithPayload(CommonActionType.SET_VARIABLE_EXPLORER_HEIGHT, { containerHeight, gridHeight }),\n    expandAll: (): CommonAction => createIncomingAction(InteractiveWindowMessages.ExpandAll),\n    collapseAll: (): CommonAction => createIncomingAction(InteractiveWindowMessages.CollapseAll),\n    export: (): CommonAction => createIncomingAction(CommonActionType.EXPORT),\n    exportAs: (): CommonAction => createIncomingAction(CommonActionType.EXPORT_NOTEBOOK_AS),\n    showDataViewer: (variable: IJupyterVariable, columnSize: number): CommonAction<IShowDataViewerAction> =>\n        createIncomingActionWithPayload(CommonActionType.SHOW_DATA_VIEWER, { variable, columnSize }),\n    editorLoaded: (): CommonAction => createIncomingAction(CommonActionType.EDITOR_LOADED),\n    scroll: (isAtBottom: boolean): CommonAction<IScrollAction> =>\n        createIncomingActionWithPayload(CommonActionType.SCROLL, { isAtBottom }),\n    unfocus: (cellId: string | undefined): CommonAction<ICellAction> =>\n        createIncomingActionWithPayload(CommonActionType.UNFOCUS_CELL, { cellId }),\n    codeCreated: (cellId: string | undefined, modelId: string): CommonAction<ICodeCreatedAction> =>\n        createIncomingActionWithPayload(CommonActionType.CODE_CREATED, { cellId, modelId }),\n    editorUnmounted: (): CommonAction => createIncomingAction(CommonActionType.UNMOUNT),\n    selectKernel: (): CommonAction => createIncomingAction(InteractiveWindowMessages.SelectKernel),\n    selectServer: (): CommonAction => createIncomingAction(CommonActionType.SELECT_SERVER),\n    openSettings: (setting?: string): CommonAction<IOpenSettingsAction> =>\n        createIncomingActionWithPayload(CommonActionType.OPEN_SETTINGS, { setting }),\n    getVariableData: (\n        newExecutionCount: number,\n        refreshCount: number,\n        startIndex: number = 0,\n        pageSize: number = 100\n    ): CommonAction<IJupyterVariablesRequest> =>\n        createIncomingActionWithPayload(CommonActionType.GET_VARIABLE_DATA, {\n            executionCount: newExecutionCount,\n            sortColumn: 'name',\n            sortAscending: true,\n            startIndex,\n            pageSize,\n            refreshCount\n        }),\n    widgetFailed: (ex: Error): CommonAction<Error> =>\n        createIncomingActionWithPayload(CommonActionType.IPYWIDGET_RENDER_FAILURE, ex),\n    runExternalCommand: (buttonId: string, cell: ICell): CommonAction<IExternalCommandFromWebview> =>\n        createIncomingActionWithPayload(InteractiveWindowMessages.ExecuteExternalCommand, { buttonId, cell })\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n'use strict';\nimport '../../client/common/extensions';\n\nimport { nbformat } from '@jupyterlab/coreutils';\nimport * as fastDeepEqual from 'fast-deep-equal';\nimport * as monacoEditor from 'monaco-editor/esm/vs/editor/editor.api';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\n\nimport { Identifiers } from '../../client/datascience/constants';\nimport { CellState, IExternalWebviewCellButton, IJupyterExtraSettings } from '../../client/datascience/types';\nimport { CellInput } from '../interactive-common/cellInput';\nimport { CellOutput } from '../interactive-common/cellOutput';\nimport { CollapseButton } from '../interactive-common/collapseButton';\nimport { ExecutionCount } from '../interactive-common/executionCount';\nimport { InformationMessages } from '../interactive-common/informationMessages';\nimport { InputHistory } from '../interactive-common/inputHistory';\nimport { ICellViewModel, IFont } from '../interactive-common/mainState';\nimport { IKeyboardEvent } from '../react-common/event';\nimport { Image, ImageName } from '../react-common/image';\nimport { ImageButton } from '../react-common/imageButton';\nimport { getLocString } from '../react-common/locReactSide';\nimport { IMonacoModelContentChangeEvent } from '../react-common/monacoHelpers';\nimport { actionCreators } from './redux/actions';\n\ninterface IInteractiveCellBaseProps {\n    role?: string;\n    cellVM: ICellViewModel;\n    language: string;\n    baseTheme: string;\n    codeTheme: string;\n    testMode?: boolean;\n    autoFocus: boolean;\n    maxTextSize?: number;\n    enableScroll?: boolean;\n    showWatermark: boolean;\n    monacoTheme: string | undefined;\n    editorOptions?: monacoEditor.editor.IEditorOptions;\n    editExecutionCount?: string;\n    editorMeasureClassName?: string;\n    font: IFont;\n    settings: IJupyterExtraSettings;\n    focusPending: number;\n    externalButtons: IExternalWebviewCellButton[];\n}\n\ntype IInteractiveCellProps = IInteractiveCellBaseProps & typeof actionCreators;\n\n// tslint:disable: react-this-binding-issue\nexport class InteractiveCell extends React.Component<IInteractiveCellProps> {\n    private codeRef: React.RefObject<CellInput> = React.createRef<CellInput>();\n    private wrapperRef: React.RefObject<HTMLDivElement> = React.createRef<HTMLDivElement>();\n    private inputHistory: InputHistory | undefined;\n\n    constructor(prop: IInteractiveCellProps) {\n        super(prop);\n        this.state = { showingMarkdownEditor: false };\n        if (prop.cellVM.cell.id === Identifiers.EditCellId) {\n            this.inputHistory = new InputHistory();\n        }\n    }\n\n    public render() {\n        if (this.props.cellVM.cell.data.cell_type === 'messages') {\n            return <InformationMessages messages={this.props.cellVM.cell.data.messages} />;\n        } else {\n            return this.renderNormalCell();\n        }\n    }\n\n    public componentDidUpdate(prevProps: IInteractiveCellProps) {\n        if (this.props.cellVM.selected && !prevProps.cellVM.selected && !this.props.cellVM.focused) {\n            this.giveFocus();\n        }\n        if (this.props.cellVM.scrollCount !== prevProps.cellVM.scrollCount) {\n            this.scrollAndFlash();\n        }\n    }\n\n    public shouldComponentUpdate(nextProps: IInteractiveCellProps): boolean {\n        return !fastDeepEqual(this.props, nextProps);\n    }\n\n    private scrollAndFlash() {\n        if (this.wrapperRef && this.wrapperRef.current) {\n            // tslint:disable-next-line: no-any\n            if ((this.wrapperRef.current as any).scrollIntoView) {\n                this.wrapperRef.current.scrollIntoView({ behavior: 'auto', block: 'nearest', inline: 'nearest' });\n            }\n            this.wrapperRef.current.classList.add('flash');\n            setTimeout(() => {\n                if (this.wrapperRef.current) {\n                    this.wrapperRef.current.classList.remove('flash');\n                }\n            }, 1000);\n        }\n    }\n\n    private giveFocus() {\n        // Start out with ourselves\n        if (this.wrapperRef && this.wrapperRef.current) {\n            // Give focus to the cell if not already owning focus\n            if (!this.wrapperRef.current.contains(document.activeElement)) {\n                this.wrapperRef.current.focus();\n            }\n\n            // Scroll into view (since we have focus). However this function\n            // is not supported on enzyme\n            // tslint:disable-next-line: no-any\n            if ((this.wrapperRef.current as any).scrollIntoView) {\n                this.wrapperRef.current.scrollIntoView({ behavior: 'auto', block: 'nearest', inline: 'nearest' });\n            }\n        }\n    }\n\n    private toggleInputBlock = () => {\n        const cellId: string = this.getCell().id;\n        this.props.toggleInputBlock(cellId);\n    };\n\n    private getCell = () => {\n        return this.props.cellVM.cell;\n    };\n\n    private isCodeCell = () => {\n        return this.props.cellVM.cell.data.cell_type === 'code';\n    };\n\n    private renderNormalCell() {\n        const allowsPlainInput =\n            this.props.settings.showCellInputCode || this.props.cellVM.directInput || this.props.cellVM.editable;\n        const shouldRender = allowsPlainInput || this.shouldRenderResults();\n        const cellOuterClass = this.props.cellVM.editable ? 'cell-outer-editable' : 'cell-outer';\n        const cellWrapperClass = this.props.cellVM.editable ? 'cell-wrapper' : 'cell-wrapper cell-wrapper-noneditable';\n        const themeMatplotlibPlots = this.props.settings.themeMatplotlibPlots ? true : false;\n        // Only render if we are allowed to.\n        if (shouldRender) {\n            return (\n                <div\n                    className={cellWrapperClass}\n                    role={this.props.role}\n                    ref={this.wrapperRef}\n                    tabIndex={0}\n                    onKeyDown={this.onKeyDown}\n                    onKeyUp={this.onKeyUp}\n                    onClick={this.onMouseClick}\n                >\n                    <div className={cellOuterClass}>\n                        {this.renderControls()}\n                        <div className=\"content-div\">\n                            <div className=\"cell-result-container\">\n                                {this.renderInput()}\n                                <div>\n                                    <CellOutput\n                                        cellVM={this.props.cellVM}\n                                        baseTheme={this.props.baseTheme}\n                                        expandImage={this.props.showPlot}\n                                        maxTextSize={this.props.maxTextSize}\n                                        enableScroll={this.props.enableScroll}\n                                        themeMatplotlibPlots={themeMatplotlibPlots}\n                                        widgetFailed={this.props.widgetFailed}\n                                        openSettings={this.props.openSettings}\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            );\n        }\n\n        // Shouldn't be rendered because not allowing empty input and not a direct input cell\n        return null;\n    }\n\n    private renderNormalToolbar = () => {\n        const cell = this.getCell();\n        const cellId = cell.id;\n        const gotoCode = () => this.props.gotoCell(cellId);\n        const deleteCode = () => this.props.deleteCell(cellId);\n        const copyCode = () => this.props.copyCellCode(cellId);\n        const hasNoSource = !cell || !cell.file || cell.file === Identifiers.EmptyFileName;\n\n        return (\n            <div className=\"cell-toolbar\" key={0}>\n                <ImageButton\n                    baseTheme={this.props.baseTheme}\n                    onClick={gotoCode}\n                    tooltip={getLocString('DataScience.gotoCodeButtonTooltip', 'Go to code')}\n                    hidden={hasNoSource}\n                >\n                    <Image\n                        baseTheme={this.props.baseTheme}\n                        class=\"image-button-image\"\n                        image={ImageName.GoToSourceCode}\n                    />\n                </ImageButton>\n                <ImageButton\n                    baseTheme={this.props.baseTheme}\n                    onClick={copyCode}\n                    tooltip={getLocString('DataScience.copyBackToSourceButtonTooltip', 'Paste code into file')}\n                    hidden={!hasNoSource}\n                >\n                    <Image baseTheme={this.props.baseTheme} class=\"image-button-image\" image={ImageName.Copy} />\n                </ImageButton>\n                <ImageButton\n                    baseTheme={this.props.baseTheme}\n                    onClick={deleteCode}\n                    tooltip={getLocString('DataScience.deleteButtonTooltip', 'Remove Cell')}\n                >\n                    <Image baseTheme={this.props.baseTheme} class=\"image-button-image\" image={ImageName.Cancel} />\n                </ImageButton>\n                {this.renderExternalButtons()}\n            </div>\n        );\n    };\n\n    private renderExternalButtons() {\n        const buttons: JSX.Element[] = [];\n\n        this.props.externalButtons.forEach((button, index) => {\n            if (this.isCodeCell()) {\n                buttons.push(\n                    <ImageButton\n                        baseTheme={this.props.baseTheme}\n                        onClick={() => {\n                            button.running = true;\n                            this.props.runExternalCommand(button.buttonId, this.props.cellVM.cell);\n                        }}\n                        disabled={!button.statusToEnable.includes(this.props.cellVM.cell.state)}\n                        tooltip={button.tooltip}\n                        key={index}\n                    >\n                        <Image\n                            baseTheme={this.props.baseTheme}\n                            class=\"image-button-image\"\n                            codicon={button.running ? undefined : button.codicon}\n                            image={button.running ? ImageName.Sync : ImageName.Cancel}\n                        />\n                    </ImageButton>\n                );\n            }\n        });\n\n        return buttons;\n    }\n\n    private onMouseClick = (ev: React.MouseEvent<HTMLDivElement>) => {\n        // When we receive a click, propagate upwards. Might change our state\n        ev.stopPropagation();\n        this.props.clickCell(this.props.cellVM.cell.id);\n    };\n\n    private renderControls = () => {\n        const busy =\n            this.props.cellVM.cell.state === CellState.init || this.props.cellVM.cell.state === CellState.executing;\n        const collapseVisible =\n            this.props.cellVM.inputBlockCollapseNeeded &&\n            this.props.cellVM.inputBlockShow &&\n            !this.props.cellVM.editable &&\n            this.isCodeCell();\n        const executionCount =\n            this.props.cellVM &&\n            this.props.cellVM.cell &&\n            this.props.cellVM.cell.data &&\n            this.props.cellVM.cell.data.execution_count\n                ? this.props.cellVM.cell.data.execution_count.toString()\n                : '-';\n        const isEditOnlyCell = this.props.cellVM.cell.id === Identifiers.EditCellId;\n        const toolbar = isEditOnlyCell ? null : this.renderNormalToolbar();\n\n        return (\n            <div className=\"controls-div\">\n                <ExecutionCount\n                    isBusy={busy}\n                    count={\n                        isEditOnlyCell && this.props.editExecutionCount ? this.props.editExecutionCount : executionCount\n                    }\n                    visible={this.isCodeCell()}\n                />\n                <CollapseButton\n                    theme={this.props.baseTheme}\n                    visible={collapseVisible}\n                    open={this.props.cellVM.inputBlockOpen}\n                    onClick={this.toggleInputBlock}\n                    tooltip={getLocString('DataScience.collapseInputTooltip', 'Collapse input block')}\n                />\n                {toolbar}\n            </div>\n        );\n    };\n\n    private renderInput = () => {\n        if (this.isCodeCell()) {\n            return (\n                <CellInput\n                    cellVM={this.props.cellVM}\n                    editorOptions={this.props.editorOptions}\n                    history={this.inputHistory}\n                    codeTheme={this.props.codeTheme}\n                    onCodeChange={this.onCodeChange}\n                    onCodeCreated={this.onCodeCreated}\n                    unfocused={this.onUnfocused}\n                    testMode={this.props.testMode ? true : false}\n                    showWatermark={this.props.showWatermark}\n                    ref={this.codeRef}\n                    monacoTheme={this.props.monacoTheme}\n                    openLink={this.openLink}\n                    editorMeasureClassName={this.props.editorMeasureClassName}\n                    keyDown={this.isEditCell() ? this.onEditCellKeyDown : undefined}\n                    showLineNumbers={this.props.cellVM.showLineNumbers}\n                    font={this.props.font}\n                    disableUndoStack={this.props.cellVM.cell.id !== Identifiers.EditCellId}\n                    codeVersion={this.props.cellVM.codeVersion ? this.props.cellVM.codeVersion : 0}\n                    focusPending={this.props.focusPending}\n                    language={this.props.language}\n                    isNotebookTrusted={true}\n                />\n            );\n        }\n        return null;\n    };\n\n    private isEditCell(): boolean {\n        return this.getCell().id === Identifiers.EditCellId;\n    }\n\n    private onUnfocused = () => {\n        this.props.unfocus(this.getCell().id);\n    };\n\n    private onCodeChange = (e: IMonacoModelContentChangeEvent) => {\n        this.props.editCell(this.getCell().id, e);\n    };\n\n    private onCodeCreated = (_code: string, _file: string, cellId: string, modelId: string) => {\n        this.props.codeCreated(cellId, modelId);\n    };\n\n    private hasOutput = () => {\n        return (\n            this.getCell().state === CellState.finished ||\n            this.getCell().state === CellState.error ||\n            this.getCell().state === CellState.executing\n        );\n    };\n\n    private getCodeCell = () => {\n        return this.props.cellVM.cell.data as nbformat.ICodeCell;\n    };\n\n    private shouldRenderResults(): boolean {\n        return (\n            this.isCodeCell() &&\n            this.hasOutput() &&\n            this.getCodeCell().outputs &&\n            this.getCodeCell().outputs.length > 0 &&\n            !this.props.cellVM.hideOutput\n        );\n    }\n\n    private onKeyDown = (event: React.KeyboardEvent<HTMLDivElement>) => {\n        // Handle keydown events for the entire cell\n        if (this.getCell().id === Identifiers.EditCellId) {\n            const e: IKeyboardEvent = {\n                code: event.key,\n                shiftKey: event.shiftKey,\n                ctrlKey: event.ctrlKey,\n                metaKey: event.metaKey,\n                altKey: event.altKey,\n                target: event.target as HTMLDivElement,\n                stopPropagation: () => event.stopPropagation(),\n                preventDefault: () => event.preventDefault()\n            };\n            this.onEditCellKeyDown(Identifiers.EditCellId, e);\n        }\n    };\n\n    private onKeyUp = (event: React.KeyboardEvent<HTMLDivElement>) => {\n        // Handle keydown events for the entire cell\n        if (this.getCell().id === Identifiers.EditCellId) {\n            const e: IKeyboardEvent = {\n                code: event.key,\n                shiftKey: event.shiftKey,\n                ctrlKey: event.ctrlKey,\n                metaKey: event.metaKey,\n                altKey: event.altKey,\n                target: event.target as HTMLDivElement,\n                stopPropagation: () => event.stopPropagation(),\n                preventDefault: () => event.preventDefault()\n            };\n            this.onEditCellKeyUp(Identifiers.EditCellId, e);\n        }\n    };\n\n    private onEditCellKeyDown = (_cellId: string, e: IKeyboardEvent) => {\n        if (e.code === 'Enter' && e.shiftKey) {\n            this.editCellSubmit(e);\n        } else if (e.code === 'NumpadEnter' && e.shiftKey) {\n            this.editCellSubmit(e);\n        } else if (e.code === 'KeyU' && e.ctrlKey && e.editorInfo && !e.editorInfo.isSuggesting) {\n            e.editorInfo.clear();\n            e.stopPropagation();\n            e.preventDefault();\n        } else if (e.code === 'Escape' && !e.shiftKey && e.editorInfo && !e.editorInfo.isSuggesting) {\n            e.editorInfo.clear();\n            e.stopPropagation();\n            e.preventDefault();\n        }\n    };\n\n    private onEditCellKeyUp = (_cellId: string, e: IKeyboardEvent) => {\n        // Special case. Escape + Shift only comes as a key up because shift comes as the\n        // key down.\n        if (e.code === 'Escape' && e.shiftKey) {\n            this.editCellShiftEscape(e);\n        }\n    };\n\n    private editCellSubmit(e: IKeyboardEvent) {\n        if (e.editorInfo && e.editorInfo.contents) {\n            // Prevent shift+enter from turning into a enter\n            e.stopPropagation();\n            e.preventDefault();\n\n            // Remove empty lines off the end\n            let endPos = e.editorInfo.contents.length - 1;\n            while (endPos >= 0 && e.editorInfo.contents[endPos] === '\\n') {\n                endPos -= 1;\n            }\n            const content = e.editorInfo.contents.slice(0, endPos + 1);\n\n            // Send to the input history too if necessary\n            if (this.inputHistory) {\n                this.inputHistory.add(content, e.editorInfo.isDirty);\n            }\n\n            // Clear our editor\n            e.editorInfo.clear();\n\n            // Send to jupyter\n            this.props.submitInput(content, this.props.cellVM.cell.id);\n        }\n    }\n\n    private findTabStop(direction: number, element: Element): HTMLElement | undefined {\n        if (element) {\n            const allFocusable = document.querySelectorAll('input, button, select, textarea, a[href]');\n            if (allFocusable) {\n                const tabable = Array.prototype.filter.call(allFocusable, (i: HTMLElement) => i.tabIndex >= 0);\n                const self = tabable.indexOf(element);\n                return direction >= 0 ? tabable[self + 1] || tabable[0] : tabable[self - 1] || tabable[0];\n            }\n        }\n    }\n\n    private editCellShiftEscape = (e: IKeyboardEvent) => {\n        const focusedElement = document.activeElement;\n        if (focusedElement !== null) {\n            const nextTabStop = this.findTabStop(1, focusedElement);\n            if (nextTabStop) {\n                e.stopPropagation();\n                e.preventDefault();\n                nextTabStop.focus();\n            }\n        }\n    };\n\n    private openLink = (uri: monacoEditor.Uri) => {\n        this.props.linkClick(uri.toString());\n    };\n}\n\n// Main export, return a redux connected editor\nexport const InteractiveCellComponent = connect(null, actionCreators)(InteractiveCell);\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Identifiers } from '../../client/datascience/constants';\nimport { buildSettingsCss } from '../interactive-common/buildSettingsCss';\nimport { ContentPanel, IContentPanelProps } from '../interactive-common/contentPanel';\nimport { handleLinkClick } from '../interactive-common/handlers';\nimport { JupyterInfo } from '../interactive-common/jupyterInfo';\nimport { ICellViewModel } from '../interactive-common/mainState';\nimport { IMainWithVariables, IStore } from '../interactive-common/redux/store';\nimport { IVariablePanelProps, VariablePanel } from '../interactive-common/variablePanel';\nimport { ErrorBoundary } from '../react-common/errorBoundary';\nimport { Image, ImageName } from '../react-common/image';\nimport { ImageButton } from '../react-common/imageButton';\nimport { getLocString } from '../react-common/locReactSide';\nimport { Progress } from '../react-common/progress';\nimport { InteractiveCellComponent } from './interactiveCell';\nimport './interactivePanel.less';\nimport { actionCreators } from './redux/actions';\n\n// tslint:disable: no-suspicious-comment\n\nexport type IInteractivePanelProps = IMainWithVariables & typeof actionCreators;\n\nfunction mapStateToProps(state: IStore): IMainWithVariables {\n    return { ...state.main, variableState: state.variables };\n}\n\nexport class InteractivePanel extends React.Component<IInteractivePanelProps> {\n    private mainPanelRef: React.RefObject<HTMLDivElement> = React.createRef<HTMLDivElement>();\n    private mainPanelToolbarRef: React.RefObject<HTMLDivElement> = React.createRef<HTMLDivElement>();\n    private contentPanelRef: React.RefObject<ContentPanel> = React.createRef<ContentPanel>();\n    private renderCount: number = 0;\n    private internalScrollCount: number = 0;\n\n    constructor(props: IInteractivePanelProps) {\n        super(props);\n    }\n\n    public componentDidMount() {\n        document.addEventListener('click', this.linkClick, true);\n        this.props.editorLoaded();\n    }\n\n    public componentWillUnmount() {\n        document.removeEventListener('click', this.linkClick);\n        this.props.editorUnmounted();\n    }\n\n    public render() {\n        const dynamicFont: React.CSSProperties = {\n            fontSize: this.props.font.size,\n            fontFamily: this.props.font.family\n        };\n\n        const progressBar = (this.props.busy || !this.props.loaded) && !this.props.testMode ? <Progress /> : undefined;\n\n        // If in test mode, update our count. Use this to determine how many renders a normal update takes.\n        if (this.props.testMode) {\n            this.renderCount = this.renderCount + 1;\n        }\n\n        return (\n            <div id=\"main-panel\" ref={this.mainPanelRef} role=\"Main\" style={dynamicFont}>\n                <div className=\"styleSetter\">\n                    <style>{`${this.props.rootCss ? this.props.rootCss : ''}\n${buildSettingsCss(this.props.settings)}`}</style>\n                </div>\n                <header id=\"main-panel-toolbar\" ref={this.mainPanelToolbarRef}>\n                    {this.renderToolbarPanel()}\n                    {progressBar}\n                </header>\n                <section\n                    id=\"main-panel-variable\"\n                    aria-label={getLocString('DataScience.collapseVariableExplorerLabel', 'Variables')}\n                >\n                    {this.renderVariablePanel(this.props.baseTheme)}\n                </section>\n                <main id=\"main-panel-content\" onScroll={this.handleScroll}>\n                    {this.renderContentPanel(this.props.baseTheme)}\n                </main>\n                <section\n                    id=\"main-panel-footer\"\n                    onClick={this.footerPanelClick}\n                    aria-label={getLocString('DataScience.editSection', 'Input new cells here')}\n                >\n                    {this.renderFooterPanel(this.props.baseTheme)}\n                </section>\n            </div>\n        );\n    }\n\n    // Make the entire footer focus our input, instead of having to click directly on the monaco editor\n    private footerPanelClick = (_event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n        this.props.focusInput();\n    };\n\n    // tslint:disable-next-line: max-func-body-length\n    private renderToolbarPanel() {\n        const variableExplorerTooltip = this.props.variableState.visible\n            ? getLocString('DataScience.collapseVariableExplorerTooltip', 'Hide variables active in jupyter kernel')\n            : getLocString('DataScience.expandVariableExplorerTooltip', 'Show variables active in jupyter kernel');\n\n        return (\n            <div id=\"toolbar-panel\">\n                <div className=\"toolbar-menu-bar\">\n                    <div className=\"toolbar-menu-bar-child\">\n                        <ImageButton\n                            baseTheme={this.props.baseTheme}\n                            onClick={this.props.deleteAllCells}\n                            tooltip={getLocString('DataScience.clearAll', 'Remove all cells')}\n                        >\n                            <Image\n                                baseTheme={this.props.baseTheme}\n                                class=\"image-button-image\"\n                                image={ImageName.Cancel}\n                            />\n                        </ImageButton>\n                        <ImageButton\n                            baseTheme={this.props.baseTheme}\n                            onClick={this.props.redo}\n                            disabled={this.props.redoStack.length === 0}\n                            tooltip={getLocString('DataScience.redo', 'Redo')}\n                        >\n                            <Image baseTheme={this.props.baseTheme} class=\"image-button-image\" image={ImageName.Redo} />\n                        </ImageButton>\n                        <ImageButton\n                            baseTheme={this.props.baseTheme}\n                            onClick={this.props.undo}\n                            disabled={this.props.undoStack.length === 0}\n                            tooltip={getLocString('DataScience.undo', 'Undo')}\n                        >\n                            <Image baseTheme={this.props.baseTheme} class=\"image-button-image\" image={ImageName.Undo} />\n                        </ImageButton>\n                        <ImageButton\n                            baseTheme={this.props.baseTheme}\n                            onClick={this.props.restartKernel}\n                            tooltip={getLocString('DataScience.restartServer', 'Restart Jupyter kernel')}\n                        >\n                            <Image\n                                baseTheme={this.props.baseTheme}\n                                class=\"image-button-image\"\n                                image={ImageName.Restart}\n                            />\n                        </ImageButton>\n                        <ImageButton\n                            baseTheme={this.props.baseTheme}\n                            onClick={this.props.interruptKernel}\n                            tooltip={getLocString('DataScience.interruptKernel', 'Interrupt Jupyter kernel')}\n                        >\n                            <Image\n                                baseTheme={this.props.baseTheme}\n                                class=\"image-button-image\"\n                                image={ImageName.Interrupt}\n                            />\n                        </ImageButton>\n                        <ImageButton\n                            baseTheme={this.props.baseTheme}\n                            onClick={this.props.toggleVariableExplorer}\n                            tooltip={variableExplorerTooltip}\n                        >\n                            <Image\n                                baseTheme={this.props.baseTheme}\n                                class=\"image-button-image\"\n                                image={ImageName.VariableExplorer}\n                            />\n                        </ImageButton>\n                        <ImageButton\n                            baseTheme={this.props.baseTheme}\n                            onClick={this.props.export}\n                            disabled={this.props.cellVMs.length === 0 || this.props.busy}\n                            tooltip={getLocString('DataScience.export', 'Export as Jupyter notebook')}\n                        >\n                            <Image\n                                baseTheme={this.props.baseTheme}\n                                class=\"image-button-image\"\n                                image={ImageName.SaveAs}\n                            />\n                        </ImageButton>\n                        <ImageButton\n                            baseTheme={this.props.baseTheme}\n                            onClick={this.props.exportAs}\n                            disabled={this.props.busy || !this.props.isNotebookTrusted}\n                            className=\"native-button\"\n                            tooltip={getLocString('DataScience.notebookExportAs', 'Export as')}\n                        >\n                            <Image\n                                baseTheme={this.props.baseTheme}\n                                class=\"image-button-image\"\n                                image={ImageName.ExportToPython}\n                            />\n                        </ImageButton>\n                        <ImageButton\n                            baseTheme={this.props.baseTheme}\n                            onClick={this.props.expandAll}\n                            disabled={this.props.cellVMs.length === 0}\n                            tooltip={getLocString('DataScience.expandAll', 'Expand all cell inputs')}\n                        >\n                            <Image\n                                baseTheme={this.props.baseTheme}\n                                class=\"image-button-image\"\n                                image={ImageName.ExpandAll}\n                            />\n                        </ImageButton>\n                        <ImageButton\n                            baseTheme={this.props.baseTheme}\n                            onClick={this.props.collapseAll}\n                            disabled={this.props.cellVMs.length === 0}\n                            tooltip={getLocString('DataScience.collapseAll', 'Collapse all cell inputs')}\n                        >\n                            <Image\n                                baseTheme={this.props.baseTheme}\n                                class=\"image-button-image\"\n                                image={ImageName.CollapseAll}\n                            />\n                        </ImageButton>\n                    </div>\n                    {this.renderKernelSelection()}\n                </div>\n            </div>\n        );\n    }\n\n    private renderKernelSelection() {\n        return (\n            <JupyterInfo\n                baseTheme={this.props.baseTheme}\n                font={this.props.font}\n                kernel={this.props.kernel}\n                selectServer={this.props.selectServer}\n                selectKernel={this.props.selectKernel}\n                shouldShowTrustMessage={false}\n            />\n        );\n    }\n\n    private renderVariablePanel(baseTheme: string) {\n        if (this.props.variableState.visible) {\n            const variableProps = this.getVariableProps(baseTheme);\n            return <VariablePanel {...variableProps} />;\n        }\n\n        return null;\n    }\n\n    private renderContentPanel(baseTheme: string) {\n        // Skip if the tokenizer isn't finished yet. It needs\n        // to finish loading so our code editors work.\n        if (!this.props.monacoReady && !this.props.testMode) {\n            return null;\n        }\n\n        // Otherwise render our cells.\n        const contentProps = this.getContentProps(baseTheme);\n        return <ContentPanel {...contentProps} ref={this.contentPanelRef} />;\n    }\n\n    private renderFooterPanel(baseTheme: string) {\n        // Skip if the tokenizer isn't finished yet. It needs\n        // to finish loading so our code editors work.\n        if (\n            !this.props.monacoReady ||\n            !this.props.editCellVM ||\n            !this.props.settings ||\n            !this.props.editorOptions ||\n            !this.props.settings.allowInput\n        ) {\n            return null;\n        }\n\n        const executionCount = this.getInputExecutionCount();\n        const editPanelClass = this.props.settings.colorizeInputBox ? 'edit-panel-colorized' : 'edit-panel';\n\n        return (\n            <div className={editPanelClass}>\n                <ErrorBoundary>\n                    <InteractiveCellComponent\n                        role=\"form\"\n                        editorOptions={this.props.editorOptions}\n                        maxTextSize={undefined}\n                        enableScroll={false}\n                        autoFocus={document.hasFocus()}\n                        testMode={this.props.testMode}\n                        cellVM={this.props.editCellVM}\n                        baseTheme={baseTheme}\n                        codeTheme={this.props.codeTheme}\n                        showWatermark={true}\n                        editExecutionCount={executionCount.toString()}\n                        monacoTheme={this.props.monacoTheme}\n                        font={this.props.font}\n                        settings={this.props.settings}\n                        focusPending={this.props.focusPending}\n                        language={this.props.kernel.language}\n                        externalButtons={this.props.externalButtons}\n                    />\n                </ErrorBoundary>\n            </div>\n        );\n    }\n\n    private getInputExecutionCount = (): number => {\n        return this.props.currentExecutionCount + 1;\n    };\n\n    private getContentProps = (baseTheme: string): IContentPanelProps => {\n        return {\n            baseTheme: baseTheme,\n            cellVMs: this.props.cellVMs,\n            testMode: this.props.testMode,\n            codeTheme: this.props.codeTheme,\n            submittedText: this.props.submittedText,\n            settings: this.props.settings,\n            skipNextScroll: this.props.skipNextScroll ? true : false,\n            editable: false,\n            renderCell: this.renderCell,\n            scrollToBottom: this.scrollDiv,\n            scrollBeyondLastLine: this.props.settings\n                ? this.props.settings.extraSettings.editor.scrollBeyondLastLine\n                : false\n        };\n    };\n    private getVariableProps = (baseTheme: string): IVariablePanelProps => {\n        let toolbarHeight = 0;\n        if (this.mainPanelToolbarRef.current) {\n            toolbarHeight = this.mainPanelToolbarRef.current.offsetHeight;\n        }\n        return {\n            gridHeight: this.props.variableState.gridHeight,\n            containerHeight: this.props.variableState.containerHeight,\n            variables: this.props.variableState.variables,\n            debugging: this.props.debugging,\n            busy: this.props.busy,\n            showDataExplorer: this.props.showDataViewer,\n            skipDefault: this.props.skipDefault,\n            testMode: this.props.testMode,\n            closeVariableExplorer: this.props.toggleVariableExplorer,\n            setVariableExplorerHeight: this.props.setVariableExplorerHeight,\n            baseTheme: baseTheme,\n            pageIn: this.pageInVariableData,\n            fontSize: this.props.font.size,\n            executionCount: this.props.currentExecutionCount,\n            refreshCount: this.props.variableState.refreshCount,\n            offsetHeight: toolbarHeight,\n            supportsDebugging:\n                this.props.settings && this.props.settings.variableOptions\n                    ? this.props.settings.variableOptions.enableDuringDebugger\n                    : false\n        };\n    };\n\n    private pageInVariableData = (startIndex: number, pageSize: number) => {\n        this.props.getVariableData(\n            this.props.currentExecutionCount,\n            this.props.variableState.refreshCount,\n            startIndex,\n            pageSize\n        );\n    };\n\n    private renderCell = (\n        cellVM: ICellViewModel,\n        _index: number,\n        containerRef?: React.RefObject<HTMLDivElement>\n    ): JSX.Element | null => {\n        // Note: MaxOutputSize and enableScrollingForCellOutputs is being ignored on purpose for\n        // the interactive window. See bug: https://github.com/microsoft/vscode-python/issues/11421\n        if (this.props.settings && this.props.editorOptions) {\n            // Disable hover for collapsed code blocks\n            const options = { ...this.props.editorOptions, hover: { enabled: cellVM.inputBlockOpen } };\n            return (\n                <div key={cellVM.cell.id} id={cellVM.cell.id} ref={containerRef}>\n                    <ErrorBoundary>\n                        <InteractiveCellComponent\n                            role=\"listitem\"\n                            editorOptions={options}\n                            maxTextSize={undefined}\n                            enableScroll={false}\n                            autoFocus={false}\n                            testMode={this.props.testMode}\n                            cellVM={cellVM}\n                            baseTheme={this.props.baseTheme}\n                            codeTheme={this.props.codeTheme}\n                            showWatermark={cellVM.cell.id === Identifiers.EditCellId}\n                            editExecutionCount={this.getInputExecutionCount().toString()}\n                            monacoTheme={this.props.monacoTheme}\n                            font={this.props.font}\n                            settings={this.props.settings}\n                            focusPending={this.props.focusPending}\n                            language={this.props.kernel.language}\n                            externalButtons={this.props.externalButtons}\n                        />\n                    </ErrorBoundary>\n                </div>\n            );\n        } else {\n            return null;\n        }\n    };\n\n    // This handles the scrolling. Its called from the props of contentPanel.\n    // We only scroll when the state indicates we are at the bottom of the interactive window,\n    // otherwise it sometimes scrolls when the user wasn't at the bottom.\n    private scrollDiv = (div: HTMLDivElement) => {\n        if (this.props.isAtBottom) {\n            this.internalScrollCount += 1;\n            // Force auto here as smooth scrolling can be canceled by updates to the window\n            // from elsewhere (and keeping track of these would make this hard to maintain)\n            if (div && div.scrollIntoView) {\n                div.scrollIntoView({ behavior: 'auto', block: 'nearest', inline: 'nearest' });\n            }\n        }\n    };\n\n    private handleScroll = (e: React.UIEvent<HTMLDivElement>) => {\n        if (this.internalScrollCount > 0) {\n            this.internalScrollCount -= 1;\n        } else if (this.contentPanelRef.current) {\n            const isAtBottom = this.props.settings?.alwaysScrollOnNewCell\n                ? true\n                : this.contentPanelRef.current.computeIsAtBottom(e.currentTarget);\n            this.props.scroll(isAtBottom);\n        }\n    };\n\n    private linkClick = (ev: MouseEvent) => {\n        handleLinkClick(ev, this.props.linkClick);\n    };\n}\n\n// Main export, return a redux connected editor\nexport function getConnectedInteractiveEditor() {\n    return connect(mapStateToProps, actionCreators)(InteractivePanel);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n'use strict';\nimport { Identifiers } from '../../../../client/datascience/constants';\nimport {\n    IFinishCell,\n    InteractiveWindowMessages\n} from '../../../../client/datascience/interactive-common/interactiveWindowTypes';\nimport { ICell, IJupyterExtraSettings } from '../../../../client/datascience/types';\nimport { removeLinesFromFrontAndBack } from '../../../common';\nimport { createCellVM, extractInputText, ICellViewModel, IMainState } from '../../../interactive-common/mainState';\nimport { postActionToExtension } from '../../../interactive-common/redux/helpers';\nimport { Helpers } from '../../../interactive-common/redux/reducers/helpers';\nimport { IAddCellAction, ICellAction } from '../../../interactive-common/redux/reducers/types';\nimport { InteractiveReducerArg } from '../mapping';\n\nexport namespace Creation {\n    function isCellSupported(state: IMainState, cell: ICell): boolean {\n        // Skip message cells in test mode\n        if (state.testMode) {\n            return cell.data.cell_type !== 'messages';\n        }\n        return true;\n    }\n\n    function extractInputBlockText(cellVM: ICellViewModel, settings?: IJupyterExtraSettings) {\n        // Use the base function first\n        const text = extractInputText(cellVM, settings);\n\n        // Then remove text on the front and back. We only do this for the interactive window\n        return removeLinesFromFrontAndBack(text);\n    }\n\n    export function alterCellVM(\n        cellVM: ICellViewModel,\n        settings?: IJupyterExtraSettings,\n        visible?: boolean,\n        expanded?: boolean\n    ): ICellViewModel {\n        if (cellVM.cell.data.cell_type === 'code') {\n            // If we are already in the correct state, return back our initial cell vm\n            if (cellVM.inputBlockShow === visible && cellVM.inputBlockOpen === expanded) {\n                return cellVM;\n            }\n\n            const newCellVM = { ...cellVM };\n            if (cellVM.inputBlockShow !== visible) {\n                if (visible) {\n                    // Show the cell, the rest of the function will add on correct collapse state\n                    newCellVM.inputBlockShow = true;\n                } else {\n                    // Hide this cell\n                    newCellVM.inputBlockShow = false;\n                }\n            }\n\n            // No elseif as we want newly visible cells to pick up the correct expand / collapse state\n            if (cellVM.inputBlockOpen !== expanded && cellVM.inputBlockCollapseNeeded && cellVM.inputBlockShow) {\n                let newText = extractInputBlockText(cellVM, settings);\n\n                // While extracting the text, we might eliminate all extra lines\n                if (newText.includes('\\n')) {\n                    if (expanded) {\n                        // Expand the cell\n                        newCellVM.inputBlockOpen = true;\n                        newCellVM.inputBlockText = newText;\n                    } else {\n                        // Collapse the cell\n                        if (newText.length > 0) {\n                            newText = newText.split('\\n', 1)[0];\n                            newText = newText.slice(0, 255); // Slice to limit length, slicing past length is fine\n                            newText = newText.concat('...');\n                        }\n\n                        newCellVM.inputBlockOpen = false;\n                        newCellVM.inputBlockText = newText;\n                    }\n                } else {\n                    // If all lines eliminated, get rid of the collapse bar.\n                    newCellVM.inputBlockCollapseNeeded = false;\n                    newCellVM.inputBlockOpen = true;\n                    newCellVM.inputBlockText = newText;\n                }\n            }\n\n            return newCellVM;\n        }\n\n        return cellVM;\n    }\n\n    export function prepareCellVM(cell: ICell, mainState: IMainState): ICellViewModel {\n        let cellVM: ICellViewModel = createCellVM(cell, mainState.settings, false, mainState.debugging);\n\n        const visible = mainState.settings ? mainState.settings.showCellInputCode : false;\n        const expanded = !mainState.settings?.collapseCellInputCodeByDefault;\n\n        // Set initial cell visibility and collapse\n        cellVM = alterCellVM(cellVM, mainState.settings, visible, expanded);\n        cellVM.hasBeenRun = true;\n\n        return cellVM;\n    }\n\n    export function startCell(arg: InteractiveReducerArg<ICell>): IMainState {\n        if (isCellSupported(arg.prevState, arg.payload.data)) {\n            const result = Helpers.updateOrAdd(arg, prepareCellVM);\n            if (\n                result.cellVMs.length > arg.prevState.cellVMs.length &&\n                arg.payload.data.id !== Identifiers.EditCellId\n            ) {\n                const cellVM = result.cellVMs[result.cellVMs.length - 1];\n\n                // We're adding a new cell here. Tell the intellisense engine we have a new cell\n                postActionToExtension(arg, InteractiveWindowMessages.UpdateModel, {\n                    source: 'user',\n                    kind: 'add',\n                    oldDirty: arg.prevState.dirty,\n                    newDirty: true,\n                    cell: cellVM.cell,\n                    fullText: extractInputText(cellVM, result.settings),\n                    currentText: cellVM.inputBlockText\n                });\n            }\n\n            return result;\n        }\n        return arg.prevState;\n    }\n\n    export function updateCell(arg: InteractiveReducerArg<ICell>): IMainState {\n        if (isCellSupported(arg.prevState, arg.payload.data)) {\n            return Helpers.updateOrAdd(arg, prepareCellVM);\n        }\n        return arg.prevState;\n    }\n\n    export function finishCell(arg: InteractiveReducerArg<IFinishCell>): IMainState {\n        if (isCellSupported(arg.prevState, arg.payload.data.cell)) {\n            return Helpers.updateOrAdd(\n                { ...arg, payload: { ...arg.payload, data: arg.payload.data.cell } },\n                prepareCellVM\n            );\n        }\n        return arg.prevState;\n    }\n\n    export function deleteAllCells(arg: InteractiveReducerArg<IAddCellAction>): IMainState {\n        // Send messages to other side to indicate the deletes\n        postActionToExtension(arg, InteractiveWindowMessages.DeleteAllCells);\n\n        return {\n            ...arg.prevState,\n            cellVMs: [],\n            undoStack: Helpers.pushStack(arg.prevState.undoStack, arg.prevState.cellVMs)\n        };\n    }\n\n    export function deleteCell(arg: InteractiveReducerArg<ICellAction>): IMainState {\n        const index = arg.prevState.cellVMs.findIndex((c) => c.cell.id === arg.payload.data.cellId);\n        if (index >= 0 && arg.payload.data.cellId) {\n            // Send messages to other side to indicate the delete\n            postActionToExtension(arg, InteractiveWindowMessages.UpdateModel, {\n                source: 'user',\n                kind: 'remove',\n                index,\n                oldDirty: arg.prevState.dirty,\n                newDirty: true,\n                cell: arg.prevState.cellVMs[index].cell\n            });\n\n            const newVMs = arg.prevState.cellVMs.filter((_c, i) => i !== index);\n            return {\n                ...arg.prevState,\n                cellVMs: newVMs,\n                undoStack: Helpers.pushStack(arg.prevState.undoStack, arg.prevState.cellVMs)\n            };\n        }\n\n        return arg.prevState;\n    }\n\n    export function unmount(arg: InteractiveReducerArg): IMainState {\n        return {\n            ...arg.prevState,\n            cellVMs: [],\n            undoStack: [],\n            redoStack: [],\n            editCellVM: undefined\n        };\n    }\n\n    export function loaded(arg: InteractiveReducerArg<{ cells: ICell[] }>): IMainState {\n        postActionToExtension(arg, InteractiveWindowMessages.LoadAllCellsComplete, {\n            cells: []\n        });\n        return {\n            ...arg.prevState,\n            loaded: true,\n            busy: false\n        };\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n'use strict';\nimport { Identifiers } from '../../../../client/datascience/constants';\nimport { IScrollToCell } from '../../../../client/datascience/interactive-common/interactiveWindowTypes';\nimport { CssMessages } from '../../../../client/datascience/messages';\nimport { IJupyterExtraSettings } from '../../../../client/datascience/types';\nimport { IMainState } from '../../../interactive-common/mainState';\nimport { postActionToExtension } from '../../../interactive-common/redux/helpers';\nimport { CommonEffects } from '../../../interactive-common/redux/reducers/commonEffects';\nimport { Helpers } from '../../../interactive-common/redux/reducers/helpers';\nimport { ICellAction, IScrollAction } from '../../../interactive-common/redux/reducers/types';\nimport { computeEditorOptions } from '../../../react-common/settingsReactSide';\nimport { InteractiveReducerArg } from '../mapping';\nimport { Creation } from './creation';\n\nexport namespace Effects {\n    export function expandAll(arg: InteractiveReducerArg): IMainState {\n        if (arg.prevState.settings?.showCellInputCode) {\n            const newVMs = arg.prevState.cellVMs.map((c) =>\n                Creation.alterCellVM({ ...c }, arg.prevState.settings, true, true)\n            );\n            return {\n                ...arg.prevState,\n                cellVMs: newVMs\n            };\n        }\n        return arg.prevState;\n    }\n\n    export function collapseAll(arg: InteractiveReducerArg): IMainState {\n        if (arg.prevState.settings?.showCellInputCode) {\n            const newVMs = arg.prevState.cellVMs.map((c) =>\n                Creation.alterCellVM({ ...c }, arg.prevState.settings, true, false)\n            );\n            return {\n                ...arg.prevState,\n                cellVMs: newVMs\n            };\n        }\n        return arg.prevState;\n    }\n\n    export function toggleInputBlock(arg: InteractiveReducerArg<ICellAction>): IMainState {\n        if (arg.payload.data.cellId) {\n            const newVMs = [...arg.prevState.cellVMs];\n            const index = arg.prevState.cellVMs.findIndex((c) => c.cell.id === arg.payload.data.cellId);\n            const oldVM = arg.prevState.cellVMs[index];\n            newVMs[index] = Creation.alterCellVM({ ...oldVM }, arg.prevState.settings, true, !oldVM.inputBlockOpen);\n            return {\n                ...arg.prevState,\n                cellVMs: newVMs\n            };\n        }\n        return arg.prevState;\n    }\n\n    export function updateSettings(arg: InteractiveReducerArg<string>): IMainState {\n        // String arg should be the IDataScienceExtraSettings\n        const newSettingsJSON = JSON.parse(arg.payload.data);\n        const newSettings = <IJupyterExtraSettings>newSettingsJSON;\n        const newEditorOptions = computeEditorOptions(newSettings);\n        const newFontFamily = newSettings.extraSettings\n            ? newSettings.extraSettings.editor.fontFamily\n            : arg.prevState.font.family;\n        const newFontSize = newSettings.extraSettings\n            ? newSettings.extraSettings.editor.fontSize\n            : arg.prevState.font.size;\n\n        // Ask for new theme data if necessary\n        if (\n            newSettings &&\n            newSettings.extraSettings &&\n            newSettings.extraSettings.theme !== arg.prevState.vscodeThemeName\n        ) {\n            const knownDark = Helpers.computeKnownDark(newSettings);\n            // User changed the current theme. Rerender\n            postActionToExtension(arg, CssMessages.GetCssRequest, { isDark: knownDark });\n            postActionToExtension(arg, CssMessages.GetMonacoThemeRequest, { isDark: knownDark });\n        }\n\n        // Update our input cell state if the user changed this setting\n        let newVMs = arg.prevState.cellVMs;\n        if (newSettings.showCellInputCode !== arg.prevState.settings?.showCellInputCode) {\n            newVMs = arg.prevState.cellVMs.map((c) =>\n                Creation.alterCellVM(\n                    c,\n                    newSettings,\n                    newSettings.showCellInputCode,\n                    !newSettings.collapseCellInputCodeByDefault\n                )\n            );\n        }\n\n        return {\n            ...arg.prevState,\n            cellVMs: newVMs,\n            settings: newSettings,\n            editorOptions: newEditorOptions,\n            font: {\n                size: newFontSize,\n                family: newFontFamily\n            }\n        };\n    }\n\n    export function scrollToCell(arg: InteractiveReducerArg<IScrollToCell>): IMainState {\n        // Up the scroll count on the necessary cell\n        const index = arg.prevState.cellVMs.findIndex((c) => c.cell.id === arg.payload.data.id);\n        if (index >= 0) {\n            const newVMs = [...arg.prevState.cellVMs];\n\n            // Scroll one cell and unscroll another.\n            newVMs[index] = { ...newVMs[index], scrollCount: newVMs[index].scrollCount + 1 };\n            return {\n                ...arg.prevState,\n                cellVMs: newVMs\n            };\n        }\n\n        return arg.prevState;\n    }\n\n    export function scrolled(arg: InteractiveReducerArg<IScrollAction>): IMainState {\n        return {\n            ...arg.prevState,\n            isAtBottom: arg.payload.data.isAtBottom\n        };\n    }\n\n    export function clickCell(arg: InteractiveReducerArg<ICellAction>): IMainState {\n        if (\n            arg.payload.data.cellId === Identifiers.EditCellId &&\n            arg.prevState.editCellVM &&\n            !arg.prevState.editCellVM.focused\n        ) {\n            return {\n                ...arg.prevState,\n                editCellVM: {\n                    ...arg.prevState.editCellVM,\n                    focused: true\n                }\n            };\n        } else if (arg.prevState.editCellVM && arg.payload.data.cellId !== Identifiers.EditCellId) {\n            return {\n                ...arg.prevState,\n                editCellVM: {\n                    ...arg.prevState.editCellVM,\n                    focused: false\n                }\n            };\n        }\n\n        // If no change, make sure focus updates\n        return CommonEffects.focusPending(arg.prevState);\n    }\n\n    export function unfocusCell(arg: InteractiveReducerArg<ICellAction>): IMainState {\n        if (\n            arg.payload.data.cellId === Identifiers.EditCellId &&\n            arg.prevState.editCellVM &&\n            arg.prevState.editCellVM.focused\n        ) {\n            return {\n                ...arg.prevState,\n                editCellVM: {\n                    ...arg.prevState.editCellVM,\n                    focused: false\n                }\n            };\n        }\n\n        return arg.prevState;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n'use strict';\n// tslint:disable-next-line: no-require-imports no-var-requires\nconst cloneDeep = require('lodash/cloneDeep');\nimport * as uuid from 'uuid/v4';\n\nimport { CellMatcher } from '../../../../client/datascience/cellMatcher';\nimport { InteractiveWindowMessages } from '../../../../client/datascience/interactive-common/interactiveWindowTypes';\nimport { CellState } from '../../../../client/datascience/types';\nimport { generateMarkdownFromCodeLines } from '../../../common';\nimport { createCellFrom } from '../../../common/cellFactory';\nimport { createCellVM, IMainState } from '../../../interactive-common/mainState';\nimport { postActionToExtension } from '../../../interactive-common/redux/helpers';\nimport { Helpers } from '../../../interactive-common/redux/reducers/helpers';\nimport { ICodeAction } from '../../../interactive-common/redux/reducers/types';\nimport { InteractiveReducerArg } from '../mapping';\nimport { Creation } from './creation';\n\nexport namespace Execution {\n    export function undo(arg: InteractiveReducerArg): IMainState {\n        if (arg.prevState.undoStack.length > 0) {\n            // Pop one off of our undo stack and update our redo\n            const cells = arg.prevState.undoStack[arg.prevState.undoStack.length - 1];\n            const undoStack = arg.prevState.undoStack.slice(0, arg.prevState.undoStack.length - 1);\n            const redoStack = Helpers.pushStack(arg.prevState.redoStack, arg.prevState.cellVMs);\n            postActionToExtension(arg, InteractiveWindowMessages.Undo);\n            return {\n                ...arg.prevState,\n                cellVMs: cells,\n                undoStack: undoStack,\n                redoStack: redoStack,\n                skipNextScroll: true\n            };\n        }\n\n        return arg.prevState;\n    }\n\n    export function redo(arg: InteractiveReducerArg): IMainState {\n        if (arg.prevState.redoStack.length > 0) {\n            // Pop one off of our redo stack and update our undo\n            const cells = arg.prevState.redoStack[arg.prevState.redoStack.length - 1];\n            const redoStack = arg.prevState.redoStack.slice(0, arg.prevState.redoStack.length - 1);\n            const undoStack = Helpers.pushStack(arg.prevState.undoStack, arg.prevState.cellVMs);\n            postActionToExtension(arg, InteractiveWindowMessages.Redo);\n            return {\n                ...arg.prevState,\n                cellVMs: cells,\n                undoStack: undoStack,\n                redoStack: redoStack,\n                skipNextScroll: true\n            };\n        }\n\n        return arg.prevState;\n    }\n\n    export function startDebugging(arg: InteractiveReducerArg): IMainState {\n        return {\n            ...arg.prevState,\n            debugging: true\n        };\n    }\n\n    export function stopDebugging(arg: InteractiveReducerArg): IMainState {\n        return {\n            ...arg.prevState,\n            debugging: false\n        };\n    }\n\n    export function submitInput(arg: InteractiveReducerArg<ICodeAction>): IMainState {\n        // noop if the submitted code is just a cell marker\n        const matcher = new CellMatcher(arg.prevState.settings);\n        if (matcher.stripFirstMarker(arg.payload.data.code).length > 0 && arg.prevState.editCellVM) {\n            // This should be from the edit cell VM. Copy it and change the cell id\n            let newCell = cloneDeep(arg.prevState.editCellVM);\n\n            // Change this editable cell to not editable.\n            newCell.cell.state = CellState.executing;\n            newCell.cell.data.source = arg.payload.data.code;\n\n            // Change type to markdown if necessary\n            const split = arg.payload.data.code.splitLines({ trim: false });\n            const firstLine = split[0];\n            if (matcher.isMarkdown(firstLine)) {\n                newCell.cell.data = createCellFrom(newCell.cell.data, 'markdown');\n                newCell.cell.data.source = generateMarkdownFromCodeLines(split);\n                newCell.cell.state = CellState.finished;\n            } else if (newCell.cell.data.cell_type === 'markdown') {\n                newCell.cell.state = CellState.finished;\n            }\n\n            // Update input controls (always show expanded since we just edited it.)\n            newCell = createCellVM(newCell.cell, arg.prevState.settings, false, false);\n            const collapseInputs = arg.prevState.settings\n                ? arg.prevState.settings.collapseCellInputCodeByDefault\n                : false;\n            newCell = Creation.alterCellVM(newCell, arg.prevState.settings, true, !collapseInputs);\n            newCell.useQuickEdit = false;\n\n            // Generate a new id\n            newCell.cell.id = uuid();\n\n            // Indicate this is direct input so that we don't hide it if the user has\n            // hide all inputs turned on.\n            newCell.directInput = true;\n\n            // Send a message to execute this code if necessary.\n            if (newCell.cell.state !== CellState.finished) {\n                postActionToExtension(arg, InteractiveWindowMessages.SubmitNewCell, {\n                    code: arg.payload.data.code,\n                    id: newCell.cell.id\n                });\n            }\n\n            // Stick in a new cell at the bottom that's editable and update our state\n            // so that the last cell becomes busy\n            return {\n                ...arg.prevState,\n                cellVMs: [...arg.prevState.cellVMs, newCell],\n                undoStack: Helpers.pushStack(arg.prevState.undoStack, arg.prevState.cellVMs),\n                skipNextScroll: false,\n                submittedText: true\n            };\n        }\n        return arg.prevState;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n'use strict';\nimport { InteractiveWindowMessages } from '../../../../client/datascience/interactive-common/interactiveWindowTypes';\nimport { CssMessages, SharedMessages } from '../../../../client/datascience/messages';\nimport { CommonEffects } from '../../../interactive-common/redux/reducers/commonEffects';\nimport { Kernel } from '../../../interactive-common/redux/reducers/kernel';\nimport { Transfer } from '../../../interactive-common/redux/reducers/transfer';\nimport { CommonActionType } from '../../../interactive-common/redux/reducers/types';\nimport { IInteractiveActionMapping } from '../mapping';\nimport { Creation } from './creation';\nimport { Effects } from './effects';\nimport { Execution } from './execution';\n\n// The list of reducers. 1 per message/action.\nexport const reducerMap: Partial<IInteractiveActionMapping> = {\n    // State updates\n    [CommonActionType.RESTART_KERNEL]: Kernel.restartKernel,\n    [CommonActionType.INTERRUPT_KERNEL]: Kernel.interruptKernel,\n    [InteractiveWindowMessages.SelectKernel]: Kernel.selectKernel,\n    [CommonActionType.SELECT_SERVER]: Kernel.selectJupyterURI,\n    [CommonActionType.OPEN_SETTINGS]: CommonEffects.openSettings,\n    [CommonActionType.EXPORT]: Transfer.exportCells,\n    [CommonActionType.EXPORT_NOTEBOOK_AS]: Transfer.showExportAsMenu,\n    [CommonActionType.SAVE]: Transfer.save,\n    [CommonActionType.SHOW_DATA_VIEWER]: Transfer.showDataViewer,\n    [CommonActionType.DELETE_CELL]: Creation.deleteCell,\n    [InteractiveWindowMessages.ShowPlot]: Transfer.showPlot,\n    [CommonActionType.LINK_CLICK]: Transfer.linkClick,\n    [CommonActionType.GOTO_CELL]: Transfer.gotoCell,\n    [CommonActionType.TOGGLE_INPUT_BLOCK]: Effects.toggleInputBlock,\n    [CommonActionType.COPY_CELL_CODE]: Transfer.copyCellCode,\n    [CommonActionType.EDIT_CELL]: Transfer.editCell,\n    [CommonActionType.SUBMIT_INPUT]: Execution.submitInput,\n    [InteractiveWindowMessages.ExpandAll]: Effects.expandAll,\n    [CommonActionType.EDITOR_LOADED]: Transfer.started,\n    [InteractiveWindowMessages.LoadAllCells]: Creation.loaded,\n    [CommonActionType.SCROLL]: Effects.scrolled,\n    [CommonActionType.CLICK_CELL]: Effects.clickCell,\n    [CommonActionType.UNFOCUS_CELL]: Effects.unfocusCell,\n    [CommonActionType.UNMOUNT]: Creation.unmount,\n    [CommonActionType.FOCUS_INPUT]: CommonEffects.focusInput,\n    [CommonActionType.LOAD_IPYWIDGET_CLASS_SUCCESS]: CommonEffects.handleLoadIPyWidgetClassSuccess,\n    [CommonActionType.LOAD_IPYWIDGET_CLASS_FAILURE]: CommonEffects.handleLoadIPyWidgetClassFailure,\n    [CommonActionType.IPYWIDGET_WIDGET_VERSION_NOT_SUPPORTED]: CommonEffects.notifyAboutUnsupportedWidgetVersions,\n    [CommonActionType.IPYWIDGET_RENDER_FAILURE]: CommonEffects.handleIPyWidgetRenderFailure,\n\n    // Messages from the webview (some are ignored)\n    [InteractiveWindowMessages.Undo]: Execution.undo,\n    [InteractiveWindowMessages.Redo]: Execution.redo,\n    [InteractiveWindowMessages.StartCell]: Creation.startCell,\n    [InteractiveWindowMessages.FinishCell]: Creation.finishCell,\n    [InteractiveWindowMessages.UpdateCellWithExecutionResults]: Creation.updateCell,\n    [InteractiveWindowMessages.RestartKernel]: Kernel.handleRestarted,\n    [CssMessages.GetCssResponse]: CommonEffects.handleCss,\n    [InteractiveWindowMessages.MonacoReady]: CommonEffects.monacoReady,\n    [CssMessages.GetMonacoThemeResponse]: CommonEffects.monacoThemeChange,\n    [InteractiveWindowMessages.GetAllCells]: Transfer.getAllCells,\n    [InteractiveWindowMessages.ExpandAll]: Effects.expandAll,\n    [InteractiveWindowMessages.CollapseAll]: Effects.collapseAll,\n    [InteractiveWindowMessages.DeleteAllCells]: Creation.deleteAllCells,\n    [InteractiveWindowMessages.StartProgress]: CommonEffects.startProgress,\n    [InteractiveWindowMessages.StopProgress]: CommonEffects.stopProgress,\n    [SharedMessages.UpdateSettings]: Effects.updateSettings,\n    [InteractiveWindowMessages.StartDebugging]: Execution.startDebugging,\n    [InteractiveWindowMessages.StopDebugging]: Execution.stopDebugging,\n    [InteractiveWindowMessages.ScrollToCell]: Effects.scrollToCell,\n    [InteractiveWindowMessages.UpdateKernel]: Kernel.updateStatus,\n    [SharedMessages.LocInit]: CommonEffects.handleLocInit,\n    [InteractiveWindowMessages.UpdateDisplayData]: CommonEffects.handleUpdateDisplayData,\n    [InteractiveWindowMessages.HasCell]: Transfer.hasCell,\n    [InteractiveWindowMessages.UpdateExternalCellButtons]: CommonEffects.handleWebviewButtons,\n    [InteractiveWindowMessages.ExecuteExternalCommand]: Transfer.executeExternalCommand\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n'use strict';\n\n// This must be on top, do not change. Required by webpack.\nimport '../common/main';\n// This must be on top, do not change. Required by webpack.\n\n// tslint:disable-next-line: ordered-imports\nimport '../common/index.css';\n\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport { TextAreaFocusTracker } from '../interactive-common/textAreaFocusTracker';\nimport { WidgetManagerComponent } from '../ipywidgets/container';\nimport { IVsCodeApi, PostOffice } from '../react-common/postOffice';\nimport { detectBaseTheme } from '../react-common/themeDetector';\nimport { getConnectedInteractiveEditor } from './interactivePanel';\nimport { createStore } from './redux/store';\n\n// This special function talks to vscode from a web panel\nexport declare function acquireVsCodeApi(): IVsCodeApi;\nconst baseTheme = detectBaseTheme();\n// tslint:disable-next-line: no-any\nconst testMode = (window as any).inTestMode;\n// tslint:disable-next-line: no-typeof-undefined\nconst skipDefault = testMode ? false : typeof acquireVsCodeApi !== 'undefined';\n\n// Create the redux store\nconst postOffice = new PostOffice();\nconst store = createStore(skipDefault, baseTheme, testMode, postOffice);\n\n// Wire up a connected react control for our InteractiveEditor\nconst ConnectedInteractiveEditor = getConnectedInteractiveEditor();\n\n// Stick them all together\n// tslint:disable:no-typeof-undefined\nReactDOM.render(\n    <Provider store={store}>\n        <TextAreaFocusTracker />\n        <ConnectedInteractiveEditor />\n        <WidgetManagerComponent postOffice={postOffice} widgetContainerId={'rootWidget'} store={store} />\n    </Provider>,\n    document.getElementById('root') as HTMLElement\n);\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n'use strict';\n\nimport * as ReduxCommon from '../../interactive-common/redux/store';\nimport { PostOffice } from '../../react-common/postOffice';\nimport { reducerMap } from './reducers';\n\n// This special version uses the reducer map from the IInteractiveWindowMapping\nexport function createStore(skipDefault: boolean, baseTheme: string, testMode: boolean, postOffice: PostOffice) {\n    return ReduxCommon.createStore(skipDefault, baseTheme, testMode, false, false, reducerMap, postOffice);\n}\n","\nvar content = require(\"!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./interactivePanel.less\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./interactivePanel.less\", function() {\n\t\tvar newContent = require(\"!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./interactivePanel.less\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","module.exports = log4js;"],"sourceRoot":""}