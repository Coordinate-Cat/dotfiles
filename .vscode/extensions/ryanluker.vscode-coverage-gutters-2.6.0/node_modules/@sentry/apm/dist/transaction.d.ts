import { Hub } from '@sentry/hub';
import { TransactionContext } from '@sentry/types';
import { Span as SpanClass } from './span';
/**
 * Keeps track of finished spans for a given transaction
 * @internal
 * @hideconstructor
 * @hidden
 */
export declare class SpanRecorder {
    private readonly _maxlen;
    spans: SpanClass[];
    constructor(maxlen?: number);
    /**
     * This is just so that we don't run out of memory while recording a lot
     * of spans. At some point we just stop and flush out the start of the
     * trace tree (i.e.the first n spans with the smallest
     * start_timestamp).
     */
    add(span: SpanClass): void;
}
/** JSDoc */
export declare class Transaction extends SpanClass {
    /**
     * The reference to the current hub.
     */
    private readonly _hub;
    name?: string;
    private readonly _trimEnd?;
    /**
     * This constructor should never be called manually. Those instrumenting tracing should use
     * `Sentry.startTransaction()`, and internal methods should use `hub.startTransaction()`.
     * @internal
     * @hideconstructor
     * @hidden
     */
    constructor(transactionContext: TransactionContext, hub?: Hub);
    /**
     * JSDoc
     */
    setName(name: string): void;
    /**
     * Attaches SpanRecorder to the span itself
     * @param maxlen maximum number of spans that can be recorded
     */
    initSpanRecorder(maxlen?: number): void;
    /**
     * @inheritDoc
     */
    finish(endTimestamp?: number): string | undefined;
}
//# sourceMappingURL=transaction.d.ts.map