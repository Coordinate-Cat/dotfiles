'use strict';

exports.__esModule = true;
exports.getSize = exports.cacheFileName = undefined;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var getSize = exports.getSize = function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee(pkg, config) {
    var key;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            readSizeCache();
            _context.prev = 1;

            versionsCache[pkg.string] = versionsCache[pkg.string] || (0, _utils.getPackageVersion)(pkg);
            _context.next = 8;
            break;

          case 5:
            _context.prev = 5;
            _context.t0 = _context['catch'](1);
            return _context.abrupt('return', _extends({}, pkg, failedSize));

          case 8:
            key = pkg.string + '#' + versionsCache[pkg.string];

            if (!(sizeCache[key] === undefined || sizeCache[key] instanceof Promise)) {
              _context.next = 27;
              break;
            }

            _context.prev = 10;

            sizeCache[key] = sizeCache[key] || calcPackageSize(pkg, config);
            _context.next = 14;
            return sizeCache[key];

          case 14:
            sizeCache[key] = _context.sent;

            saveSizeCache();
            _context.next = 27;
            break;

          case 18:
            _context.prev = 18;
            _context.t1 = _context['catch'](10);

            if (!(_context.t1 === _debouncePromise.DebounceError)) {
              _context.next = 25;
              break;
            }

            delete sizeCache[key];
            throw _context.t1;

          case 25:
            sizeCache[key] = failedSize;
            return _context.abrupt('return', _extends({}, pkg, sizeCache[key], { error: _context.t1 }));

          case 27:
            return _context.abrupt('return', _extends({}, pkg, sizeCache[key]));

          case 28:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this, [[1, 5], [10, 18]]);
  }));

  return function getSize(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

exports.clearSizeCache = clearSizeCache;
exports.cleanup = cleanup;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _workerFarm = require('worker-farm');

var _workerFarm2 = _interopRequireDefault(_workerFarm);

var _pkgDir = require('pkg-dir');

var _pkgDir2 = _interopRequireDefault(_pkgDir);

var _debouncePromise = require('./debouncePromise');

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var MAX_WORKER_RETRIES = 3;
var MAX_CONCURRENT_WORKERS = require('os').cpus().length - 1;

var debug = process.env.NODE_ENV === 'test';
var workers = null;

function initWorkers(config) {
  workers = (0, _workerFarm2.default)({
    maxConcurrentWorkers: debug ? 1 : MAX_CONCURRENT_WORKERS,
    maxRetries: MAX_WORKER_RETRIES,
    maxCallTime: config.maxCallTime || Infinity
  }, require.resolve('./webpack'), ['calcSize']);
}

var extensionVersion = (0, _utils.parseJson)(_pkgDir2.default.sync(__dirname)).version;
var sizeCache = {};
var versionsCache = {};
var failedSize = { size: 0, gzip: 0 };
var cacheFileName = exports.cacheFileName = _path2.default.join(__dirname, 'ic-cache-' + extensionVersion);

function calcPackageSize(packageInfo, config) {
  if (!workers) {
    initWorkers(config);
  }

  return (0, _debouncePromise.debouncePromise)(packageInfo.fileName + '#' + packageInfo.line, function (resolve, reject) {
    var calcSize = config.concurrent ? workers.calcSize : require('./webpack').calcSize;
    calcSize(packageInfo, function (err, result) {
      return err ? reject(err) : resolve(result);
    });
  });
}

function clearSizeCache() {
  sizeCache = {};
  if (_fs2.default.existsSync(cacheFileName)) {
    _fs2.default.unlinkSync(cacheFileName);
  }
}

function readSizeCache() {
  try {
    if (Object.keys(sizeCache).length === 0 && _fs2.default.existsSync(cacheFileName)) {
      sizeCache = JSON.parse(_fs2.default.readFileSync(cacheFileName, 'utf-8'));
    }
  } catch (e) {
    // silent error
  }
}

function saveSizeCache() {
  try {
    var keys = Object.keys(sizeCache).filter(function (key) {
      var size = sizeCache[key] && sizeCache[key].size;
      return typeof size === 'number' && size > 0;
    });
    var cache = keys.reduce(function (obj, key) {
      var _extends2;

      return _extends({}, obj, (_extends2 = {}, _extends2[key] = sizeCache[key], _extends2));
    }, {});
    if (Object.keys(cache).length > 0) {
      _fs2.default.writeFileSync(cacheFileName, JSON.stringify(cache, null, 2), 'utf-8');
    }
  } catch (e) {
    // silent error
  }
}

function cleanup() {
  if (workers) {
    _workerFarm2.default.end(workers);
    workers = null;
  }
}