'use strict';

exports.__esModule = true;
exports.JAVASCRIPT = exports.TYPESCRIPT = undefined;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

exports.cleanup = cleanup;
exports.importCost = importCost;

var _packageInfo = require('./packageInfo');

var _parser = require('./parser');

var _events = require('events');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var TYPESCRIPT = exports.TYPESCRIPT = _parser.TYPESCRIPT;
var JAVASCRIPT = exports.JAVASCRIPT = _parser.JAVASCRIPT;

function cleanup() {
  (0, _packageInfo.cleanup)();
}

function importCost(fileName, text, language) {
  var _this = this;

  var config = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : { maxCallTime: Infinity, concurrent: true };

  var emitter = new _events.EventEmitter();
  setTimeout(_asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
    var imports, promises, packages;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            imports = (0, _parser.getPackages)(fileName, text, language).filter(function (packageInfo) {
              return !packageInfo.name.startsWith('.');
            });

            emitter.emit('start', imports);
            promises = imports.map(function (packageInfo) {
              return (0, _packageInfo.getSize)(packageInfo, config);
            }).map(function (promise) {
              return promise.then(function (packageInfo) {
                emitter.emit('calculated', packageInfo);
                return packageInfo;
              });
            });
            _context.next = 6;
            return Promise.all(promises);

          case 6:
            _context.t0 = function (x) {
              return x;
            };

            packages = _context.sent.filter(_context.t0);

            emitter.emit('done', packages);
            _context.next = 14;
            break;

          case 11:
            _context.prev = 11;
            _context.t1 = _context['catch'](0);

            emitter.emit('error', _context.t1);

          case 14:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, _this, [[0, 11]]);
  })), 0);
  return emitter;
}