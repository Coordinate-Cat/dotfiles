{
  "vnew": {
    "prefix": "vnew",
    "body": [
      "new Vue({",
      "\t$1",
      "})"
    ],
    "description": "new Vue()"
  },
  "vgsilent": {
    "prefix": "vgsilent",
    "body": [
      "Vue.config.silent = ${1:true}"
    ],
    "description": "Vue.config.silent"
  },
  "vgeh": {
    "prefix": "vgeh",
    "body": [
      "Vue.config.errorHandler = function (err, vm, info) {",
      "\t${1:// handle error}",
      "}"
    ],
    "description": "Vue.config.errorHandler"
  },
  "vgwh": {
    "prefix": "vgwh",
    "body": [
      "Vue.config.warnHandler = function (msg, vm, trace) {",
      "\t${1:// handle warn}",
      "}"
    ],
    "description": "Vue.config.warnHandler"
  },
  "vgextend": {
    "prefix": "vgextend",
    "body": [
      "Vue.extend({",
      "\ttemplate:${1:template}",
      "})"
    ],
    "description": "Vue.extend( options )"
  },
  "vgnt": {
    "prefix": "vgnt",
    "body": [
      "Vue.nextTick({",
      "\t$1",
      "})"
    ],
    "description": "Vue.nextTick( callback, [context] )"
  },
  "vgset": {
    "prefix": "vgset",
    "body": [
      "Vue.set(${2:target}, ${3:key}, ${4:value})"
    ],
    "description": "Vue.set( target, key, value )"
  },
  "vgdelete": {
    "prefix": "vgdelete",
    "body": [
      "Vue.delete(${2:target}, ${3:key})"
    ],
    "description": "Vue.delete( target, key )"
  },
  "directive": {
    "prefix": "vgdirective",
    "body": [
      "Vue.directive(${2:id}${3:, [definition]})"
    ],
    "description": "Vue.directive( id, [definition] )"
  },
  "vgfilter": {
    "prefix": "vgfilter",
    "body": [
      "Vue.filter(${1:id}${2:, [definition]})"
    ],
    "description": "Vue.filter( id, [definition] )"
  },
  "vgcomponent": {
    "prefix": "vgcomponent",
    "body": [
      "Vue.component(${1:id}${2:, [definition]})$0"
    ],
    "description": "Vue.component( id, [definition] )"
  },
  "vguse": {
    "prefix": "vguse",
    "body": [
      "Vue.use(${1:plugin})$0"
    ],
    "description": "Vue.use( plugin )"
  },
  "vgmixin": {
    "prefix": "vgmixin",
    "body": [
      "Vue.mixin({${1:mixin}})"
    ],
    "description": "Vue.mixin( mixin )"
  },
  "vgcompile": {
    "prefix": "vgcompile",
    "body": [
      "Vue.compile(${1:template})"
    ],
    "description": "Vue.compile( template )"
  },
  "vodata": {
    "prefix": "vdata",
    "body": [
      "data() {",
      "\treturn {",
      "\t\t$1",
      "\t}",
      "},$0"
    ],
    "description": "The data object for the Vue instance."
  },
  "vomounted": {
    "prefix": "vmounted",
    "body": [
      "mounted () {",
      "\t$1",
      "}"
    ],
    "description": "mounted"
  },
  "vobm": {
    "prefix": "vbm",
    "body": [
      "beforeMount () {",
      "\t$1",
      "}"
    ],
    "description": "beforeMount"
  },
  "vocreated": {
    "prefix": "vcreated",
    "body": [
      "created () {",
      "\t$1",
      "}"
    ],
    "description": "created"
  },
  "vobc": {
    "prefix": "vbc",
    "body": [
      "beforeCreate () {",
      "\t$1",
      "}"
    ],
    "description": "beforeCreate"
  },
  "voupdated": {
    "prefix": "vupdated",
    "body": [
      "updated () {",
      "\t$1",
      "}"
    ],
    "description": "updated"
  },
  "vobu": {
    "prefix": "vbu",
    "body": [
      "beforeUpdate () {",
      "\t$1",
      "}"
    ],
    "description": "beforeUpdate"
  },
  "voactivated": {
    "prefix": "vactivated",
    "body": [
      "activated () {",
      "\t$1",
      "}"
    ],
    "description": "activated"
  },
  "vodeactivated": {
    "prefix": "vdeactivated",
    "body": [
      "deactivated () {",
      "\t$1",
      "}"
    ],
    "description": "deactivated"
  },
  "vobd": {
    "prefix": "vbd",
    "body": [
      "beforeDestroy () {",
      "\t$1",
      "}"
    ],
    "description": "beforeDestroy"
  },
  "vodestroyed": {
    "prefix": "vdestroyed",
    "body": [
      "destroyed () {",
      "\t$1",
      "}"
    ],
    "description": "destroyed"
  },
  "voprops": {
    "prefix": "vprops",
    "body": [
      "props: {",
      "\t$1",
      "}"
    ],
    "description": "props"
  },
  "vopd": {
    "prefix": "vpd",
    "body": [
      "propsData: {",
      "\t$1",
      "}"
    ],
    "description": "props"
  },
  "vocomputed": {
    "prefix": "vcomputed",
    "body": [
      "computed: {",
      "\t$1",
      "}"
    ],
    "description": "computed"
  },
  "vomethods": {
    "prefix": "vmethods",
    "body": [
      "methods: {",
      "\t$1",
      "}"
    ],
    "description": "methods"
  },
  "vowatch": {
    "prefix": "vwatch",
    "body": [
      "watch: {",
      "\t$1",
      "}"
    ],
    "description": "watch"
  },
  "vowo": {
    "prefix": "vwo",
    "body": [
      "${1:key}: {",
      "\tdeep: ${2:true},",
      "\timmediate: ${3:true},",
      "\thandler: function (${4:val}, ${5:oldVal}) {",
      "\t\t$6",
      "\t}",
      "},$0"
    ],
    "description": "Vue Watcher with options."
  },
  "vodirectives": {
    "prefix": "vdirectives",
    "body": [
      "directives: {",
      "\t$1",
      "}"
    ],
    "description": "directives"
  },
  "vofilters": {
    "prefix": "vfilters",
    "body": [
      "filters: {",
      "\t$1",
      "}"
    ],
    "description": "filters"
  },
  "vocomponents": {
    "prefix": "vcomponents",
    "body": [
      "components: {",
      "\t$1",
      "}"
    ],
    "description": "components"
  },
  "vomixins": {
    "prefix": "vmixins",
    "body": [
      "mixins:[$1],"
    ],
    "description": "mixins"
  },
  "voprovide": {
    "prefix": "vprovide",
    "body": [
      "provide: {",
      "\t$1",
      "}"
    ],
    "description": "provide"
  },
  "voinject": {
    "prefix": "vinject",
    "body": [
      "inject: [$1],"
    ],
    "description": "inject"
  },
  "vomodel": {
    "prefix": "vmodel",
    "body": [
      "model: {",
      "\tprop: $1,",
      "\tevent: $2",
      "}"
    ],
    "description": "model"
  },
  "vorender": {
    "prefix": "vrender",
    "body": [
      "render(h) {",
      "\t$1",
      "},"
    ],
    "description": "An alternative to string templates allowing you to leverage the full programmatic power of JavaScript."
  },
  "vdata": {
    "prefix": "vdata",
    "body": [
      "${1|this,vm|}.\\$data$2"
    ],
    "description": "Type: Object. Read only."
  },
  "vprops": {
    "prefix": "vprops",
    "body": [
      "${1|this,vm|}.\\$props$2"
    ],
    "description": "Type: Object. Read only."
  },
  "vel": {
    "prefix": "vel",
    "body": [
      "${1|this,vm|}.\\$el$2"
    ],
    "description": "Type: HTMLElement. Read only."
  },
  "voptions": {
    "prefix": "voptions",
    "body": [
      "${1|this,vm|}.\\$options$2"
    ],
    "description": "Type: Object. Read only."
  },
  "vparent": {
    "prefix": "vparent",
    "body": [
      "${1|this,vm|}.\\$parent$2"
    ],
    "description": "Type: Vue instance. Read only."
  },
  "vroot": {
    "prefix": "vroot",
    "body": [
      "${1|this,vm|}.\\$root$2"
    ],
    "description": "Type: Vue instance. Read only."
  },
  "vchildren": {
    "prefix": "vchildren",
    "body": [
      "${1|this,vm|}.\\$children$2"
    ],
    "description": "Type: Array<Vue instance>. Read only."
  },
  "vslots": {
    "prefix": "vslots",
    "body": [
      "${1|this,vm|}.\\$slots$2"
    ],
    "description": "Type: Object. Read only."
  },
  "vss": {
    "prefix": "vss",
    "body": [
      "${1|this,vm|}.\\$scopedSlots.default({",
      "\t$2",
      "})"
    ],
    "description": "Type: { [name: string]: props => VNode | Array<VNode> }. Read only."
  },
  "vrefs": {
    "prefix": "vrefs",
    "body": [
      "${1|this,vm|}.\\$refs$2"
    ],
    "description": "Type: Object. Read only."
  },
  "vis": {
    "prefix": "vis",
    "body": [
      "${1|this,vm|}.\\$isServer$2"
    ],
    "description": "Type: boolean. Read only."
  },
  "vattrs": {
    "prefix": "vattrs",
    "body": [
      "${1|this,vm|}.\\$attrs$2"
    ],
    "description": "Type: { [key: string]: string }. Read only."
  },
  "vlisteners": {
    "prefix": "vlisteners",
    "body": [
      "${1|this,vm|}.\\$listeners$2"
    ],
    "description": "Type: { [key: string]: Function | Array<Function> }. Read only."
  },
  "vwatch": {
    "prefix": "vwatch",
    "body": [
      "${1|this,vm|}.\\$watch(${2:expOrFn}, ${3:callback}${4:, [options]})"
    ],
    "description": "vm.$watch( expOrFn, callback, [options] )\n Arguments:\n {string | Function} expOrFn\n {Function | Object} callback\n {Object} [options]\n {boolean} [options.deep]\n\t {boolean} [options.immediate]"
  },
  "vset": {
    "prefix": "vset",
    "body": [
      "${1|this,vm|}.\\$set(${2:target}, ${3:key}, ${4:value})"
    ],
    "description": "vm.$set( target, key, value )"
  },
  "vdelete": {
    "prefix": "vdelete",
    "body": [
      "${1|this,vm|}.\\$delete(${2:target}, ${3:key})"
    ],
    "description": "vm.$delete( target, key )"
  },
  "von": {
    "prefix": "von",
    "body": [
      "${1|this,vm|}.\\$on('${2:event}', ${3:callback})$4"
    ],
    "description": "vm.$on( event, callback )"
  },
  "vonce": {
    "prefix": "vonce",
    "body": [
      "${1|this,vm|}.\\$once('${2:event}', ${3:callback})$4"
    ],
    "description": "vm.$once( event, callback )"
  },
  "voff": {
    "prefix": "voff",
    "body": [
      "${1|this,vm|}.\\$off('${2:event}', ${3:callback})$4"
    ],
    "description": "vm.$off( [event, callback] )"
  },
  "vemit": {
    "prefix": "vemit",
    "body": [
      "${1|this,vm|}.\\$emit('${2:event}'${3:, args})$4"
    ],
    "description": "vm.$emit( event, args )"
  },
  "vmount": {
    "prefix": "vmount",
    "body": [
      "${1|this,vm|}.\\$mount('$2')"
    ],
    "description": "vm.$mount( [elementOrSelector] )"
  },
  "vfu": {
    "prefix": "vfu",
    "body": [
      "${1|this,vm|}.\\$forceUpdate()"
    ],
    "description": "vm.$forceUpdate()"
  },
  "vdestroy": {
    "prefix": "vdestroy",
    "body": [
      "${1|this,vm|}.\\$destroy()$2"
    ],
    "description": "vm.$destroy()"
  },
  "vnextTick": {
    "prefix": "vnt",
    "body": [
      "${1|this,vm|}.\\$nextTick(() => {",
      "\t$2",
      "})"
    ],
    "description": "vue nexttick"
  }
}