{
	"$schema": "http://json-schema.org/draft-04/schema#",
	"type": "object",
	"definitions": {
		"configurations": {
			"type": "array",
			"items": {
				"type": "object",
				"required": [
					"name"
				],
				"properties": {
					"name": {
						"description": "Identificador de configuração. Mac, Linux e Win32 são identificadores especiais para as configurações que serão selecionadas automaticamente nessas plataformas, mas o identificador pode ser qualquer coisa.",
						"type": "string"
					},
					"compilerPath": {
						"description": "Caminho completo do compilador sendo usado, por exemplo, /usr/bin/gcc, para habilitar IntelliSense mais preciso.",
						"type": "string"
					},
					"compilerArgs": {
						"description": "Argumentos do compilador para modificar as inclusões ou definições usadas. Por exemplo, -nostdinc++, -m32, etc.",
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"cStandard": {
						"description": "Versão do padrão da linguagem C a ser usada para o IntelliSense. Observação: os padrões GNU são usados apenas para consultar o compilador de conjunto para obter definições GNU e o IntelliSense emulará a versão padrão do C equivalente.",
						"type": "string",
						"enum": [
							"c89",
							"c99",
							"c11",
							"c17",
							"gnu89",
							"gnu99",
							"gnu11",
							"gnu17",
							"${default}"
						]
					},
					"cppStandard": {
						"description": "Versão do padrão da linguagem C++ a ser usada para o IntelliSense. Observação: os padrões GNU são usados apenas para consultar o compilador de conjunto para obter definições de GNU e o IntelliSense emulará a versão do C++ padrão equivalente.",
						"type": "string",
						"enum": [
							"c++98",
							"c++03",
							"c++11",
							"c++14",
							"c++17",
							"c++20",
							"gnu++98",
							"gnu++03",
							"gnu++11",
							"gnu++14",
							"gnu++17",
							"gnu++20",
							"${default}"
						]
					},
					"compileCommands": {
						"description": "Caminho completo do arquivo compile_commands.json para o workspace.",
						"type": "string"
					},
					"includePath": {
						"description": "Uma lista de caminhos para o mecanismo do IntelliSense usar ao procurar cabeçalhos incluídos. A pesquisa nesses caminhos não é recursiva. Especifique '**' para indicar uma pesquisa recursiva. Por exemplo, '${workspaceFolder}/**' pesquisará em todos os subdiretórios, enquanto '${workspaceFolder}' não fará isso.",
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"macFrameworkPath": {
						"description": "Uma lista de caminhos para o mecanismo IntelliSense usar durante a pesquisa de cabeçalhos incluídos por meio das estruturas Mac. Compatível somente com configurações do Mac.",
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"windowsSdkVersion": {
						"description": "A versão do caminho de inclusão do SDK do Windows a ser usada no Windows, por exemplo, '10.0.17134.0'.",
						"type": "string",
						"pattern": "^\\d{2}\\.\\d{1}\\.\\d{5}\\.\\d{1}$|^8\\.1$"
					},
					"defines": {
						"description": "Uma lista de definições de pré-processador para o mecanismo IntelliSense usar durante a análise de arquivos. Opcionalmente, use = para definir um valor, por exemplo, VERSION=1.",
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"intelliSenseMode": {
						"description": "O modo do IntelliSense para usar que mapeia para uma variante específica de arquitetura do MSVC, gcc ou Clang. Se não estiver definido ou se for definido como ${default}, a extensão escolherá o padrão para essa plataforma. O Windows usa como padrão msvc-x64, o Linux usa gcc-x64 e o macOS usa clang-x64.",
						"type": "string",
						"enum": [
							"clang-x86",
							"clang-x64",
							"clang-arm",
							"clang-arm64",
							"gcc-x86",
							"gcc-x64",
							"gcc-arm",
							"gcc-arm64",
							"msvc-x86",
							"msvc-x64",
							"msvc-arm",
							"msvc-arm64",
							"${default}"
						]
					},
					"forcedInclude": {
						"description": "Uma lista de arquivos que devem ser incluídos antes de qualquer arquivo de inclusão em uma unidade de tradução.",
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"configurationProvider": {
						"description": "A ID de uma extensão do VS Code que pode fornecer informações de configuração do IntelliSense para arquivos de origem.",
						"type": "string"
					},
					"browse": {
						"type": "object",
						"properties": {
							"limitSymbolsToIncludedHeaders": {
								"description": "true para processar somente os arquivos direta ou indiretamente incluídos como cabeçalhos, false para processar todos os arquivos nos caminhos de inclusão especificados.",
								"type": [
									"boolean",
									"string"
								]
							},
							"databaseFilename": {
								"description": "Caminho para o banco de dados de símbolo gerado. Se um caminho relativo for especificado, ele será criado em relação ao local de armazenamento padrão do workspace.",
								"type": "string"
							},
							"path": {
								"description": "Uma lista de caminhos a serem usados para indexação e análise de símbolos do workspace (usados por Ir para Definição, Localizar Todas as Referências etc.). A pesquisa nesses caminhos é recursiva por padrão. Especifique '*' para indicar uma pesquisa não recursiva. Por exemplo, '${workspaceFolder}' pesquisará todos os subdiretórios enquanto '${workspaceFolder}/*' não fará isso.",
								"type": "array",
								"items": {
									"type": "string"
								}
							}
						},
						"additionalProperties": false
					},
					"customConfigurationVariables": {
						"type": "object",
						"description": "Variáveis personalizadas que podem ser consultadas por meio do comando ${cpptools:activeConfigCustomVariable} a serem usadas para as variáveis de entrada no launch.json ou tasks.json.",
						"patternProperties": {
							"(^.+$)": {
								"type": "string"
							}
						},
						"additionalProperties": false
					}
				},
				"additionalProperties": false
			}
		},
		"env": {
			"type": "object",
			"description": "Variáveis personalizadas que podem ser reutilizadas em qualquer lugar neste arquivo usando a sintaxe ${variável} ou ${env:variável}.",
			"patternProperties": {
				"(?!^workspaceFolder$)(?!^workspaceRoot$)(?!^workspaceFolderBasename$)(?!^default$)(^.+$)": {
					"oneOf": [
						{
							"type": "string"
						},
						{
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					]
				}
			},
			"additionalProperties": false
		},
		"version": {
			"type": "integer",
			"description": "Versão do arquivo de configuração. Esta propriedade é gerenciada pela extensão. Não a altere."
		},
		"enableConfigurationSquiggles": {
			"type": "boolean",
			"default": true,
			"description": "Controla se a extensão relatará erros detectados em c_cpp_properties.json."
		}
	},
	"properties": {
		"configurations": {
			"$ref": "#/definitions/configurations"
		},
		"env": {
			"$ref": "#/definitions/env"
		},
		"version": {
			"$ref": "#/definitions/version"
		},
		"enableConfigurationSquiggles": {
			"$ref": "#/definitions/enableConfigurationSquiggles"
		}
	},
	"required": [
		"configurations",
		"version"
	],
	"additionalProperties": false
}