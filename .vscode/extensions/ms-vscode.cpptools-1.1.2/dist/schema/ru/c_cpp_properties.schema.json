{
	"$schema": "http://json-schema.org/draft-04/schema#",
	"type": "object",
	"definitions": {
		"configurations": {
			"type": "array",
			"items": {
				"type": "object",
				"required": [
					"name"
				],
				"properties": {
					"name": {
						"description": "Идентификатор конфигурации. Mac, Linux и Win32 — это специальные идентификаторы для конфигураций, которые будут автоматически выбираться на этих платформах, но идентификатор может быть любым.",
						"type": "string"
					},
					"compilerPath": {
						"description": "Полный путь к используемому компилятору, например \"/usr/bin/gcc\", для повышения точности IntelliSense.",
						"type": "string"
					},
					"compilerArgs": {
						"description": "Аргументы компилятора для изменения используемых включений или определений, например -nostdinc++, -m32 и т. д.",
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"cStandard": {
						"description": "Версия стандарта языка C, используемая для IntelliSense. Примечание: стандарты GNU используются только для запроса определений GNU у установленного компилятора, а IntelliSense будет эмулировать эквивалентную версию стандарта C.",
						"type": "string",
						"enum": [
							"c89",
							"c99",
							"c11",
							"c17",
							"gnu89",
							"gnu99",
							"gnu11",
							"gnu17",
							"${default}"
						]
					},
					"cppStandard": {
						"description": "Версия стандарта языка C++, используемая для IntelliSense. Примечание: стандарты GNU используются только для запроса определений GNU у установленного компилятора, а IntelliSense будет эмулировать эквивалентную версию стандарта C++.",
						"type": "string",
						"enum": [
							"c++98",
							"c++03",
							"c++11",
							"c++14",
							"c++17",
							"c++20",
							"gnu++98",
							"gnu++03",
							"gnu++11",
							"gnu++14",
							"gnu++17",
							"gnu++20",
							"${default}"
						]
					},
					"compileCommands": {
						"description": "Полный путь к файлу compile_commands.json рабочей области.",
						"type": "string"
					},
					"includePath": {
						"description": "Список путей подсистемы IntelliSense, используемый при поиске включаемых заголовков. Поиск по этим путям не является рекурсивным. Чтобы использовать рекурсивный поиск, укажите \"**\". Например, если указать \"${workspaceFolder}/**\", будет выполнен поиск по всем подкаталогам, а если указать \"${workspaceFolder}\" — не будет.",
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"macFrameworkPath": {
						"description": "Список путей для подсистемы IntelliSense, используемых при поиске включаемых файлов заголовков из платформ Mac. Поддерживается только в конфигурации для Mac.",
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"windowsSdkVersion": {
						"description": "Версия пути включения Windows SDK для использования в Windows, например \"10.0.17134.0\".",
						"type": "string",
						"pattern": "^\\d{2}\\.\\d{1}\\.\\d{5}\\.\\d{1}$|^8\\.1$"
					},
					"defines": {
						"description": "Список определений препроцессора для подсистемы IntelliSense, используемых при анализе файлов. При необходимости вы можете задать значение с помощью \"=\", например: VERSION=1.",
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"intelliSenseMode": {
						"description": "Используемый режим IntelliSense, соответствующий определенному варианту MSVC, gcc или Clang для конкретной архитектуры. Если не задать его или указать значение ${default}, расширение выберет вариант по умолчанию для этой платформы. Для Windows по умолчанию используется msvc-x64, для Linux — gcc-x64, а для macOS — clang-x64.",
						"type": "string",
						"enum": [
							"clang-x86",
							"clang-x64",
							"clang-arm",
							"clang-arm64",
							"gcc-x86",
							"gcc-x64",
							"gcc-arm",
							"gcc-arm64",
							"msvc-x86",
							"msvc-x64",
							"msvc-arm",
							"msvc-arm64",
							"${default}"
						]
					},
					"forcedInclude": {
						"description": "Список файлов, которые должны быть включены перед любым файлом включений в единице трансляции.",
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"configurationProvider": {
						"description": "Идентификатор расширения VS Code, которое может предоставить данные конфигурации IntelliSense для исходных файлов.",
						"type": "string"
					},
					"browse": {
						"type": "object",
						"properties": {
							"limitSymbolsToIncludedHeaders": {
								"description": "При значении true (истина) будут обрабатываться только файлы, прямо или косвенно включенные как файлы заголовков, а при значении false (ложь) — все файлы по указанным путям для включений.",
								"type": [
									"boolean",
									"string"
								]
							},
							"databaseFilename": {
								"description": "Путь к создаваемой базе данных символов. При указании относительного пути он будет отсчитываться от используемого в рабочей области места хранения по умолчанию.",
								"type": "string"
							},
							"path": {
								"description": "Список путей, используемых для индексирования и анализа символов рабочей области (для использования командами \"Перейти к определению\", \"Найти все ссылки\" и т. д.). Поиск по этим путям по умолчанию является рекурсивным. Укажите \"*\", чтобы использовать нерекурсивный поиск. Например, \"${workspaceFolder}\" будет означать поиск во всех подкаталогах, тогда как \"${workspaceFolder}/*\" — не будет.",
								"type": "array",
								"items": {
									"type": "string"
								}
							}
						},
						"additionalProperties": false
					},
					"customConfigurationVariables": {
						"type": "object",
						"description": "Пользовательские переменные, которые можно запросить с помощью команды ${cpptools:activeConfigCustomVariable}, чтобы использовать в качестве входных переменных в файле launch.js или tasks.js.",
						"patternProperties": {
							"(^.+$)": {
								"type": "string"
							}
						},
						"additionalProperties": false
					}
				},
				"additionalProperties": false
			}
		},
		"env": {
			"type": "object",
			"description": "Пользовательские переменные, которые могут многократно применяться в любом месте этого файла с помощью синтаксиса ${переменная} или ${env:переменная}.",
			"patternProperties": {
				"(?!^workspaceFolder$)(?!^workspaceRoot$)(?!^workspaceFolderBasename$)(?!^default$)(^.+$)": {
					"oneOf": [
						{
							"type": "string"
						},
						{
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					]
				}
			},
			"additionalProperties": false
		},
		"version": {
			"type": "integer",
			"description": "Версия файла конфигурации. Этим свойством управляет расширение. Не изменяйте его."
		},
		"enableConfigurationSquiggles": {
			"type": "boolean",
			"default": true,
			"description": "Определяет, будет ли расширение сообщать об ошибках, обнаруженных в c_cpp_properties.json."
		}
	},
	"properties": {
		"configurations": {
			"$ref": "#/definitions/configurations"
		},
		"env": {
			"$ref": "#/definitions/env"
		},
		"version": {
			"$ref": "#/definitions/version"
		},
		"enableConfigurationSquiggles": {
			"$ref": "#/definitions/enableConfigurationSquiggles"
		}
	},
	"required": [
		"configurations",
		"version"
	],
	"additionalProperties": false
}