{
	"$schema": "http://json-schema.org/draft-04/schema#",
	"type": "object",
	"definitions": {
		"configurations": {
			"type": "array",
			"items": {
				"type": "object",
				"required": [
					"name"
				],
				"properties": {
					"name": {
						"description": "Identyfikator konfiguracji. Wartości Mac, Linux i Win32 są specjalnymi identyfikatorami dla konfiguracji, które zostaną wybrane automatycznie na tych platformach, ale ten identyfikator może być dowolny.",
						"type": "string"
					},
					"compilerPath": {
						"description": "Pełna ścieżka używanego kompilatora, na przykład /usr/bin/gcc. Umożliwia ona zwiększenie dokładności funkcji IntelliSense.",
						"type": "string"
					},
					"compilerArgs": {
						"description": "Argumenty kompilatora do modyfikacji używanych elementów dołączanych lub definicji, na przykład -nostdinc++, -m32 itp.",
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"cStandard": {
						"description": "Wersja standardu języka C, która ma być używana na potrzeby funkcji IntelliSense. Uwaga: standardy GNU są używane tylko do wykonywania zapytań względem kompilatora w celu pobrania dyrektyw define systemu GNU, a funkcja IntelliSense będzie emulować odpowiednią wersję standardu języka C.",
						"type": "string",
						"enum": [
							"c89",
							"c99",
							"c11",
							"c17",
							"gnu89",
							"gnu99",
							"gnu11",
							"gnu17",
							"${default}"
						]
					},
					"cppStandard": {
						"description": "Wersja standardu języka C++, która ma być używana na potrzeby funkcji IntelliSense. Uwaga: standardy GNU są używane tylko do wykonywania zapytań względem kompilatora w celu pobrania dyrektyw define systemu GNU, a funkcja IntelliSense będzie emulować odpowiednią wersję standardu języka C++.",
						"type": "string",
						"enum": [
							"c++98",
							"c++03",
							"c++11",
							"c++14",
							"c++17",
							"c++20",
							"gnu++98",
							"gnu++03",
							"gnu++11",
							"gnu++14",
							"gnu++17",
							"gnu++20",
							"${default}"
						]
					},
					"compileCommands": {
						"description": "Pełna ścieżka do pliku compile_commands.json dla obszaru roboczego.",
						"type": "string"
					},
					"includePath": {
						"description": "Lista ścieżek, których aparat IntelliSense ma używać podczas wyszukiwania dołączanych nagłówków. Wyszukiwanie w tych ścieżkach nie jest rekurencyjne. Użyj znaku „*”, aby określić wyszukiwanie rekurencyjne. Na przykład wartość „${workspaceFolder}/**” powoduje przeszukiwanie wszystkich podkatalogów, w przeciwieństwie do wartości „${workspaceFolder}”.",
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"macFrameworkPath": {
						"description": "Lista ścieżek, których aparat IntelliSense ma używać podczas wyszukiwania dołączanych nagłówków z platform na komputerach Mac. Obsługiwane tylko w konfiguracji dla komputerów Mac.",
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"windowsSdkVersion": {
						"description": "Wersja ścieżki dołączania zestawu Windows SDK do użycia w systemie Windows, na przykład „10.0.17134.0”.",
						"type": "string",
						"pattern": "^\\d{2}\\.\\d{1}\\.\\d{5}\\.\\d{1}$|^8\\.1$"
					},
					"defines": {
						"description": "Lista definicji preprocesora, które mają być używane przez aparat IntelliSense podczas analizowania plików. Opcjonalnie można użyć operatora =, aby ustawić wartość, na przykład VERSION=1.",
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"intelliSenseMode": {
						"description": "Tryb funkcji IntelliSense do użycia, który jest mapowany na specyficzny dla architektury wariant kompilatora MSVC, gcc albo Clang. Jeśli ta wartość nie zostanie ustawiona lub zostanie ustawiona na ${default}, rozszerzenie wybierze ustawienie domyślne dla danej platformy. Dla systemu Windows jest używana wartość domyślna msvc-x64, dla systemu Linux — gcc-x64, a dla systemu MacOS — clang-x64.",
						"type": "string",
						"enum": [
							"clang-x86",
							"clang-x64",
							"clang-arm",
							"clang-arm64",
							"gcc-x86",
							"gcc-x64",
							"gcc-arm",
							"gcc-arm64",
							"msvc-x86",
							"msvc-x64",
							"msvc-arm",
							"msvc-arm64",
							"${default}"
						]
					},
					"forcedInclude": {
						"description": "Lista plików, które powinny być dołączane przed wszelkimi dołączanymi plikami w jednostce translacji.",
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"configurationProvider": {
						"description": "Identyfikator rozszerzenia programu VS Code, które może udostępnić informacje o konfiguracji funkcji IntelliSense dla plików źródłowych.",
						"type": "string"
					},
					"browse": {
						"type": "object",
						"properties": {
							"limitSymbolsToIncludedHeaders": {
								"description": "Wartość true, aby przetwarzać tylko pliki bezpośrednio lub pośrednio dołączone jako nagłówki. Wartość false, aby przetwarzać wszystkie pliki w określonych ścieżkach dołączania.",
								"type": [
									"boolean",
									"string"
								]
							},
							"databaseFilename": {
								"description": "Ścieżka do generowanej bazy danych symboli. Jeśli zostanie określona ścieżka względna, będzie to ścieżka względem domyślnej lokalizacji magazynowania obszaru roboczego.",
								"type": "string"
							},
							"path": {
								"description": "Lista ścieżek używanych do indeksowania i analizowania symboli obszaru roboczego (używana m.in. przez funkcje Przejście do definicji, Znajdowanie wszystkich odwołań). Wyszukiwanie na tych ścieżkach jest domyślnie rekursywne. Za pomocą znaku „*” możesz oznaczyć wyszukiwanie jako nierekursywne. Na przykład „${workspaceFolder}” przeszukuje wszystkie podkatalogi, a „${workspaceFolder}/*” już nie.",
								"type": "array",
								"items": {
									"type": "string"
								}
							}
						},
						"additionalProperties": false
					},
					"customConfigurationVariables": {
						"type": "object",
						"description": "Zmienne niestandardowe, względem których można wykonywać zapytania za pomocą polecenia ${cpptools:activeConfigCustomVariable}, aby użyć ich na potrzeby zmiennych wejściowych w plikach launch.js lub tasks.js.",
						"patternProperties": {
							"(^.+$)": {
								"type": "string"
							}
						},
						"additionalProperties": false
					}
				},
				"additionalProperties": false
			}
		},
		"env": {
			"type": "object",
			"description": "Zmienne niestandardowe, których można używać ponownie w dowolnym miejscu tego pliku przy użyciu składni ${zmienna} lub ${env:zmienna}.",
			"patternProperties": {
				"(?!^workspaceFolder$)(?!^workspaceRoot$)(?!^workspaceFolderBasename$)(?!^default$)(^.+$)": {
					"oneOf": [
						{
							"type": "string"
						},
						{
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					]
				}
			},
			"additionalProperties": false
		},
		"version": {
			"type": "integer",
			"description": "Wersja pliku konfiguracji. Tą właściwością zarządza rozszerzenie. Nie zmieniaj jej."
		},
		"enableConfigurationSquiggles": {
			"type": "boolean",
			"default": true,
			"description": "Określa, czy rozszerzenie będzie raportować błędy wykryte w pliku c_cpp_properties.json."
		}
	},
	"properties": {
		"configurations": {
			"$ref": "#/definitions/configurations"
		},
		"env": {
			"$ref": "#/definitions/env"
		},
		"version": {
			"$ref": "#/definitions/version"
		},
		"enableConfigurationSquiggles": {
			"$ref": "#/definitions/enableConfigurationSquiggles"
		}
	},
	"required": [
		"configurations",
		"version"
	],
	"additionalProperties": false
}